<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML Meta</title>
    <url>/2020/08/31/HTML-meta/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>&lt;meta&gt;</code> 标签是 HTML 语言头部的一个辅助性标签，我们可以定义页面编码语言、搜索引擎优化、自动刷新并指向新的页面、控制页面缓冲、响应式视窗等</p>
<a id="more"></a>

<blockquote>
<p> 转载自<a href="https://blog.csdn.net/zhangank/article/details/94014629">HTML meta 标签</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">charset( H5 New)</td>
<td align="left">character_set</td>
<td align="left">定义文档的字符编码。</td>
</tr>
<tr>
<td align="left">content</td>
<td align="left">text</td>
<td align="left">定义与 http-equiv 或 name 属性相关的元信息。</td>
</tr>
<tr>
<td align="left">http-equiv</td>
<td align="left">content-type default-style refresh</td>
<td align="left">把 content 属性关联到 HTTP 头部。</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">application-name author description generator keywords</td>
<td align="left">把 content 属性关联到一个名称。</td>
</tr>
<tr>
<td align="left">scheme(H5 删除)</td>
<td align="left">format/URI</td>
<td align="left">HTML5不支持。 定义用于翻译 content 属性值的格式。</td>
</tr>
</tbody></table>
<p>整体来看，HTML5之前，<code>meta</code>标签只有两个主要属性，分别是 <code>name</code> 属性和 <code>http-equiv</code> 属性。 HTML5新添加”<code>charset</code>“.</p>
<h2 id="一、name"><a href="#一、name" class="headerlink" title="一、name"></a>一、name</h2><p><code>name</code>属性主要用于描述网页，对应属性是 <code>content</code> ，<strong>以便于搜索引擎机器人查找、分类</strong>（目前几乎所有的搜索引擎都使用网上机器人自动查找meta值来给网页分类）。</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;参数&quot; content=&quot;参数值&quot; /&gt;</code></p>
<h3 id="1-Keywords（关键字）"><a href="#1-Keywords（关键字）" class="headerlink" title="1. Keywords（关键字）"></a>1. Keywords（关键字）</h3><p><strong>说明</strong>：为搜索引擎提供的关键字列表</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;keywords&quot; content=&quot;程序员,程序猿,攻城狮&quot;/&gt;</code></p>
<h3 id="2-Description（简介）"><a href="#2-Description（简介）" class="headerlink" title="2. Description（简介）"></a>2. Description（简介）</h3><p><strong>说明</strong>：Description用来告诉搜索引擎你的网站主要内容。</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;description&quot; content=&quot;meta标签是HTML中的一个重要标签，它位于HTML文档头部的&lt;HEAD&gt;标签和&lt;TITL&gt;标签之间。&quot;/&gt;</code></p>
<h3 id="3-robots（机器人向导）"><a href="#3-robots（机器人向导）" class="headerlink" title="3. robots（机器人向导）"></a>3. robots（机器人向导）</h3><p><strong>说明</strong>：robots用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引。</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;robots&quot; content=&quot;&quot;/&gt;</code></p>
<p><code>content</code>的参数值有<code>all</code>,<code>none</code>,<code>index</code>,<code>noindex</code>,<code>follow</code>,<code>nofollow</code>，默认值是<u>all</u>。</p>
<p><strong>参数说明</strong>：</p>
<ul>
<li>参数为 all ：文件将被检索，且页面上的链接可以被查询； </li>
<li>参数为 none ：文件将不被检索，且页面上的链接不可以被查询； </li>
<li>参数为 index ：文件将被检索；</li>
<li>参数为 follow ：页面上的链接可以被查询； </li>
<li>参数为 noindex ：文件将不被检索，但页面上的链接可以被查询； </li>
<li>参数为 nofollow ：文件将被检索，但页面上的链接不可以被查询；</li>
</ul>
<h3 id="4-author（作者）"><a href="#4-author（作者）" class="headerlink" title="4. author（作者）"></a>4. author（作者）</h3><p><strong>说明</strong>：标注网页的作者</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;author&quot; content=&quot;TG,TG@qq.com&quot;/&gt;</code></p>
<h3 id="5-copyright（版权）"><a href="#5-copyright（版权）" class="headerlink" title="5. copyright（版权）"></a>5. copyright（版权）</h3><p><strong>说明</strong>：标注版权</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;copyright&quot; content=&quot;本网站版权归TG所有&quot;/&gt;</code></p>
<h3 id="6-generator"><a href="#6-generator" class="headerlink" title="6. generator"></a>6. generator</h3><p><strong>说明</strong>：说明网站采用什么编辑器制作。</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;generator&quot; content=&quot;你所用的编辑器&quot;/&gt;</code></p>
<h3 id="7-revisit-after（重访）"><a href="#7-revisit-after（重访）" class="headerlink" title="7. revisit-after（重访）"></a>7. revisit-after（重访）</h3><p><strong>说明</strong>：网站重访</p>
<p><strong>语法</strong>：<code>&lt;meta name=&quot;revisit-after&quot; content=&quot;7days&quot;/&gt;</code></p>
<h2 id="二、http-equiv"><a href="#二、http-equiv" class="headerlink" title="二、http-equiv"></a>二、http-equiv</h2><p><code>http-equiv</code>类似于HTTP的头部协议，它回应给浏览器一些有用的信息，以帮助正确和精确地显示网页内容。与之对应的属性值为<code>content</code>，content中的内容其实就是各个参数的变量值。</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;参数&quot;  content=&quot;参数值&quot;/&gt;</code></p>
<p><strong>参数说明</strong>如下</p>
<h3 id="1-Expires（期限）"><a href="#1-Expires（期限）" class="headerlink" title="1. Expires（期限）"></a>1. Expires（期限）</h3><p><strong>说明</strong>：指定网页在缓存中的过期时间，一旦网页过期，必须到服务器上重新传输。</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;Wed, 26 Feb 1997 08:21:57 GMT&quot;/&gt;</code></p>
<p><strong>注意</strong>：必须使用GMT的时间格式，或者直接设为0（数字表示多久后过期）</p>
<h3 id="2-Pragma（cache模式）"><a href="#2-Pragma（cache模式）" class="headerlink" title="2. Pragma（cache模式）"></a>2. Pragma（cache模式）</h3><p><strong>说明</strong>：禁止浏览器从本地计算机的缓存中访问页面内容。</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;/&gt;</code></p>
<p><strong>注意</strong>：网页不保存在缓存中，每次访问都刷新页面。这样设定，访问者将无法脱机浏览。</p>
<h3 id="3-Refresh（刷新）"><a href="#3-Refresh（刷新）" class="headerlink" title="3. Refresh（刷新）"></a>3. Refresh（刷新）</h3><p><strong>说明</strong>：自动刷新并指向新页面。</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;refresh&quot;content=&quot;5; url=http://www.baidu.com/&quot;/&gt;</code></p>
<p>其中的5表示5秒后自动刷新并调整到URL新页面。</p>
<h3 id="4-Set-Cookie（cookie设定）"><a href="#4-Set-Cookie（cookie设定）" class="headerlink" title="4. Set-Cookie（cookie设定）"></a>4. Set-Cookie（cookie设定）</h3><p><strong>说明</strong>：浏览器访问某个页面时会将它存在缓存中，下次再次访问时就可从缓存中读取，以提高速度。当你希望访问者每次都刷新你广告的图标，或每次都刷新你的计数器，就要禁用缓存了。</p>
<p>如果网页过期，那么存盘的cookie将被删除。</p>
<p><strong>语法</strong>：</p>
<p><code>&lt;meta http-equiv=&quot;Set-Cookie&quot;  content=&quot;cookievalue=xxx; expires=Wednesday,21-Oct-98 16:14:21 GMT; path=/&quot;&gt;</code></p>
<p><strong>注意</strong>：必须使用GMT的时间格式</p>
<h3 id="5-Window-target（显示窗口的设定）"><a href="#5-Window-target（显示窗口的设定）" class="headerlink" title="5. Window-target（显示窗口的设定）"></a>5. Window-target（显示窗口的设定）</h3><p><strong>说明</strong>：强制页面在当前窗口以独立页面显示</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;_top&quot;/&gt;</code></p>
<p>可以用来防止别人在框架里调用你的页面。</p>
<h3 id="6-content-Type（显示字符集的设定）"><a href="#6-content-Type（显示字符集的设定）" class="headerlink" title="6.  content-Type（显示字符集的设定）"></a>6.  content-Type（显示字符集的设定）</h3><p><strong>说明</strong>：设定页面使用的字符集</p>
<p><code>&lt;meta http-equiv=&quot;content-Type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;</code></p>
<p><strong>其他参数值</strong>：</p>
<ul>
<li>meta标签的charset的信息参数如GB2312时，代表说明网站是采用的编码是简体中文；</li>
<li>meta标签的charset的信息参数如BIG5时，代表说明网站是采用的编码是繁体中文； </li>
<li>meta标签的charset的信息参数如iso-2022-jp时，代表说明网站是采用的编码是日文；  </li>
<li>meta标签的charset的信息参数如ks_c_5601时，代表说明网站是采用的编码是韩文；  </li>
<li>meta标签的charset的信息参数如ISO-8859-1时，代表说明网站是采用的编码是英文；  </li>
<li>meta标签的charset的信息参数如UTF-8时，代表世界通用的语言编码；</li>
</ul>
<blockquote>
<p>在HTML5中，我们一般都是：<code>&lt;meta charset=&quot;utf-8&quot;/&gt;</code></p>
</blockquote>
<h3 id="7-content-Language（显示语言的设定）"><a href="#7-content-Language（显示语言的设定）" class="headerlink" title="7. content-Language（显示语言的设定）"></a>7. content-Language（显示语言的设定）</h3><p><strong>说明</strong>：显示语言</p>
<p><strong>语法</strong>：<code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-cn&quot;/&gt;</code></p>
<h3 id="8-http-equiv-”imagetoolbar”"><a href="#8-http-equiv-”imagetoolbar”" class="headerlink" title="8. http-equiv=”imagetoolbar”"></a>8. http-equiv=”imagetoolbar”</h3><p><code>&lt;meta http-equiv=&quot;imagetoolbar&quot; content=&quot;false&quot;/&gt;</code></p>
<p>指定是否显示图片工具栏，当<code>为false</code>代表不显示，当为<code>true</code>代表显示。</p>
<h2 id="三、HTML-5新增"><a href="#三、HTML-5新增" class="headerlink" title="三、HTML 5新增"></a>三、HTML 5新增</h2><h3 id="1-name"><a href="#1-name" class="headerlink" title="1. name"></a>1. name</h3><h4 id="1-1-viewport"><a href="#1-1-viewport" class="headerlink" title="1.1 viewport"></a>1.1 viewport</h4><p><strong>说明</strong>：能优化移动浏览器的显示（屏幕的缩放）</p>
<p><strong>语法</strong>：</p>
<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;/&gt;</code></p>
<p><strong>参数值</strong>：</p>
<p><code>width</code> viewport的宽度[device-width | pixel_value]width如果直接设置pixel_value数值，大部分的安卓手机不支持，但是ios支持；  </p>
<p><code>height</code> – viewport 的高度 （范围从 223 到 10,000 ）  </p>
<p><code>user-scalable</code> [yes | no]是否允许缩放  </p>
<p><code>initial-scale</code> [数值] 初始化比例（范围从 &gt; 0 到 10）  </p>
<p><code>minimum-scale</code> [数值] 允许缩放的最小比例  </p>
<p><code>maximum-scale</code> [数值] 允许缩放的最大比例  </p>
<h4 id="1-2-format-detection（忽略电话号码和邮箱）"><a href="#1-2-format-detection（忽略电话号码和邮箱）" class="headerlink" title="1.2 format-detection（忽略电话号码和邮箱）"></a>1.2 format-detection（忽略电话号码和邮箱）</h4><p><strong>说明</strong>：忽略电话号码和邮箱</p>
<p><strong>语法</strong>：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>忽略页面中的数字识别为电话号码</span><br><span class="line">&lt;meta name=<span class="string">&quot;format-detection&quot;</span>content=<span class="string">&quot;telephone=no&quot;</span>&gt;</span><br><span class="line"><span class="regexp">//</span>忽略页面中的邮箱格式识别为邮箱</span><br><span class="line">&lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;email=no&quot;</span>/&gt;</span><br><span class="line"><span class="regexp">//</span> 也可以写成：</span><br><span class="line">&lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telphone=no, email=no&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-浏览器内核控制"><a href="#1-3-浏览器内核控制" class="headerlink" title="1.3 浏览器内核控制"></a>1.3 浏览器内核控制</h4><p>国内浏览器很多都是双内核（<code>webkit</code>和<code>Trident</code>），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。（仅限360浏览器）</p>
<p><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit|ie-comp|ie-stand&quot;&gt;</code></p>
<p>若页面需默认用极速核，增加标签：<code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code><br>若页面需默认用ie兼容内核，增加标签：<code>&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt;</code><br>若页面需默认用ie标准内核，增加标签：<code>&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt;</code></p>
<p>  <strong>各渲染内核的技术细节</strong></p>
<table>
<thead>
<tr>
<th align="left">内核</th>
<th>Webkit</th>
<th>IE兼容</th>
<th>IE标准</th>
</tr>
</thead>
<tbody><tr>
<td align="left">内核版本</td>
<td>Chrome 45</td>
<td>IE6/7</td>
<td>IE9/IE10/IE11(取决于用户的IE)</td>
</tr>
<tr>
<td align="left">HTML5支持</td>
<td>YES</td>
<td>NO</td>
<td>YES</td>
</tr>
<tr>
<td align="left">ActiveX控件支持</td>
<td>NO</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody></table>
<h4 id="1-4-WebApp全屏模式"><a href="#1-4-WebApp全屏模式" class="headerlink" title="1.4 WebApp全屏模式"></a>1.4 WebApp全屏模式</h4><p><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt; &lt;!-- 启用 WebApp 全屏模式 --&gt;</code></p>
<h4 id="1-5-隐藏状态栏-设置状态栏颜色"><a href="#1-5-隐藏状态栏-设置状态栏颜色" class="headerlink" title="1.5 隐藏状态栏/设置状态栏颜色"></a>1.5 隐藏状态栏/设置状态栏颜色</h4><p>只有在开启WebApp全屏模式时才生效。content的值为<code>default</code> | <code>black</code> | <code>black-translucent</code> 。</p>
<p><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</code></p>
<h4 id="1-6-不同浏览器"><a href="#1-6-不同浏览器" class="headerlink" title="1.6 不同浏览器"></a>1.6 不同浏览器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">`<span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span> `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;HandheldFriendly&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  `</span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span>  `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;MobileOptimized&quot;</span> <span class="attr">content</span>=<span class="string">&quot;320&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- uc强制竖屏 --&gt;</span>  `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span>  `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- UC强制全屏 --&gt;</span> `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- QQ强制全屏 --&gt;</span>  `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- UC应用模式 --&gt;</span> `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- QQ应用模式 --&gt;</span> `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span> `</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;msapplication-tap-highlight&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-http-equiv"><a href="#2-http-equiv" class="headerlink" title="2. http-equiv"></a>2. http-equiv</h3><h4 id="2-1-优先使用-IE-最新版本和-Chrome"><a href="#2-1-优先使用-IE-最新版本和-Chrome" class="headerlink" title="2.1 优先使用 IE 最新版本和 Chrome"></a>2.1 优先使用 IE 最新版本和 Chrome</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span>  </span><br><span class="line"></span><br><span class="line">`<span class="comment">&lt;!-- 关于X-UA-Compatible --&gt;</span>  `</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=6&quot;</span> &gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=7&quot;</span> &gt;</span><span class="comment">&lt;!-- 用于在IE8版本浏览器中使用IE7渲染来避免出错 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=8&quot;</span> &gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-转码申明"><a href="#2-2-转码申明" class="headerlink" title="2.2 转码申明"></a>2.2 转码申明</h4><p>用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下<code>meta</code></p>
<p><code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</code></p>
<h3 id="3-charset"><a href="#3-charset" class="headerlink" title="3. charset"></a>3. charset</h3><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
<ul>
<li><p>meta标签的charset的信息参数如<code>GB2312</code>时，代表说明网站是采用的编码是简体中文；</p>
</li>
<li><p>meta标签的charset的信息参数如<code>BIG5</code>时，代表说明网站是采用的编码是繁体中文； </p>
</li>
<li><p>meta标签的charset的信息参数如<code>iso-2022-jp</code>时，代表说明网站是采用的编码是日文；  </p>
</li>
<li><p>meta标签的charset的信息参数如<code>ks_c_5601</code>时，代表说明网站是采用的编码是韩文；  </p>
</li>
<li><p>meta标签的charset的信息参数如<code>ISO-8859-1</code>时，代表说明网站是采用的编码是英文；  </p>
</li>
<li><p>meta标签的charset的信息参数如<code>UTF-8</code>时，代表世界通用的语言编码</p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML标签</title>
    <url>/2020/08/31/HTML-tags/</url>
    <content><![CDATA[<h2 id="一、Html5废弃标签"><a href="#一、Html5废弃标签" class="headerlink" title="一、Html5废弃标签"></a>一、Html5废弃标签</h2><blockquote>
<p>转自<a href="http://yanue.net/">半叶寒羽</a> » <a href="http://yanue.net/post-106.html">HTML5废弃的标签及属性</a></p>
</blockquote>
<h3 id="第一类：表现性元素"><a href="#第一类：表现性元素" class="headerlink" title="第一类：表现性元素"></a>第一类：表现性元素</h3><ul>
<li>basefont</li>
<li>big</li>
<li>center</li>
<li>font</li>
<li>s</li>
<li>strike</li>
<li>tt</li>
<li>u</li>
</ul>
<p>建议用语义正确的元素代替他们，并使用CSS来确保渲染后的效果</p>
<h3 id="第二类：框架类元素"><a href="#第二类：框架类元素" class="headerlink" title="第二类：框架类元素"></a>第二类：框架类元素</h3><p>因框架有很多可用性及可访问性问题，HTML5规范将以下元素移除。</p>
<ul>
<li>frame</li>
<li>frameset</li>
<li>noframes</li>
</ul>
<p>但html5支持iframe。</p>
<h3 id="第三类：属性类"><a href="#第三类：属性类" class="headerlink" title="第三类：属性类"></a>第三类：属性类</h3><p>很多表现性的属性也被新规范移除，如下：</p>
<ul>
<li>align</li>
<li>body标签上的link、vlink、alink、text属性</li>
<li>bgcolor</li>
<li>height和width</li>
<li>iframe元素上的scrolling属性</li>
<li>valign</li>
<li>hspace和vspace</li>
<li>table标签上的cellpadding、cellspacing和border属性</li>
<li>header标签上的profile属性</li>
<li>链接标签a上的target属性</li>
<li>img和iframe元素的longdesc属性</li>
</ul>
<h3 id="第四类：其他"><a href="#第四类：其他" class="headerlink" title="第四类：其他"></a>第四类：其他</h3><ul>
<li>abbr取代acronym（用于表示缩写）</li>
<li>object取代了applet</li>
<li>ul取代了dir</li>
</ul>
<blockquote>
<p>另附上直观的：<a href="http://demo.yanue.net/HTML5element/">html5元素周期表</a></p>
</blockquote>
<h2 id="二、HTML5新增的语义化标签"><a href="#二、HTML5新增的语义化标签" class="headerlink" title="二、HTML5新增的语义化标签"></a>二、HTML5新增的语义化标签</h2><p>主要有：<code> &lt;article&gt;、&lt;section&gt;、&lt;nav&gt;、&lt;aside&gt;、&lt;header&gt;、&lt;footer&gt;、&lt;time&gt;</code>等等…</p>
<p><img data-src="pic1.png"></p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构</li>
<li>比<code>&lt;div&gt;</code>标签有更加丰富的含义，方便开发与维护</li>
<li>方便搜索引擎能识别页面结构，有利于<code>SEO</code></li>
<li>方便其他设备解析（如移动设备、盲人阅读器等）</li>
<li>有利于合作，遵守W3C标准</li>
</ul>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul>
<li>尽可能少的使用无语义的标签div和span</li>
<li>在语义不明显时，既可以使用div或者p时，尽量用p，因为p在默认情况下有上下间距，对兼容特殊终端有利</li>
<li>不要使用纯样式标签，如：b、font、u等，改用css设置</li>
<li>需要强调的文本，可以包含在strong或者em标签中</li>
<li>使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td</li>
<li>表单域要用fieldset标签包起来，并用legend标签说明表单的用途</li>
<li>每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性</li>
</ul>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><h4 id="1-header与hgroup"><a href="#1-header与hgroup" class="headerlink" title="1. header与hgroup"></a>1. <code>header</code>与<code>hgroup</code></h4><p>放在页面或布局的顶部，一般放置导航栏或标题，如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>**信息科技有限公司<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个文档中可以包含一对或者一对以上的<code>&lt;header&gt;</code>标签。<br> 标签的位置是次要的，不一定非要显示在页面的上方，我们可以为任何需要的区块标签添加<code>&lt;header&gt;</code>元素，例如下面将要讲解的<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>等标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一篇介绍HTML 5语义化标签和更简洁的结构<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>HTML 5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果有连续多个h1-h6标签就用hgroup</li>
<li>如果有连续多个标题和其他文章数据，h1-h6标签就用hgroup包住，和其他文章元数据一起放入header标签</li>
</ul>
<h4 id="2-nav"><a href="#2-nav" class="headerlink" title="2. nav"></a>2. nav</h4><p>表示页面的导航，也可以在<code>&lt;header&gt;</code>标签中使用，还可以显示在侧边栏中。一个页面之中可以有多个<code>&lt;nav&gt;</code>标签。<br> 为了方便搜索引擎解析，最好是将主要的链接放在nav中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>**信息科技有限公司<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;example.html&quot;</span>&gt;</span>客户案例<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;service_one.html&quot;</span>&gt;</span>技术服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>          </span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;aboutus_one.html&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;connection.html&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-aside"><a href="#3-aside" class="headerlink" title="3. aside"></a>3. aside</h4><p>所包含的内容不是页面的主要内容、具有独立性，是对页面的补充。<br><code> &lt;aside&gt;</code>一般使用在页面、文章的侧边栏、广告、友情链接等区域。</p>
<h4 id="4-footer"><a href="#4-footer" class="headerlink" title="4. footer"></a>4. footer</h4><p>一般被放置在页面或者页面中某个区块的底部，包含版权信息、联系方式等信息。一个页面也可以有多个footer</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span></span><br><span class="line">        版权所有 © 2016-2017 **信息科技有限公司</span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-article"><a href="#5-article" class="headerlink" title="5. article"></a>5. article</h4><p><code>&lt;article&gt;</code>元素应该使用在相对比较独立、完整的的内容区块，所以我们可以在一篇博客、一个论坛帖子、一篇新闻报道或者一个用户评论中使用<code>&lt;article&gt;</code>元素。article可以互相嵌套。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML5学习之语义化标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>....正文.....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">footer</span>&gt;</span>版权所有*伪版必究<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-section"><a href="#6-section" class="headerlink" title="6. section"></a>6. section</h4><p>一组或者一节内容。</p>
<p><strong><code>&lt;div&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code>三者的比较：</strong></p>
<p><code>&lt;div&gt;</code>：应用广泛，任意一个区域<br><code>&lt;section&gt;</code>：包含的内容是一个明确的主题，通常有标题区域<br><code>&lt;article&gt;</code>：如果我们的页面中需要一个单独的模块来实现一个单独的功能，就用<code>&lt;article&gt;</code>，其他的时候都用<code>&lt;section&gt;</code></p>
<h4 id="7-time"><a href="#7-time" class="headerlink" title="7. time"></a>7. time</h4><p>可以带格式的时间标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2017-07-03&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-mark"><a href="#8-mark" class="headerlink" title="8. mark"></a>8. mark</h4><p>高亮</p>
<h4 id="9-address"><a href="#9-address" class="headerlink" title="9. address"></a>9. address</h4><p>address代表区块容器，必须是作为联系信息出现，邮编地址、邮件地址等等,一般出现在footer。</p>
<h2 id="三、-lt-a-gt-标签"><a href="#三、-lt-a-gt-标签" class="headerlink" title="三、&lt;a&gt;标签"></a>三、<code>&lt;a&gt;</code>标签</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">click</span>=<span class="string">&quot;function()</span></span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> /&gt;</span>=</span></span><br></pre></td></tr></table></figure>

<h3 id="1-a-标签样式"><a href="#1-a-标签样式" class="headerlink" title="1. a 标签样式"></a>1. a 标签样式</h3><p> 一组专门的预定义的类称为伪类用于处理超链接的状态，超链接的文字的状态可以通过伪类选择器+样式类进行控制  <code>&lt;a class=&quot;mycls&quot; &gt;&lt;/a&gt;</code></p>
<ul>
<li><p>所有状态下的链接 <code>.mycls&#123;color:red&#125;</code></p>
</li>
<li><p><code>a:link</code> 未访问的连接<code> .mycls a:link&#123;color:blue&#125;</code></p>
</li>
<li><p><code>a:visited</code> 已访问的链接<code>.mycls a:visited&#123;color: visited&#125;</code></p>
</li>
<li><p><code>a:active</code>  激活时（链接获取焦点）链接的颜色<code> .mycls a:active&#123;color:blue&#125;</code></p>
</li>
</ul>
<p>一般情况下 a:hiver和a:visited的颜色是一种的，这4个状态的过程是： <code>a:link -&gt;a:hover-&gt;a:active-&gt;a:visited</code><br>另外，a：active不能设置有无下划线（总是有的）</p>
<pre><code> &lt;style&gt;
    a &#123;font-size:16px&#125; 
    a:link &#123;color: blue; text-decoration:none;&#125; //未访问：蓝色、无下划线 
    a:active:&#123;color: red; &#125; //激活：红色 
    a:visited &#123;color:purple;text-decoration:none;&#125; //已访问：purple、无下划线 
    a:hover &#123;color: red; text-decoration:underline;&#125; //鼠标移近：红色、下划线 
  &lt;/style&gt;</code></pre>
<h3 id="2-target的属性"><a href="#2-target的属性" class="headerlink" title="2. target的属性"></a>2. target的属性</h3><p><code>&lt;a&gt;</code>标签的target属性规定在何处打开链接文档<br>如下面这行表示在新的窗口中打开文档<br><code> &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt; visit w3school &lt;/a&gt;</code></p>
<p>可选值：<code>_blank</code>、<code>_parent</code>、<code>_self</code>、<code>_top</code>、<code>*framename*</code></p>
<p><strong>_blank</strong>        浏览器总在一个新打开，未命名的窗口中载入目标文档 </p>
<p><strong>_self</strong>        这个目标的值对所有没有指定目标的<code>&lt;a&gt;</code>标签是默认目标。它使得目标文档载入并显示在相同的框架或者窗口中作为源文档。这个目标是多余的且不必要的，除非和文档标题<code>&lt;base&gt;</code>标签中的target属性一起使用    </p>
<p><strong>_parent</strong>        在父框架集中打开被链接的文档</p>
<p><strong>_top</strong>              在整个窗口打开被链接文档</p>
<p><strong>framename</strong>   在指定的框架中打开被链接文档</p>
<h3 id="3-name属性"><a href="#3-name属性" class="headerlink" title="3. name属性"></a>3. name属性</h3><p><code>name</code>属性规定锚(anchor)的名称，可以使用<code>name</code>属性创建html页面中的书签，书签不会以任何独特方式显示，它对读者可以是不可见的。<br>当使用<code>命名锚</code>(named anchors)时，我们可以创建直接跳转至该命名锚(比如页面中某个小节)的链接,这样使用者就无需不停滚动页面来寻找需要的信息了。<br><strong>命名语法</strong><br><code>&lt;a name=&quot;label&quot;&gt;锚(显示在页面上的文本)&lt;/a&gt;</code></p>
<ul>
<li>锚名称可以是任何名字</li>
<li>可以使用id属性来代替name属性，命名锚同样有效</li>
</ul>
<p><strong>例子</strong><br>  1)我们在html文档中对锚进行命名(创建一个书签)<br>  <code>&lt;a name=&quot;tips&quot;&gt;基本的注意事项 - 有用的提示&lt;/a&gt;</code><br>  2）在同一个文档中创建指向该锚的链接<br>  <code>&lt;a href=&quot;tips&quot;&gt;有用的提示&lt;/a&gt;</code><br>  3)也可以在其他页面中创建指向，该锚的链接<br>  <code>&lt;a href=&quot;http://mypro#trip&quot;&gt;有用的提示&lt;a&gt;</code></p>
<h3 id="4-标签事件"><a href="#4-标签事件" class="headerlink" title="4. 标签事件"></a>4. 标签事件</h3><p>将<code>&lt;a&gt;</code>标签的<code>href</code>属性值设置为”#”，并设置<code>onclick</code>属性。<br>在这种处理方式下，用户可以很明显地看出哪些文字是超链接。<br>在单击该超链接时，也可以执行onclick属性值中的JavaScript语句，并且不会跳转网页。</p>
<blockquote>
<p>但是，由于href的属性值为”#”，浏览器会自动跳 转到当前网页的顶部。<br>如果当前网页内容比较多，浏览器窗口出现下拉滚动条时，可以很明显地看到跳转，而这种跳转往往不是网页设计者的本意。</p>
</blockquote>
<p>在没有为<code>&lt;a&gt;</code>标签设置onclick属性时，如果单击了该超链接，浏览器会加载href属性中的URL。<br>如果href属性值并不是一 个URL，而是一个JavaScript语句的话，那么浏览器就会执行该语句。<br>因此，可以直接将JavaScript语句写在<code>&lt;a&gt;</code>标签的 href属性值中，让href属性代替onclick属性。</p>
<p><strong>在这种处理方式下，既可以响应click事件，又可以不让网页跳转。</strong></p>
<p><strong>注意</strong>：在 a 标签的属性值中添加JavaScript语句之前，必须要先使用”javascript:”语句来声明href属性值中的语句为<code>javaScript</code>语句，否则浏览器就会将href属性值中的JavaScript语句当成URL进行加载。<br><code>&lt;a  href=&quot;javascript:showFlag()&quot;&gt;ssgao&lt;/a&gt;  </code>   执行showFlag()方法<br><code>&lt;a  href=&quot;&quot; onclick=&quot;showFlag();&quot;&gt;ssgao&lt;/a&gt;</code>    执行showFlag()方法，并会跳转到href指向的页面—-&gt;当<code>href=&quot;&quot;</code>刷新当前页面<br><code>&lt;a  href=&quot;&quot;&gt;ssgao&lt;/a&gt;</code>  刷新当前页面<br><code>&lt;a  href=&quot;#&quot; onclick=&quot;showFlag();&quot;&gt;ssgao&lt;/a&gt;</code>   执行showFlag()方法，并会跳转到页面顶部<br><code>&lt;a href=&quot;#&quot; onclick=&quot;javascript:方法;return false;&quot;&gt;提交&lt;/a&gt;</code><br><code>&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;javascript:方法;return false;&quot;&gt;提交&lt;/a&gt;</code><br>javascript:void(0)就不会向上跳了<br>还有一个方法是 #this<br><code>a href=&quot;#this&quot; onclick=&quot;javascript:方法&quot;</code></p>
<h3 id="5-回到顶部或底部"><a href="#5-回到顶部或底部" class="headerlink" title="5. 回到顶部或底部"></a>5. 回到顶部或底部</h3><h4 id="使用JS"><a href="#使用JS" class="headerlink" title="使用JS"></a>使用JS</h4><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#带有滚动条的元素&quot;</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;,<span class="string">&#x27;fase&#x27;</span>); <span class="comment">//带有动画</span></span><br><span class="line">$(<span class="string">&quot;#带有滚动条的元素&quot;</span>).scrollTop(<span class="number">0</span>)；<span class="comment">//不带动画</span></span><br><span class="line">scrollTop 距离滚动元素顶部的位置</span><br></pre></td></tr></table></figure>

<h4 id="使用a标签的name属性-锚记"><a href="#使用a标签的name属性-锚记" class="headerlink" title="使用a标签的name属性(锚记)"></a>使用a标签的name属性(锚记)</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">name</span>=<span class="string">&quot;top&quot;</span>&gt;top&lt;/a&gt;</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">&quot;#top&quot;</span>&gt; 点击此处跳转到<span class="attribute">name</span>=top的a标签的位置    </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_charset.asp">charset</a></td>
<td align="left"><em>char_encoding</em></td>
<td align="left"><span style="color:red;">HTML5 中不支持。</span>规定被链接文档的字符集。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_coords.asp">coords</a></td>
<td align="left"><em>coordinates</em></td>
<td align="left"><span style="color:red;">HTML5 中不支持。</span>规定链接的坐标。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_download.asp">download</a></td>
<td align="left"><em>filename</em></td>
<td align="left">规定被下载的超链接目标。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_href.asp">href</a></td>
<td align="left"><em>URL</em></td>
<td align="left">规定链接指向的页面的 URL。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_hreflang.asp">hreflang</a></td>
<td align="left"><em>language_code</em></td>
<td align="left">规定被链接文档的语言。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_media.asp">media</a></td>
<td align="left"><em>media_query</em></td>
<td align="left">规定被链接文档是为何种媒介/设备优化的。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_name.asp">name</a></td>
<td align="left"><em>section_name</em></td>
<td align="left"><span style="color:red;">HTML5 中不支持。</span>规定锚的名称。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_rel.asp">rel</a></td>
<td align="left"><em>text</em></td>
<td align="left">规定当前文档与被链接文档之间的关系。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_rev.asp">rev</a></td>
<td align="left"><em>text</em></td>
<td align="left"><span style="color:red;">HTML5 中不支持。</span>规定被链接文档与当前文档之间的关系。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_shape.asp">shape</a></td>
<td align="left">defaultrectcirclepoly</td>
<td align="left"><span style="color:red;">HTML5 中不支持。</span>规定链接的形状。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_target.asp">target</a></td>
<td align="left">_blank_parent_self_top<em>framename</em></td>
<td align="left">规定在何处打开链接文档。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/tags/att_a_type.asp">type</a></td>
<td align="left"><em>MIME type</em></td>
<td align="left">规定被链接文档的的 MIME 类型。</td>
</tr>
</tbody></table>
<h2 id="四、HTML-lt-table-gt-标签功能"><a href="#四、HTML-lt-table-gt-标签功能" class="headerlink" title="四、HTML&lt;table&gt;标签功能"></a>四、HTML<code>&lt;table&gt;</code>标签功能</h2><p>绘制表格使用；如果是做后台管理的用户列表等类似 Excel 功能，这个标签是最佳的选择</p>
<ul>
<li><code>&lt;table&gt;</code> 标签定义 HTML 表格</li>
<li>一个 HTML 表格包括 <code>&lt;table&gt;</code> 元素，一个或多个 <code>&lt;tr&gt;</code>、<code>&lt;th&gt;</code> 以及 <code>&lt;td&gt;</code> 元素。</li>
<li><code>&lt;tr&gt;</code> 元素定义表格行</li>
<li><code>&lt;th&gt;</code> 元素定义表头</li>
<li><code>&lt;td&gt;</code> 元素定义表格单元</li>
</ul>
<p><strong>更复杂的 HTML 表格也可能包括</strong></p>
<ul>
<li><code>&lt;caption&gt;</code></li>
<li><code>&lt;col&gt;</code></li>
<li><code>&lt;colgroup&gt;</code></li>
<li><code>&lt;thead&gt;</code></li>
<li><code>&lt;tfoot&gt;</code></li>
<li><code>&lt;tbody&gt;</code></li>
</ul>
<h3 id="HTML-lt-table-gt-标签用法"><a href="#HTML-lt-table-gt-标签用法" class="headerlink" title="HTML &lt;table&gt; 标签用法"></a>HTML <code>&lt;table&gt; </code>标签用法</h3><p>一个简单的 HTML 表格，包含两列两行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>网站名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>网址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>所有主流浏览器都支持 <code>&lt;table&gt;</code> 标签。</p>
<hr>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>虽然现在 DIV+CSS 布局非常流行，是取代 table 布局的好选择；</p>
<p>但是遇到 table 相关的东西，还是使用<code>table</code>标签更佳，请根据实际场景进行选择</p>
<hr>
<h3 id="HTML4-与-HTML5-之间的差异"><a href="#HTML4-与-HTML5-之间的差异" class="headerlink" title="HTML4 与 HTML5 之间的差异"></a>HTML4 与 HTML5 之间的差异</h3><p>在 HTML5 中，仅支持 “border” 属性，并且只允许使用值 “1” 或 “”。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Function</title>
    <url>/2020/08/25/JavaScript-commonly-used-functions/</url>
    <content><![CDATA[<blockquote>
<h5 id="以下记录经常忘记又常用的JS内置函数"><a href="#以下记录经常忘记又常用的JS内置函数" class="headerlink" title="以下记录经常忘记又常用的JS内置函数"></a>以下记录经常忘记又常用的<code>JS</code>内置函数</h5><p>推荐查阅相关 <code>资料</code>  ：</p>
<p><a href="https://es6.ruanyifeng.com/">ECMAScript 6 入门</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰的JavaScript教程</a></p>
</blockquote>
<a id="more"></a>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h3><blockquote>
<p>参考自<a href="https://www.jianshu.com/p/eed671b66f9f">简书</a></p>
</blockquote>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>forEach()方法用于调用数组的每一个元素，并将元素传递给回调函数。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>.<span class="keyword">for</span><span class="constructor">Each(<span class="params">function</span>(<span class="params">currentValue</span>, <span class="params">index</span>, <span class="params">arr</span>)</span>, thisValue)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>currentValue：必填，当前元素。</p>
<p>index：可选，当前元素的索引。</p>
<p>arr：可选，当前元素所属的数组对象。</p>
<p>thisValue：可选，传递给函数的值一般用this值，如果这个参数为空，”undefined”会传递给”this”值。（这个参数一般很少填）</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* JS代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"></span><br><span class="line">colors.forEach(<span class="function">(<span class="params">item, $index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;item&#125;</span> =&gt; <span class="subst">$&#123;$index&#125;</span> =&gt; <span class="subst">$&#123;arr&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img data-src="pic1.png"></p>
<p>上面的代码用了ES6语法，几乎等同于下面的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* JS代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"></span><br><span class="line">colors.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span>(<span class="params">item, $index, arr</span>) </span>&#123;</span><br><span class="line">  console.log(item + <span class="string">&#x27; =&gt; &#x27;</span> + $index + <span class="string">&#x27; =&gt; &#x27;</span> + arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>其实，用 forEach() 主要是为了更方便的代替 for 对数组进行遍历。</p>
<p>用 for 遍历数组的方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* JS代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( colors[i] + <span class="string">&#x27; =&gt; &#x27;</span> + i + <span class="string">&#x27; =&gt; &#x27;</span> + colors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach() 对于空数组是不会执行回调函数的。</li>
<li>for可以用continue跳过循环中的一个迭代，forEach用continue会报错。</li>
<li>forEach() 需要用 return 跳过循环中的一个迭代，跳过之后会执行下一个迭代。</li>
</ul>
<h4 id="如何跳过一次迭代"><a href="#如何跳过一次迭代" class="headerlink" title="如何跳过一次迭代"></a>如何跳过一次迭代</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* JS代码 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>( colors[i] == <span class="string">&#x27;blue&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log( colors[i] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">colors.forEach( <span class="function"><span class="keyword">function</span>(<span class="params"> item </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(item == <span class="string">&#x27;blue&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log( item );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<blockquote>
<p>没有办法终止或跳出forEach循环，除非抛出一个异常。</p>
<p>如果需要终止或者跳出循环，建议用some()或者every()。</p>
</blockquote>
<h3 id="Array-shift"><a href="#Array-shift" class="headerlink" title="Array.shift()"></a>Array.shift()</h3><p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>Object.shift()</span><br></pre></td></tr></table></figure>

<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>数组原来的第一个元素的值。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。</li>
<li>请注意，该方法不创建新数组，而是直接修改原有的 arrayObject。</li>
<li>该方法会改变数组的长度。</li>
</ul>
<h3 id="Array-every-Array-some"><a href="#Array-every-Array-some" class="headerlink" title="Array.every()   Array.some()"></a>Array.every()   Array.some()</h3><blockquote>
<p>every()是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。</p>
<p>some()是对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</p>
<p>some一直在找符合条件的值，一旦找到，则不会继续迭代下去。<br>every从迭代开始，一旦有一个不符合条件，则不会继续迭代下去。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ];  </span><br><span class="line">console.log( arr.<span class="keyword">some</span>( <span class="keyword">function</span>( item, <span class="keyword">index</span>, <span class="keyword">array</span> )&#123;     </span><br><span class="line">    console.log( <span class="string">&#x27;item=&#x27;</span> + item + <span class="string">&#x27;,index=&#x27;</span>+<span class="keyword">index</span>+<span class="string">&#x27;,array=&#x27;</span>+<span class="keyword">array</span> );     </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;  </span><br><span class="line">&#125;));  </span><br><span class="line">console.log( arr.every( <span class="keyword">function</span>( item, <span class="keyword">index</span>, <span class="keyword">array</span> )&#123;     </span><br><span class="line">    console.log( <span class="string">&#x27;item=&#x27;</span> + item + <span class="string">&#x27;,index=&#x27;</span>+<span class="keyword">index</span>+<span class="string">&#x27;,array=&#x27;</span>+<span class="keyword">array</span> );     </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;  </span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="Array-slice"><a href="#Array-slice" class="headerlink" title="Array.slice()"></a>Array.slice()</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>slice() 方法可从已有的数组中返回选定的元素。</p>
<p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p>
<p>该方法并不会修改数组，而是返回一个子数组。</p>
<blockquote>
<p><strong>注释：</strong>您可使用负值从数组的尾部选取元素。</p>
<p><strong>注释：</strong>如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p>
</blockquote>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">arrayObject.<span class="keyword">slice</span>(<span class="keyword">start</span>,<span class="keyword">end</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">start</td>
<td align="left">必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</td>
</tr>
<tr>
<td align="left">end</td>
<td align="left">可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</td>
</tr>
</tbody></table>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="1-JS中判断某个字符串是否包含另一个字符串的五种方法"><a href="#1-JS中判断某个字符串是否包含另一个字符串的五种方法" class="headerlink" title="1. JS中判断某个字符串是否包含另一个字符串的五种方法"></a>1. JS中判断某个字符串是否包含另一个字符串的五种方法</h3><h4 id="String对象的方法"><a href="#String对象的方法" class="headerlink" title="String对象的方法"></a>String对象的方法</h4><p><strong>方法一: indexOf()  (推荐)</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indexOf(<span class="string">&quot;2&quot;</span>) != -<span class="number">1</span>);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</p>
<p><strong>方法二:match()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span> (str.match(reg))&#123;<span class="string">``</span> <span class="string">``</span><span class="comment">//包含；``&#125;</span></span><br></pre></td></tr></table></figure>

<p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>
<p><strong>方法三: search()</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">search</span>( <span class="string">&quot;2&quot;</span> ) != -<span class="number">1</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</p>
<h4 id="RegExp对象的方法"><a href="#RegExp对象的方法" class="headerlink" title="RegExp对象的方法"></a>RegExp对象的方法</h4><p><strong>方法四: test()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str = <span class="string">&quot;123&quot;</span> </span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str) != <span class="number">-1</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>test() 方法用于检索字符串中指定的值。返回 true 或 false。</p>
<p><strong>方法五:exec()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span>(reg.exec(str))&#123;<span class="string">``</span> <span class="string">``</span><span class="comment">//包含；``&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>exec() 方法</strong>用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES3-ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾Vue响应式原理</title>
    <url>/2020/08/25/Retrieve-the-Vue-response-principle/</url>
    <content><![CDATA[<h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>今天接手了一个Bug，大概描述一下：</p>
<blockquote>
<p>存在一个列表和一个分页器，用的是Element-UI。</p>
<p>使用中，每次修改每页显示数据总数、换页等操作都会使用ajax异步请求新的数据。</p>
<p>问题：每次操作后，列表的渲染数据均是上一次操作的正确预期效果</p>
</blockquote>
<a id="more"></a>

<p>主要代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-int-pager</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">size-change</span>=<span class="string">&quot;onPagerSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">current-change</span>=<span class="string">&quot;onPagerCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:current-page</span>=<span class="string">&quot;pager.currentPage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-sizes</span>=<span class="string">&quot;pager.chose&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-size</span>=<span class="string">&quot;pager.size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:total</span>=<span class="string">&quot;pager.total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- /分页器 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 列表渲染数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:border</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:stripe</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">onPagerSizeChange(size) &#123;</span><br><span class="line">   <span class="keyword">this</span>.pager.size = size;</span><br><span class="line">   <span class="keyword">this</span>.pager.currentPage = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">this</span>._getGoodsList();</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 切换页面</span></span><br><span class="line">onPagerCurrentChange(currentPage) &#123;</span><br><span class="line">   <span class="keyword">this</span>.pager.currentPage = currentPage;</span><br><span class="line">   <span class="keyword">this</span>._getGoodsList();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>其中，<code>this._getGoodsList()</code>为获取相应数据的异步请求，经验证后台数据均获取正确</p>
<p>所以，结论只有一个，就是异步获取数据之后，Vue 未更新 <code>Virtual DOM</code> </p>
<p>最后，发现需要渲染的数据没有加入到 <code>vm.data()</code>中，修改后问题解决。</p>
<blockquote>
<h5 id="也因此，在这里在此回顾Vue响应式原理"><a href="#也因此，在这里在此回顾Vue响应式原理" class="headerlink" title="也因此，在这里在此回顾Vue响应式原理"></a>也因此，在这里在此回顾<code>Vue</code>响应式原理</h5></blockquote>
<h2 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h2><blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/reactivity.html">官方文档</a></p>
</blockquote>
<p>Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，<strong>视图会进行更新</strong>。</p>
<h3 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h3><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a> 把这些 property 全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters">getter/setter</a>。<code>Object.defineProperty</code> 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a> 来获取对检查数据更加友好的用户界面。</p>
<p>每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
<p><img data-src="rendering-way.png"></p>
<h3 id="检测变化的注意事项"><a href="#检测变化的注意事项" class="headerlink" title="检测变化的注意事项"></a>检测变化的注意事项</h3><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p>
<h4 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h4><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。例如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  dat<span class="variable">a:</span>&#123;</span><br><span class="line">    <span class="variable">a:1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// `<span class="keyword">vm</span>.<span class="keyword">a</span>` 是响应式的</span><br><span class="line"></span><br><span class="line"><span class="keyword">vm</span>.<span class="keyword">b</span> = <span class="number">2</span></span><br><span class="line">// `<span class="keyword">vm</span>.<span class="keyword">b</span>` 是非响应式的</span><br></pre></td></tr></table></figure>

<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Vue.<span class="builtin-name">set</span>(vm.someObject, <span class="string">&#x27;b&#x27;</span>, 2)</span><br></pre></td></tr></table></figure>

<p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.someObject,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>有时你可能需要为已有对象赋值多个新 property，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">代替</span> <span class="string">`Object.assign(this.someObject,</span> &#123; <span class="attr">a:</span> <span class="number">1</span>, <span class="attr">b:</span> <span class="number">2</span> &#125;<span class="string">)`</span></span><br><span class="line"><span class="string">this.someObject</span> <span class="string">=</span> <span class="string">Object.assign(&#123;&#125;,</span> <span class="string">this.someObject,</span> &#123; <span class="attr">a:</span> <span class="number">1</span>, <span class="attr">b:</span> <span class="number">2</span> &#125;<span class="string">)</span></span><br></pre></td></tr></table></figure>

<h4 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h4><p>Vue 不能检测以下数组的变动：</p>
<ol>
<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>
</ol>
<p>举个例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    item<span class="variable">s:</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">vm</span>.<span class="built_in">items</span>[<span class="number">1</span>] = <span class="string">&#x27;x&#x27;</span> // 不是响应性的</span><br><span class="line"><span class="keyword">vm</span>.<span class="built_in">items</span>.length = <span class="number">2</span> // 不是响应性的</span><br></pre></td></tr></table></figure>

<p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将在响应式系统内触发状态更新：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.<span class="keyword">set</span>(vm.items, indexOfItem, <span class="keyword">new</span><span class="type">Value</span>)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, <span class="keyword">new</span><span class="type">Value</span>)</span><br></pre></td></tr></table></figure>

<p>你也可以使用 <a href="https://cn.vuejs.org/v2/api/#vm-set"><code>vm.$set</code></a> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">vm.<span class="constructor">$set(<span class="params">vm</span>.<span class="params">items</span>, <span class="params">indexOfItem</span>, <span class="params">newValue</span>)</span></span><br></pre></td></tr></table></figure>

<p>为了解决第二类问题，你可以使用 <code>splice</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vm</span><span class="selector-class">.items</span><span class="selector-class">.splice</span>(<span class="selector-tag">newLength</span>)</span><br></pre></td></tr></table></figure>

<h3 id="声明响应式-property"><a href="#声明响应式-property" class="headerlink" title="声明响应式 property"></a>声明响应式 property</h3><p>由于 Vue 不允许动态添加根级响应式 property，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> vm = <span class="literal">new</span> Vue(&#123;</span><br><span class="line">  <span class="built_in">data</span>: &#123;</span><br><span class="line">    <span class="comment">// 声明 message 为一个空值字符串</span></span><br><span class="line">    message: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 之后设置 `message`</span></span><br><span class="line">vm.message = <span class="string">&#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果你未在 <code>data</code> 选项中声明 <code>message</code>，Vue 将警告你渲染函数正在试图访问不存在的 property。</p>
<p>这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例能更好地配合类型检查系统工作。但与此同时在代码可维护性方面也有一点重要的考虑：<code>data</code>对象就像组件状态的结构 (schema)。提前声明所有的响应式 property，可以让组件代码在未来修改或给其他开发人员阅读时更易于理解。</p>
<h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>可能你还没有注意到，Vue 在更新 DOM 时是<strong>异步</strong>执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p>
<p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用。例如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    message: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">vm</span>.message = <span class="string">&#x27;new message&#x27;</span> // 更改数据</span><br><span class="line"><span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">&#x27;new message&#x27;</span> // false</span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">&#x27;new message&#x27;</span> // true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在组件内使用 <code>vm.$nextTick()</code> 实例方法特别方便，因为它不需要全局 <code>Vue</code>，并且回调函数中的 <code>this</code> 将自动绑定到当前的 Vue 实例上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;example&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;未更新&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message = <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el.textContent) <span class="comment">// =&gt; &#x27;未更新&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el.textContent) <span class="comment">// =&gt; &#x27;已更新&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>因为 <code>$nextTick()</code> 返回一个 <code>Promise</code> 对象，所以你可以使用新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">ES2017 async/await</a> 语法完成相同的事情：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">methods</span>: &#123;</span><br><span class="line">  <span class="attribute">updateMessage</span>: async function () &#123;</span><br><span class="line">    this.message = <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">    console.<span class="built_in">log</span>(this.$el.textContent) // =&gt; <span class="string">&#x27;未更新&#x27;</span></span><br><span class="line">    await this.$<span class="built_in">nextTick</span>()</span><br><span class="line">    console.<span class="built_in">log</span>(this.$el.textContent) // =&gt; <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problems-To-Collect"><a href="#Problems-To-Collect" class="headerlink" title="Problems To Collect"></a>Problems To Collect</h2><h3 id="1-Vue异步获取数据后初始化数据不能及时更新"><a href="#1-Vue异步获取数据后初始化数据不能及时更新" class="headerlink" title="1. Vue异步获取数据后初始化数据不能及时更新"></a>1. Vue异步获取数据后初始化数据不能及时更新</h3><ul>
<li>钩子函数尽量使用mounted来完成初始化函数，根据vue的生命周期尽量不要用mounted之前的</li>
<li>对于可能要改变的值，最好直接写到data{}中，比如这样写：</li>
<li>如果还不能实时更新，通过vue的官方$set方法可以实现手动设置</li>
<li>一些特殊set方法，比如其他js框架的set方法，会和vue的方法冲突造成数据不能同步</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>框架与工具</tag>
        <tag>Vue</tag>
        <tag>Vue Problems</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基本问题</title>
    <url>/2020/08/28/HTML-Bacics/</url>
    <content><![CDATA[<h2 id="一、HTML新特性"><a href="#一、HTML新特性" class="headerlink" title="一、HTML新特性"></a>一、HTML新特性</h2><a id="more"></a>

<blockquote>
<p>参考自<a href="https://www.cnblogs.com/gaosirs/p/10756524.html">该文章</a></p>
</blockquote>
<h3 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1. 语义化标签"></a>1. 语义化标签</h3><p>语义化标签 为页面提供了更好的<strong>页面结构</strong>。</p>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">属性</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;header&gt;&lt;/header&gt;</code></td>
<td align="center">定义文档的头部区域</td>
</tr>
<tr>
<td align="center"><code>&lt;footer&gt;&lt;/footer&gt;</code></td>
<td align="center">定义文档的尾部区域</td>
</tr>
<tr>
<td align="center"><code>&lt;nav&gt;&lt;/nav&gt;</code></td>
<td align="center">定义文档的导航区域</td>
</tr>
<tr>
<td align="center"><code>&lt;section&gt;&lt;/section&gt;</code></td>
<td align="center">定义文档的段落</td>
</tr>
<tr>
<td align="center"><code>&lt;article&gt;&lt;/article&gt;</code></td>
<td align="center">定义页面独立的内容区域</td>
</tr>
<tr>
<td align="center"><code>&lt;aside&gt;&lt;/aside&gt;</code></td>
<td align="center">定义页面侧边栏内容</td>
</tr>
<tr>
<td align="center"><code>&lt;command&gt;&lt;/command&gt;</code></td>
<td align="center">定义命令按钮</td>
</tr>
<tr>
<td align="center"><code>&lt;details&gt;&lt;/details&gt;</code></td>
<td align="center">标签包含 details 元素的标题</td>
</tr>
<tr>
<td align="center"><code>&lt;dialog&gt;&lt;/dialog&gt;</code></td>
<td align="center">定义对话框</td>
</tr>
</tbody></table>
<h3 id="2-增强型表单"><a href="#2-增强型表单" class="headerlink" title="2. 增强型表单"></a>2. 增强型表单</h3><p>HTML5 提供了多个新的<strong>表单输入类型</strong>。</p>
<table>
<thead>
<tr>
<th>输入类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>主要用于选取颜色</td>
</tr>
<tr>
<td>date</td>
<td>从一个日期选择器选择一个日期</td>
</tr>
<tr>
<td>datetime</td>
<td>选择一个日期（UTC 时间）</td>
</tr>
<tr>
<td>datetime-local</td>
<td>选择一个日期和时间 (无时区)</td>
</tr>
<tr>
<td>email</td>
<td>包含 e-mail 地址的输入域</td>
</tr>
<tr>
<td>month</td>
<td>选择一个月份</td>
</tr>
<tr>
<td>number</td>
<td>数值的输入域</td>
</tr>
<tr>
<td>range</td>
<td>一定范围内数字值的输入域</td>
</tr>
<tr>
<td>search</td>
<td>用于搜索域</td>
</tr>
<tr>
<td>tel</td>
<td>定义输入电话号码字段</td>
</tr>
<tr>
<td>time</td>
<td>选择一个时间</td>
</tr>
<tr>
<td>url</td>
<td>URL 地址的输入域</td>
</tr>
<tr>
<td>week</td>
<td>选择周和年</td>
</tr>
</tbody></table>
<p> 同时，还增加了<strong>新的表单属性</strong>：</p>
<ol>
<li><p>placehoder 属性，简短的提示在用户输入值前会显示在输入域上。即我们常见的输入框默认提示，在用户输入后消失。</p>
</li>
<li><p>required  属性，是一个 boolean 属性。要求填写的输入域不能为空</p>
</li>
<li><p>pattern 属性，描述了一个正则表达式用于验证<code>&lt;input&gt;</code> 元素的值。</p>
</li>
<li><p>min 和 max 属性，设置元素最小值与最大值。</p>
</li>
<li><p>step 属性，为输入域规定合法的数字间隔。</p>
</li>
<li><p>height 和 width 属性，用于 image 类型的 <code>&lt;input&gt;</code> 标签的图像高度和宽度。</p>
</li>
<li><p>autofocus 属性，是一个 boolean 属性。规定在页面加载时，域自动地获得焦点。</p>
</li>
<li><p>multiple 属性 ，是一个 boolean 属性。规定<code>&lt;input&gt;</code> 元素中可选择多个值。　　</p>
</li>
</ol>
<h3 id="3-音频和视频"><a href="#3-音频和视频" class="headerlink" title="3. 音频和视频"></a>3. 音频和视频</h3><p>HTML5 提供了 <strong>音频和视频</strong> 。</p>
<p>音频：<code>&lt;audio&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视频：<code>&lt;video&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;xxx.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持Video标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-canvas-绘图"><a href="#4-canvas-绘图" class="headerlink" title="4. canvas 绘图"></a>4. canvas 绘图</h3><blockquote>
<p>供欣赏的<code>canvas</code><a href="https://www.html5tricks.com/tag/html5-canvas/">作品</a></p>
<p>jQuery/HTML5/CSS3<a href="http://www.htmleaf.com/html5/html5-canvas/">资料库</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.jianshu.com/p/7593eb9e53c2">Canvas教程</a></p>
<p><a href="https://www.w3school.com.cn/html5/html_5_canvas.asp">W3School教程</a></p>
<p><a href="https://www.cnblogs.com/gengzhen/p/11915071.html">Canvas绘图基础</a></p>
</blockquote>
<h3 id="5-SVG-绘图"><a href="#5-SVG-绘图" class="headerlink" title="5. SVG 绘图"></a>5. SVG 绘图</h3><blockquote>
<p>嵌入和使用SVG:</p>
<p><a href="https://segmentfault.com/a/1190000010942431">HTML中嵌入SVG图片的N种方式</a></p>
<p><a href="https://www.w3school.com.cn/svg/svg_inhtml.asp">HTML 页面中的 SVG</a></p>
<p><a href="https://www.jianshu.com/p/132b58273e27">HTML5之SVG的使用</a></p>
</blockquote>
<h4 id="SVG-与-Canvas两者间的区别"><a href="#SVG-与-Canvas两者间的区别" class="headerlink" title="SVG 与 Canvas两者间的区别"></a>SVG 与 Canvas两者间的区别</h4><p>SVG 是一种使用 XML 描述 2D 图形的语言。</p>
<p>Canvas 通过 JavaScript 来绘制 2D 图形。</p>
<p>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。</p>
<p>在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>
<p>Canvas 是逐像素进行渲染的。在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p>
<h3 id="6-地理定位（Geolocation）"><a href="#6-地理定位（Geolocation）" class="headerlink" title="6. 地理定位（Geolocation）"></a>6. 地理定位（Geolocation）</h3><p>HTML5 Geolocation（地理定位）用于定位用户的位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">window</span><span class="selector-class">.navigator</span><span class="selector-class">.geolocation</span> &#123;</span><br><span class="line">    <span class="attribute">getCurrentPosition</span>:  fn  用于获取当前的位置数据</span><br><span class="line">    watchPosition: fn  监视用户位置的改变</span><br><span class="line">    clearWatch: fn  清除定位监视</span><br><span class="line">&#125;　　　</span><br></pre></td></tr></table></figure>

<p>获取用户定位信息：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.geolocation.getCurrentPosition(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;用户定位数据获取成功&#x27;</span>)</span><br><span class="line">　　　　<span class="comment">//console.log(arguments);</span></span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;定位时间：&#x27;</span>,pos.timestamp)</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;经度：&#x27;</span>,pos.coords.longitude)</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;纬度：&#x27;</span>,pos.coords.latitude)</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;海拔：&#x27;</span>,pos.coords.altitude)</span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;速度：&#x27;</span>,pos.coords.speed)</span><br><span class="line"></span><br><span class="line">&#125;,    <span class="comment">//定位成功的回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123; </span><br><span class="line">　　　　<span class="built_in">console</span>.log(<span class="string">&#x27;用户定位数据获取失败&#x27;</span>)</span><br><span class="line">　　　　<span class="comment">//console.log(arguments);</span></span><br><span class="line"></span><br><span class="line">&#125;        <span class="comment">//定位失败的回调</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="7-拖放API"><a href="#7-拖放API" class="headerlink" title="7. 拖放API"></a>7. 拖放API</h3><p>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p>
<blockquote>
<p>转载来自<a href="https://www.cnblogs.com/ijjyo/p/4300717.html">很不错的拖放API解释…</a></p>
</blockquote>
<h4 id="7-1-HTML拖放实例"><a href="#7-1-HTML拖放实例" class="headerlink" title="7.1 HTML拖放实例"></a>7.1 HTML拖放实例</h4><p>​    下面的例子是一个简单的拖放实例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">allowDrop</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line">                ev.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                ev.dataTransfer.setData(<span class="string">&quot;Text&quot;</span>, ev.target.id);</span></span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line">                ev.preventDefault();</span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">&quot;Text&quot;</span>);</span></span><br><span class="line"><span class="javascript">                ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">ondrop</span>=<span class="string">&quot;drop(event)&quot;</span> <span class="attr">ondragover</span>=<span class="string">&quot;allowDrop(event)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px;height: 500px;background-color: #FBB929;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;drag1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.baidu.com/img/baidu_jgylogo3.gif&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;drag(event)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;336&quot;</span> <span class="attr">height</span>=<span class="string">&quot;69&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-1-1-设置元素为可拖放"><a href="#7-1-1-设置元素为可拖放" class="headerlink" title="7.1.1 设置元素为可拖放"></a>7.1.1 设置元素为可拖放</h5><p>首先，为了使元素可拖动，把 draggable 属性设置为 true ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="7-1-2-拖动什么-ondragstart-和-setData"><a href="#7-1-2-拖动什么-ondragstart-和-setData" class="headerlink" title="7.1.2 拖动什么 - ondragstart 和 setData()"></a>7.1.2 拖动什么 - ondragstart 和 setData()</h5><p>然后，规定当元素被拖动时，会发生什么。</p>
<p>在上面的例子中，ondragstart 属性调用了一个函数，drag(<em>event</em>)，它规定了被拖动的数据。</p>
<p>dataTransfer.setData() 方法设置被拖数据的数据类型和值：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> drag(ev)&#123;</span><br><span class="line">    ev.dataTransfer.set<span class="constructor">Data(<span class="string">&quot;Text&quot;</span>,<span class="params">ev</span>.<span class="params">target</span>.<span class="params">id</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，数据类型是 “Text”，值是可拖动元素的 id (“drag1”)。</p>
<h5 id="7-1-3-放到何处-ondragover"><a href="#7-1-3-放到何处-ondragover" class="headerlink" title="7.1.3 放到何处 - ondragover"></a>7.1.3 放到何处 - ondragover</h5><p>ondragover 事件规定在何处放置被拖动的数据。</p>
<p>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。</p>
<p>这要通过调用 ondragover 事件的 <em>event</em>.preventDefault() 方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">event</span>.preventDefault()</span><br></pre></td></tr></table></figure>

<h5 id="7-1-4-进行放置-ondrop"><a href="#7-1-4-进行放置-ondrop" class="headerlink" title="7.1.4 进行放置 - ondrop"></a>7.1.4 进行放置 - ondrop</h5><p>当放置被拖数据时，会发生 drop 事件。</p>
<p>在上面的例子中，ondrop 属性调用了一个函数，drop(<em>event</em>)：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> drop(ev)</span><br><span class="line">&#123;</span><br><span class="line">ev.prevent<span class="constructor">Default()</span>;</span><br><span class="line">var data=ev.dataTransfer.get<span class="constructor">Data(<span class="string">&quot;Text&quot;</span>)</span>;</span><br><span class="line">ev.target.append<span class="constructor">Child(<span class="params">document</span>.<span class="params">getElementById</span>(<span class="params">data</span>)</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开）</li>
<li>通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。</li>
<li>被拖数据是被拖元素的 id (“drag1”)</li>
<li>把被拖元素追加到放置元素（目标元素）中</li>
</ul>
<h4 id="7-2-拖放-Drag-和-Drop-各属性生命周期"><a href="#7-2-拖放-Drag-和-Drop-各属性生命周期" class="headerlink" title="7.2 拖放(Drag 和 Drop)各属性生命周期"></a>7.2 拖放(Drag 和 Drop)各属性生命周期</h4><table>
<thead>
<tr>
<th>拖动生命周期</th>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>拖动开始</td>
<td>ondragstart</td>
<td>script</td>
<td>在拖动操作开始时执行脚本（对象是被拖拽元素）</td>
</tr>
<tr>
<td>拖动过程中</td>
<td>ondrag</td>
<td>script</td>
<td>只要脚本在被拖动就允许脚本（对象是被拖拽元素）</td>
</tr>
<tr>
<td>拖动过程中</td>
<td>ondragenter</td>
<td>script</td>
<td>当元素被拖动到一个合法的放置目标时，执行脚本（对象是目标元素）</td>
</tr>
<tr>
<td>拖动过程中</td>
<td>ondragover</td>
<td>script</td>
<td>只要元素正在合法的放置目标上拖动时，就执行脚本（对象是目标元素）</td>
</tr>
<tr>
<td>拖动过程中</td>
<td>ondragleave</td>
<td>script</td>
<td>当元素离开合法的放置目标时（对象是目标元素）</td>
</tr>
<tr>
<td>拖动结束</td>
<td>ondrop</td>
<td>script</td>
<td>将被拖拽元素放在目标元素内时运行脚本（对象是目标元素）</td>
</tr>
<tr>
<td>拖动结束</td>
<td>ondragend</td>
<td>script</td>
<td>在拖动操作结束时运行脚本（对象是被拖拽元素）</td>
</tr>
</tbody></table>
<p><strong>写在哪呢？</strong></p>
<p>其实参照上表“描述”中括号内的提示即可知道，不过为了能更直观的了解到，特呈上代码：</p>
<p><strong>被拖放元素</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="attribute">draggable</span>=<span class="string">&quot;true&quot;</span> <span class="attribute">id</span>=<span class="string">&quot;Span1&quot;</span> </span><br><span class="line">    <span class="attribute">ondragstart</span>=<span class="string">&quot;fooDragStart(this, event)&quot;</span> </span><br><span class="line">    <span class="attribute">ondrag</span>=<span class="string">&quot;fooDrag(this, event)&quot;</span> </span><br><span class="line">    <span class="attribute">ondragend</span>=<span class="string">&quot;fooDragEnd(this, event)&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>目标元素</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span>  <span class="built_in">id</span>=<span class="string">&quot;div1&quot;</span> ondrop=<span class="string">&quot;fooDrop(this, event)&quot;</span></span><br><span class="line">                ondragenter=<span class="string">&quot;fooDragEnter(this, event)&quot;</span> </span><br><span class="line">                ondragleave=<span class="string">&quot;fooDragLeave(this, event)&quot;</span></span><br><span class="line">                ondragover=<span class="string">&quot;fooDragOver(this,event)&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="7-3-执行顺序"><a href="#7-3-执行顺序" class="headerlink" title="7.3 执行顺序"></a>7.3 执行顺序</h4><p>下面，我将展示将一张图片放入div中的整个script执行过程：</p>
<p><strong>执行元素介绍</strong></p>
<p><img data-src="pic1.jpg"></p>
<p><strong>执行结果</strong></p>
<ul>
<li>成功将图片拖入div中</li>
</ul>
<p><img data-src="pic2.jpg"></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">on</span>DragStart，当元素被拖动到一个合法的放置目标时，执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragEnter，在拖动操作开始时执行脚本</span><br><span class="line"><span class="keyword">on</span>DragOver，只要元素正在合法的放置目标上拖动时，就执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragOver，只要元素正在合法的放置目标上拖动时，就执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drop，在拖动操作结束时运行脚本-------------------------------------</span><br><span class="line"><span class="keyword">on</span>DragEnd，在拖动操作结束时运行脚本</span><br></pre></td></tr></table></figure>

<ul>
<li>已拖放，可最终未放入div中</li>
</ul>
<p><img data-src="pic3.jpg"></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">on</span>DragStart，当元素被拖动到一个合法的放置目标时，执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragEnter，在拖动操作开始时执行脚本</span><br><span class="line"><span class="keyword">on</span>DragOver，只要元素正在合法的放置目标上拖动时，就执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragOver，只要元素正在合法的放置目标上拖动时，就执行脚本（对象是目标元素）</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragLeave，当元素离开合法的放置目标时（对象是目标元素）---------------------</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>Drag，只要脚本在被拖动就允许脚本</span><br><span class="line"><span class="keyword">on</span>DragEnd，在拖动操作结束时运行脚本</span><br></pre></td></tr></table></figure>

<p>由上两个执行顺序的Log能看出：</p>
<blockquote>
<ol>
<li>只有将“被拖拽元素”放入“目标元素”才会执行“onDrop”属性的方法；</li>
<li>“onDrag”的事件只要鼠标按住并且拖动就会持续不断的执行；</li>
<li>“onDragOver”的事件是只要鼠标按住、拖动“被拖拽元素”在“目标元素”上滑过就会持续不断的执行；</li>
<li>“onDragEnd”的事件无论如何，只要按住的鼠标放开了，就会执行</li>
</ol>
</blockquote>
<h4 id="7-4-深入"><a href="#7-4-深入" class="headerlink" title="7.4 深入"></a>7.4 深入</h4><p>一些深入的比如“<code>文件的拖放</code>”、“<code>从浏览器拖放到桌面</code>”以及“<code>从桌面拖放到浏览器</code>”等</p>
<h4 id="7-5-扩展"><a href="#7-5-扩展" class="headerlink" title="7.5 扩展"></a>7.5 扩展</h4><h5 id="7-5-1-MIME类型"><a href="#7-5-1-MIME类型" class="headerlink" title="7.5.1 MIME类型"></a>7.5.1 MIME类型</h5><blockquote>
<p>  ·text/plain：文本文字</p>
<p>  ·text/html：HTML文字</p>
<p>  ·text/xml：XML文字</p>
<p>  ·text/uri-list：URL列表，每个URL为一行</p>
</blockquote>
<h5 id="7-5-2-JS的dataTransfer对象"><a href="#7-5-2-JS的dataTransfer对象" class="headerlink" title="7.5.2 JS的dataTransfer对象"></a>7.5.2 JS的dataTransfer对象</h5><p>​    提供对于预定义的剪贴板格式的访问,以便在拖拽中使用。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td>dropEffect</td>
<td>设置或返回拖放目标上允许发生的拖放行为和要显示的光标类型</td>
<td>copy 复制样式被显示link 链接样式被显示move 移动样式被显示none 默认,没有鼠标样式被定义</td>
</tr>
<tr>
<td>effectAllowed</td>
<td>设置或返回被拖动元素允许发生的拖动行为与该对象的源元素。</td>
<td>copy 选项被复制link 选项被dataTransfer作为link方式保存move 当放置时,对象被移动至目标对象copylink 选项是被复制还是被作为link方式保存关键在于目标对象linkmove 选项是被作为link方式保存还是被移动关键在于目标对象all 所有效果都被支持none 不支持任何效果uninitialized 默认不能通过这个属性传递任何值</td>
</tr>
<tr>
<td>types</td>
<td>存入数据的种类，字符串的伪数组</td>
<td></td>
</tr>
<tr>
<td>clearData()</td>
<td>清除DataTransfer对象中存放的数据，如果省略参数format，则清楚全部数据</td>
<td></td>
</tr>
<tr>
<td>setData(format,data)</td>
<td>将指定格式的数据赋值给dataTransfer对象</td>
<td>参数format定义数据的格式也就是数据的类型，data为待赋值的数据</td>
</tr>
<tr>
<td>getData(format,data)</td>
<td>从dataTransfer对象中获取指定格式的数据</td>
<td>format代表数据格式，data为数据。</td>
</tr>
<tr>
<td>setDragImage(Element image，long x,long y)</td>
<td>用img元素来设置拖放图标(部分浏览器中可以用canvas等其他元素来设置)</td>
<td>element设置自定义图标，x设置图标与鼠标在水平方向上的距离，y设置图标与鼠标在垂直方向上的距离。</td>
</tr>
</tbody></table>
<p>​    effectAllowed定义了在源对象上的操作,可定义在ondragstart事件中。 </p>
<p>​    dropEffect定义了在目标对象上的操作,可定义在ondrop,ondragenter,ondragover事件中。 </p>
<p>​    effectAllowed可以定义all操作,但是dropEffect可以定义copy操作。</p>
<h3 id="8-Web-Storage"><a href="#8-Web-Storage" class="headerlink" title="8 Web Storage"></a>8 Web Storage</h3><p>使用HTML5可以在本地存储用户的浏览数据。</p>
<p>客户端存储数据的两个对象为：</p>
<p><strong>localStorage ：</strong>没有时间限制的数据存储</p>
<p><strong>sessionStorage ：</strong> 针对一个 session 的数据存储, 当用户关闭浏览器窗口后，数据会被删除。</p>
<p>不管是 <strong>localStorage</strong>，还是 <strong>sessionStorage</strong>，可使用的API都相同，常用的有如下几个（以localStorage为例）：</p>
<p>　　1、保存数据：localStorage.setItem(key,value);</p>
<p>　　2、读取数据：localStorage.getItem(key);</p>
<p>　　3、删除单个数据：localStorage.removeItem(key);</p>
<p>　　4、删除所有数据：localStorage.clear();</p>
<p>　　5、得到某个索引的key：localStorage.key(index);</p>
<h3 id="9-WebSocket"><a href="#9-WebSocket" class="headerlink" title="9. WebSocket"></a>9. WebSocket</h3><blockquote>
<p>可参考 <a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">阮一峰日志</a> 深入学习</p>
<p>其中用到的<a href="https://jsbin.com/muqamiqimu/edit?js,console">演示平台</a> <code>jsbin.com</code></p>
<p>以及其使用<a href="https://www.cnblogs.com/rammstein/p/4042842.html">教程</a></p>
</blockquote>
<p><strong>WebSocket</strong> 是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>
<blockquote>
<p><a href="https://baike.baidu.com/item/RS-422">RS-422</a>标准就是<a href="https://baike.baidu.com/item/%E5%85%A8%E5%8F%8C%E5%B7%A5/310007">全双工</a>通信标准。全双工（Full Duplex）是 在微处理器与外围设备之间采用发送线和接受线各自独立的方法，可以使数据在两个方向上同时进行传送操作。指在发送数据的同时也能够接收数据，两者同步进行，这好像我们平时打电话一样，说话的同时也能够听到对方的声音。网卡一般都支持全双工。</p>
<p><a href="https://baike.baidu.com/item/%E5%85%A8%E5%8F%8C%E5%B7%A5%E4%BB%A5%E5%A4%AA%E7%BD%91">全双工以太网</a>使用两条电缆线，而不是像<a href="https://baike.baidu.com/item/%E5%8D%8A%E5%8F%8C%E5%B7%A5/309852">半双工</a>方式那样使用一对电缆线。全双工方式在发送设备的发送方和接收设备的接收方之间采取点到点的连接，这意味着在全双工的传送方式下，可以得到更高的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6">数据传输速度</a>。</p>
</blockquote>
<p>在WebSocket22通过 <strong>send()</strong> 方法来向服务器发送数据，并通过 <strong>onmessage</strong> 事件来接收服务器返回的数据。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>W3Cschool教程(w3cschool.cn)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">         <span class="function"><span class="keyword">function</span> <span class="title">WebSocketTest</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="string">&quot;WebSocket&quot;</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">               alert(<span class="string">&quot;您的浏览器支持 WebSocket!&quot;</span>);</span></span><br><span class="line">               </span><br><span class="line"><span class="javascript">               <span class="comment">// 打开一个 web socket</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:9998/echo&quot;</span>);</span></span><br><span class="line">                </span><br><span class="line"><span class="javascript">               ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// Web Socket 已连接上，使用 send() 方法发送数据</span></span></span><br><span class="line"><span class="javascript">                  ws.send(<span class="string">&quot;发送数据&quot;</span>);</span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;数据发送中...&quot;</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line">                </span><br><span class="line"><span class="javascript">               ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> received_msg = evt.data;</span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;数据已接收...&quot;</span>);</span></span><br><span class="line">               &#125;;</span><br><span class="line">                </span><br><span class="line"><span class="javascript">               ws.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 关闭 websocket</span></span></span><br><span class="line"><span class="javascript">                  alert(<span class="string">&quot;连接已关闭...&quot;</span>); </span></span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// 浏览器不支持 WebSocket</span></span></span><br><span class="line"><span class="javascript">               alert(<span class="string">&quot;您的浏览器不支持 WebSocket!&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;sse&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:WebSocketTest()&quot;</span>&gt;</span>运行 WebSocket<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、浏览器标准模式和怪异模式"><a href="#二、浏览器标准模式和怪异模式" class="headerlink" title="二、浏览器标准模式和怪异模式"></a>二、浏览器标准模式和怪异模式</h2><blockquote>
<p>转自<a href="https://www.jianshu.com/p/dcab7cde8c04">简书</a></p>
</blockquote>
<h3 id="标准模式和怪异模式的来由"><a href="#标准模式和怪异模式的来由" class="headerlink" title="标准模式和怪异模式的来由"></a>标准模式和怪异模式的来由</h3><p>在HTML与CSS的标准化未完成之前，各个浏览器对于HTML和CSS的解析有各自不同的实现，而有很多旧的网页都是按照这些非标准的实现去设计的。在HTML与CSS标准确定之后，浏览器一方面要按照标准去实现对HTML与CSS的支持，另一方面又要保证对非标准的旧网页设计的后向兼容性。因此，现代的浏览器一般都有两种渲染模式：<strong>标准模式</strong>和<strong>怪异模式</strong>。在<strong>标准模式</strong>下，浏览器按照HTML与CSS标准对文档进行解析和渲染；而在<strong>怪异模式</strong>下，浏览器则按照旧有的非标准的实现方式对文档进行解析和渲染。这样的话，对于旧有的网页，浏览器启动怪异模式，就能够使得旧网页正常显示；对于新的网页，则可以启动标准模式，使得新网页能够使用HTML与CSS的标准特性。</p>
<h3 id="浏览器如何确定使用哪种渲染模式"><a href="#浏览器如何确定使用哪种渲染模式" class="headerlink" title="浏览器如何确定使用哪种渲染模式"></a>浏览器如何确定使用哪种渲染模式</h3><p>知道了这两种渲染模式的来由，那剩下的问题就是浏览器如何能够确定应该使用哪种模式了。其实归根结底就是，浏览器如何能将旧网页与新网页区分开来。<br> 平常编写网页的时候，一般都会见到HTML文档的头部会有文档类型声明：<code>DOCTYPE</code>。当浏览器遇到正确的文档声明时，浏览器就会启动标准模式，按照制定的文档类型标准解析和渲染文档。而对于旧有的网页，由于网页编写的当时标准还没有确定，所以一般是不会有文档类型声明的。所以，对于没有文档类型声明或者文档类型声明不正确的文档，浏览器就会认为它是一个旧的HTML文档，就会使用怪异模式解析和渲染该文档。关于<code>DOCTYPE</code>的更详细说明，请戳这里 <a href="https://www.jb51.net/web/34217.html">DOCTYPE声明作用及用法详解</a>。</p>
<h3 id="标准模式与怪异模式的两个常见区别"><a href="#标准模式与怪异模式的两个常见区别" class="headerlink" title="标准模式与怪异模式的两个常见区别"></a>标准模式与怪异模式的两个常见区别</h3><ul>
<li><strong>盒模型的处理差异：</strong>标准CSS盒模型的宽度和高度等于内容区的高度和宽度，不包含内边距和边框，而IE6之前的浏览器实现的盒模型的宽高计算方式是包含内边距和边框的。因此，对于IE，怪异模式和标准模式下的盒模型宽高计算方式是不一样的；</li>
<li><strong>行内元素的垂直对齐：</strong>很多早期的浏览器对齐图片至包含它们的盒子的下边框，虽然CSS的规范要求它们被对齐至盒内文本的基线。标准模式下，基于Gecko的浏览器将会对齐至基线，而在quirks模式下它们会对齐至底部。最直接的例子就是图片的显示。在标准模式下，图片并不是与父元素的下边框对齐的，如果仔细观察，你会发现图片与父元素下边框之间存在一点小空隙。那是因为标准模式下，图片是基线对齐的。而怪异模式下，则不存在这个问题。具体请看这篇文章 <a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/?shrink=1">CSS深入理解vertical-align和line-height的基友关系</a>。</li>
</ul>
<h2 id="三、HTML与XHTML的区别"><a href="#三、HTML与XHTML的区别" class="headerlink" title="三、HTML与XHTML的区别"></a>三、HTML与XHTML的区别</h2><blockquote>
<p><code>HTML</code>(文本标记语言)是英文HyperText Markup Language的简称，用于创建网页的标准标记语言，html并不是编程语言，HTML 运行在浏览器上由浏览器来解析翻译给网站访客，它是建设网站的基础。Html5代表了下一代html的发展，html5功能已经很强大。</p>
<p><code>XHTML</code>(可扩展标识语言)是The Extensible Markup Language的简写,XHTML 1.0在2000年1月26日成为W3C的推荐标准。XHTML1.0是源自W3C的最新的HTML标准，是Web的语言，是M站软件幵发必不可少的Web构件之一，每一个Web开发者都需要对它熟练掌握。</p>
</blockquote>
<p><strong>功能区别：</strong></p>
<ul>
<li>HTML对于各大浏览器兼容性较差(pc端浏览器、手机端浏览器、PAD)，对于网页页面编写技巧要求比较高，现在web前端开发的静态网页，一般都是html4.0，HTML5就另当别论了。</li>
<li>XHTML可以很好处理各大浏览器的兼容(pc端浏览器、手机端浏览器、PAD)，看起来与HTML有些相象但是和HTML有不少的区别，XHTML的语法较为严谨，习惯松散结构的HTML编写者刚开始接触XHTML有些不习惯。XHTML结合了部分XML的强大功能及大多数HTML的简单特性。</li>
</ul>
<p><strong>书写习惯区别</strong></p>
<ul>
<li>HTML标签不区分大小写XHTML所有标签都必须小写。</li>
<li>XHTML标签必须成双成对.</li>
<li>html对标签顺序要求不严格，XHTML标签顺序必须正确</li>
</ul>
<h2 id="四、使用data"><a href="#四、使用data" class="headerlink" title="四、使用data-*"></a>四、使用data-*</h2><ul>
<li>data-* 属性用于存储页面或应用程序的私有自定义数据。</li>
<li>data-* 属性赋予我们在所有 HTML 元素上嵌入自定义 data 属性的能力。</li>
<li>存储的（自定义）数据能够被页面的 JavaScript 中利用，以创建更好的用户体验（不进行 Ajax 调用或服务器端数据库查询）。</li>
</ul>
<p>data-* 属性包括两部分：</p>
<p>   <strong>语法  &lt;*element* data-*=”*somevalue*”&gt;</strong></p>
<ul>
<li>属性名不应该包含任何大写字母，并且在前缀 “data-“ 之后必须有至少一个字符</li>
<li>属性值可以是任意字符串</li>
</ul>
<blockquote>
<p>注释：用户代理会完全忽略前缀为 “data-“ 的自定义属性。</p>
</blockquote>
<p><strong>Example</strong>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">showDetails</span>(<span class="params">animal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> animalType = animal.getAttribute(<span class="string">&quot;data-animal-type&quot;</span>);</span></span><br><span class="line"><span class="javascript">alert(animal.innerHTML + <span class="string">&quot;是一种&quot;</span> + animalType + <span class="string">&quot;。&quot;</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>物种<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击某个物种来查看其类别：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">onclick</span>=<span class="string">&quot;showDetails(this)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;owl&quot;</span> <span class="attr">data-animal-type</span>=<span class="string">&quot;鸟类&quot;</span>&gt;</span>喜鹊<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">onclick</span>=<span class="string">&quot;showDetails(this)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;salmon&quot;</span> <span class="attr">data-animal-type</span>=<span class="string">&quot;鱼类&quot;</span>&gt;</span>金枪鱼<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">onclick</span>=<span class="string">&quot;showDetails(this)&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tarantula&quot;</span> <span class="attr">data-animal-type</span>=<span class="string">&quot;蜘蛛&quot;</span>&gt;</span>蝇虎<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>优势</strong></p>
<ul>
<li>自定义属性，可以被js很好的操作</li>
<li>H5的新属性</li>
<li>通过js的element.dataset.<em>或jQuery的data(‘</em>‘)拿到，*可以为url等字符</li>
<li>框架的数据绑定，例如<code>data-ng-if=&quot;cs==1&quot;</code></li>
</ul>
<p><strong>使用</strong></p>
<p> data-toggle 这种以 <strong>data-</strong> 开头的格式放在元素上表示元素携带的数据，如：</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">&lt;``img` `id``=``<span class="string">&quot;img&quot;</span>` `src``=``<span class="string">&quot;small.jpg&quot;</span>` `data-bigimg``=``<span class="string">&quot;big.jpg&quot;</span>` `/&gt;</span><br></pre></td></tr></table></figure>

<p>JQuery的 <strong>data()</strong> 方法可以直接操作，如：</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">//获取：<span class="string">``</span>var<span class="string">` `</span>bigImage = $(<span class="string">``</span><span class="string">&quot;#img&quot;</span><span class="string">``</span>).data(<span class="string">``</span><span class="string">&quot;bigimg&quot;</span><span class="string">``</span>);<span class="string">``</span>//注意，这里不用加 data-</span><br><span class="line">//设置：<span class="string">``</span>$(<span class="string">``</span><span class="string">&quot;#img&quot;</span><span class="string">``</span>).data(<span class="string">``</span><span class="string">&quot;bigimg&quot;</span><span class="string">``</span>,<span class="string">``</span><span class="string">&quot;newBig.jpg&quot;</span><span class="string">``</span>);<span class="string">``</span>//注意，这里也不用加 data-</span><br></pre></td></tr></table></figure>

<p>用这种 <code>$(&quot;[data-bigimg]&quot;)</code> 的方式可以选择所有具有 <code>data-bigimg</code> 这个属性的元素。</p>
<p>也可以直接通过<code>$(&quot;#img&quot;).attr(&quot;data-bigimg&quot;);</code> 来获取和设置</p>
<h2 id="五、HTML模板引擎"><a href="#五、HTML模板引擎" class="headerlink" title="五、HTML模板引擎"></a>五、HTML模板引擎</h2><blockquote>
<p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的<a href="https://baike.baidu.com/item/HTML/97049">HTML</a>文档。</p>
</blockquote>
<blockquote>
<p>其他待补充</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML渲染</title>
    <url>/2020/08/29/HTML-render/</url>
    <content><![CDATA[<h2 id="一、HTML渲染过程"><a href="#一、HTML渲染过程" class="headerlink" title="一、HTML渲染过程"></a>一、HTML渲染过程</h2><h3 id="1-HTML解析过程"><a href="#1-HTML解析过程" class="headerlink" title="1. HTML解析过程"></a>1. HTML解析过程</h3><ol>
<li><p><strong>构建DOM树</strong>：将HTML构建成一个DOM树，也就是构建节点，把所有的节点都构建出来</p>
</li>
<li><p><strong>构建CSSOM树</strong>：解析css去构建CSSOM树</p>
</li>
<li><p><strong>根据DOM树和CSSOM树构建render树</strong>：DOM树和CSSOM树已经构建完毕，浏览器会根据这两个来构造render树，浏览器就知道了有哪些节点、各个节点的CSS定义以及他们的从属关系</p>
</li>
<li><p><strong>布局</strong>：有了render树就开始布局Layout，开始计算各个节点的位置和样式</p>
</li>
<li><p><strong>绘制</strong>：遍历render树，在页面上绘制每个节点</p>
</li>
<li><p><strong><em>重排reflow</em></strong>：当render树绘制完成之后，比如JavaScript改变样式或添加节点，这时候render树就需要重新计算</p>
</li>
<li><p><strong><em>重绘repaint</em></strong>：既然重排了，最后当然得重新绘制页面。</p>
</li>
</ol>
<a id="more"></a>

<h3 id="2-浏览器渲染页面详解"><a href="#2-浏览器渲染页面详解" class="headerlink" title="2. 浏览器渲染页面详解"></a>2. 浏览器渲染页面详解</h3><blockquote>
<p>找了一篇已经很全的文章，所以不继续造轮子了，接下来分享一下<a href="https://segmentfault.com/a/1190000010298038">这篇文章</a>，同时感谢原作者</p>
</blockquote>
<p>由一道面试题引发的思考：</p>
<p><strong>从用户输入浏览器输入url到页面最后呈现 有哪些过程？</strong><br><em>一道很常规的题目，考的是基本网络原理，和浏览器加载css，js过程。</em></p>
<p><strong><em>答案大致如下：</em></strong></p>
<blockquote>
<ol>
<li><p>用户输入URL地址</p>
</li>
<li><p>浏览器解析URL解析出主机名</p>
</li>
<li><p>浏览器将主机名转换成服务器ip地址（浏览器先查找本地DNS缓存列表 没有的话 再向浏览器默认的DNS服务器发送查询请求 同时缓存）</p>
</li>
<li><p>浏览器将端口号从URL中解析出来</p>
</li>
<li><p>浏览器建立一条与目标Web服务器的TCP连接（三次握手）</p>
</li>
<li><p>浏览器向服务器发送一条HTTP请求报文</p>
</li>
<li><p>服务器向浏览器返回一条HTTP响应报文</p>
</li>
<li><p>关闭连接 浏览器解析文档</p>
</li>
<li><p>如果文档中有资源 重复6 7 8 动作 直至资源全部加载完毕</p>
</li>
</ol>
</blockquote>
<p><strong>通过研究，了解一些基本常识的原理：</strong></p>
<ol>
<li>为什么要将js放到页脚部分</li>
<li>引入样式的几种方式的权重</li>
<li>css属性书写顺序建议</li>
<li>何种类型的DOM操作是耗费性能的</li>
</ol>
<h4 id="2-1-浏览器渲染主要流程"><a href="#2-1-浏览器渲染主要流程" class="headerlink" title="2.1 浏览器渲染主要流程"></a>2.1 浏览器渲染主要流程</h4><p>不同的浏览器内核不同，所以渲染过程不太一样。</p>
<p><code>WebKit 主流程</code></p>
<p><img data-src="pic1.png"></p>
<p><code>Mozilla</code> 的 <code>Gecko</code> 呈现引擎主流程</p>
<p><img data-src="pic2.png"></p>
<p>由上面两张图可以看出，虽然主流浏览器渲染过程叫法有区别，但是主要流程还是相同的。</p>
<p><code>Gecko</code> 将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。<br>WebKit 使用的术语是“呈现树”，它由“呈现对象”组成。</p>
<p>对于元素的放置，<code>WebKit</code> 使用的术语是“布局”，而 <code>Gecko</code> 称之为“重排”。</p>
<p>对于连接 DOM 节点和可视化信息从而创    建呈现树的过程，<code>WebKit</code> 使用的术语是“附加”。</p>
<p><strong>所以可以分析出基本过程：</strong></p>
<ol>
<li>HTML解析出DOM Tree</li>
<li>CSS解析出Style Rules</li>
<li>将二者关联生成Render Tree</li>
<li>Layout 根据Render Tree计算每个节点的信息</li>
<li>Painting 根据计算好的信息绘制整个页面</li>
</ol>
<h4 id="2-2-HTML-解析"><a href="#2-2-HTML-解析" class="headerlink" title="2.2 HTML 解析"></a>2.2 HTML 解析</h4><p><code>HTML Parser</code>的任务是将HTML标记解析成<code>DOM Tree</code><br>这个解析可以参考React解析DOM的过程，但是这里面有很多别的规则和操作，比如容错机制，识别<code>&lt;/br&gt;</code>和<code>&lt;br&gt;</code>等等。<br>感兴趣的可以参考 <a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">《How Browser Work》</a>，<a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">中文翻译</a><br>举个例子：一段HTML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>经过解析之后的DOM Tree差不多就是</p>
<p><img data-src="pic3.png"></p>
<p>将文本的HTML文档，提炼出关键信息，嵌套层级的树形结构，便于计算拓展。这就是HTML Parser的作用。</p>
<h4 id="2-3-CSS解析"><a href="#2-3-CSS解析" class="headerlink" title="2.3 CSS解析"></a>2.3 CSS解析</h4><p><code>CSS Parser</code>将CSS解析成<code>Style Rules</code>，<code>Style Rules</code>也叫<code>CSSOM（CSS Object Model）</code>。<br><code>StyleRules</code>也是一个树形结构，根据CSS文件整理出来的类似<code>DOM Tree</code>的树形结构：</p>
<p><img data-src="pic4.png"></p>
<p>与<code>HTML Parser</code>相似，<code>CSS Parser</code>作用就是将很多个CSS文件中的样式合并解析出具有树形结构Style Rules。</p>
<h4 id="2-4-脚本处理"><a href="#2-4-脚本处理" class="headerlink" title="2.4 脚本处理"></a>2.4 脚本处理</h4><p>浏览器解析文档，当遇到<code>&lt;script&gt;</code>标签的时候，会立即解析脚本，停止解析文档（因为JS可能会改动DOM和CSS，所以继续解析会造成浪费）。<br>如果脚本是外部的，会等待脚本下载完毕，再继续解析文档。现在可以在script标签上增加属性 <code>defer</code>或者<code>async</code>。<br>脚本解析会将脚本中改变DOM和CSS的地方分别解析出来，追加到<code>DOM Tree</code>和<code>Style Rules</code>上。</p>
<h4 id="2-5-呈现树（Render-Tree）"><a href="#2-5-呈现树（Render-Tree）" class="headerlink" title="2.5 呈现树（Render Tree）"></a>2.5 呈现树（Render Tree）</h4><p><code>Render Tree</code>的构建其实就是<code>DOM Tree</code>和<code>CSSOM</code> <strong>Attach</strong>的过程。</p>
<p>呈现树是和 DOM 元素相对应的，但并非一一对应。Render Tree实际上就是一个计算好样式，与HTML对应的（包括哪些显示，那些不显示）的Tree。</p>
<blockquote>
<p>在 WebKit 中，解析样式和创建呈现树的过程称为“附加”。每个 DOM 节点都有一个<code>“attach”</code>方法。附加是同步进行的，将节点插入 DOM 树需要调用新的节点<code>“attach”</code>方法。</p>
</blockquote>
<p><img data-src="pic5.png"></p>
<h4 id="2-6-样式计算"><a href="#2-6-样式计算" class="headerlink" title="2.6 样式计算"></a>2.6 样式计算</h4><p>样式计算是个很复杂的问题。DOM中的一个元素可以对应样式表中的多个元素。样式表包括了所有样式：浏览器默认样式表，自定义样式表，inline样式元素，<strong>HTML可视化属性如：width=100。后者将转化以匹配CSS样式。</strong></p>
<blockquote>
<p>WebKit 节点会引用样式对象 (RenderStyle)。这些对象在某些情况下可以由不同节点共享。这些节点是同级关系，并且：</p>
<ol>
<li>这些元素必须处于相同的鼠标状态（例如，不允许其中一个是“:hover”状态，而另一个不是）</li>
<li>任何元素都没有 ID</li>
<li>标记名称应匹配</li>
<li>类属性应匹配</li>
<li>映射属性的集合必须是完全相同的</li>
<li>链接状态必须匹配</li>
<li>焦点状态必须匹配</li>
<li>任何元素都不应受属性选择器的影响，这里所说的“影响”是指在选择器中的任何位置有任何使用了属性选择器的选择器匹配</li>
<li>元素中不能有任何 inline 样式属性</li>
<li>不能使用任何同级选择器。WebCore 在遇到任何同级选择器时，只会引发一个全局开关，并停用整个文档的样式共享（如果存在）。这包括 + 选择器以及 :first-child 和 :last-child 等选择器。</li>
</ol>
</blockquote>
<p>为了简化样式计算，Firefox 还采用了另外两种树：规则树和样式上下文树。WebKit 也有样式对象，但它们不是保存在类似样式上下文树这样的树结构中，只是由 DOM 节点指向此类对象的相关样式。</p>
<p><img data-src="pic6.png"></p>
<p>样式上下文包含端值。要计算出这些值，应按照正确顺序应用所有的匹配规则，并将其从逻辑值转化为具体的值。<br>例如，<strong>如果逻辑值是屏幕大小的百分比，则需要换算成绝对的单位</strong>。规则树的点子真的很巧妙，它使得节点之间可以共享这些值，以避免重复计算，还可以节约空间。<br>所有匹配的规则都存储在树中。路径中的底层节点拥有较高的优先级。规则树包含了所有已知规则匹配的路径。规则的存储是延迟进行的。规则树不会在开始的时候就为所有的节点进行计算，而是只有当某个节点样式需要进行计算时，才会向规则树添加计算的路径。</p>
<p>*<strong>举个例子</strong> 一段HTML代码：*</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=&quot;<span class="symbol">err</span>&quot; <span class="symbol">id</span>=&quot;<span class="symbol">div1</span>&quot;&gt;</span><br><span class="line">      &lt;<span class="symbol">p</span>&gt;</span><br><span class="line">        <span class="symbol">this</span> <span class="symbol">is</span> <span class="symbol">a</span> &lt;<span class="symbol">span</span> <span class="symbol">class</span>=&quot;<span class="symbol">big</span>&quot;&gt; <span class="symbol">big</span> <span class="symbol">error</span> &lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">        <span class="symbol">this</span> <span class="symbol">is</span> <span class="symbol">also</span> <span class="symbol">a</span></span><br><span class="line">        &lt;<span class="symbol">span</span> <span class="symbol">class</span>=&quot;<span class="symbol">big</span>&quot;&gt; <span class="symbol">very</span>  <span class="symbol">big</span>  <span class="symbol">error</span>&lt;/<span class="symbol">span</span>&gt; <span class="symbol">error</span></span><br><span class="line">      &lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">    &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">err</span>&quot; <span class="symbol">id</span>=&quot;<span class="symbol">div2</span>&quot;&gt;<span class="symbol">another</span> <span class="symbol">error</span>&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">  &lt;/<span class="symbol">body</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">html</span>&gt;</span><br></pre></td></tr></table></figure>

<p>对应CSS规则如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">1. <span class="selector-tag">div</span> &#123;<span class="attribute">margin</span>:<span class="number">5px</span>;<span class="attribute">color</span>:black&#125;</span><br><span class="line">2. <span class="selector-class">.err</span> &#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line">3. <span class="selector-class">.big</span> &#123;<span class="attribute">margin-top</span>:<span class="number">3px</span>&#125;</span><br><span class="line">4. <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">4px</span>&#125;</span><br><span class="line">5. <span class="selector-id">#div1</span> &#123;<span class="attribute">color</span>:blue&#125;</span><br><span class="line">6. <span class="selector-id">#div2</span> &#123;<span class="attribute">color</span>:green&#125;</span><br></pre></td></tr></table></figure>

<p>则CSS形成的规则树如下图所示（节点的标记方式为“节点名 : 指向的规则序号”）</p>
<p><img data-src="pic7.png"></p>
<blockquote>
<p>下面的内容有点绕，但是很有逻辑</p>
</blockquote>
<p>假设我们解析 HTML 时遇到了第二个 <code>&lt;div&gt;</code> 标记，我们需要为此节点创建样式上下文，并填充其样式结构。<br>经过规则匹配，我们发现该 <code>&lt;div&gt;</code>的匹配规则是第 1、2 和 6 条。这意味着规则树中已有一条路径可供我们的元素使用，我们只需要再为其添加一个节点以匹配第 6 条规则（规则树中的 F 节点）。<br>我们将创建样式上下文并将其放入上下文树中。新的样式上下文将指向规则树中的 F 节点。</p>
<p>现在我们需要填充样式结构。首先要填充的是 margin 结构。由于最后的规则节点 (F) 并没有添加到 margin 结构，我们需要上溯规则树，直至找到在先前节点插入中计算过的缓存结构，然后使用该结构。我们会在指定 margin 规则的最上层节点（即 B 节点）上找到该结构。</p>
<p>我们已经有了 color 结构的定义，因此不能使用缓存的结构。由于 color 有一个属性，我们无需上溯规则树以填充其他属性。我们将计算端值（将字符串转化为 <code>RGB</code> 等）并在此节点上缓存经过计算的结构。</p>
<p>第二个<code>&lt;span&gt;</code>元素处理起来更加简单。我们将匹配规则，最终发现它和之前的 span 一样指向规则 G。由于我们找到了指向同一节点的同级，就可以共享整个样式上下文了，只需指向之前 span 的上下文即可。</p>
<p>对于包含了继承自父代的规则的结构，缓存是在上下文树中进行的（事实上 color 属性是继承的，但是 Firefox 将其视为 reset 属性，并缓存到规则树上）<br>所以生成的上下文树如下：</p>
<p><img data-src="pic8.png"></p>
<h4 id="2-7-以正确的层叠顺序应用规则"><a href="#2-7-以正确的层叠顺序应用规则" class="headerlink" title="2.7 以正确的层叠顺序应用规则"></a>2.7 以正确的层叠顺序应用规则</h4><p>样式对象具有与每个可视化属性一一对应的属性（均为 CSS 属性但更为通用）。如果某个属性未由任何匹配规则所定义，那么部分属性就可由父代元素样式对象继承。其他属性具有默认值。<br>如果定义不止一个，就会出现问题，需要通过层叠顺序来解决。</p>
<p>一些例子：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">*             &#123;&#125;  /* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */</span></span><br><span class="line"><span class="keyword">li</span>            &#123;&#125;  <span class="comment">/* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */</span></span><br><span class="line"><span class="keyword">li</span>:first-<span class="keyword">line</span> &#123;&#125;  <span class="comment">/* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span></span><br><span class="line">ul <span class="keyword">li</span>         &#123;&#125;  <span class="comment">/* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span></span><br><span class="line">ul ol+<span class="keyword">li</span>      &#123;&#125;  <span class="comment">/* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */</span></span><br><span class="line">h1 + *[rel=up]&#123;&#125;  <span class="comment">/* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */</span></span><br><span class="line">ul ol <span class="keyword">li</span>.red  &#123;&#125;  <span class="comment">/* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */</span></span><br><span class="line"><span class="keyword">li</span>.red.level  &#123;&#125;  <span class="comment">/* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */</span></span><br><span class="line">#x34y         &#123;&#125;  <span class="comment">/* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */</span></span><br><span class="line">style=<span class="string">&quot;&quot;</span>          <span class="comment">/* a=1 b=0 c=0 d=0 -&gt; specificity = 1,0,0,0 */</span></span><br></pre></td></tr></table></figure>

<p>利用上面的方法，基本可以快速确定不同选择器的优先级。</p>
<h4 id="2-8-布局Layout"><a href="#2-8-布局Layout" class="headerlink" title="2.8 布局Layout"></a>2.8 布局Layout</h4><p>创建渲染树后，下一步就是<code>布局（Layout）</code>,或者叫<code>回流（reflow,relayout）</code>，这个过程就是通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸，将其安置在浏览器窗口的正确位置，而有些时候我们会在文档布局完成后对DOM进行修改，这时候可能需要重新进行布局，也可称其为<code>回流</code>，本质上还是一个布局的过程，每一个渲染对象都有一个布局或者回流方法，实现其布局或回流。</p>
<p><strong>对渲染树的布局可以分为全局和局部的</strong></p>
<ul>
<li>全局即对整个渲染树进行重新布局，如<u>当我们改变了窗口尺寸或方向</u>或者是<u>修改了根元素的尺寸或者字体大小</u>等；</li>
<li>而局部布局可以是对渲染树的某部分或某一个渲染对象进行重新布局。</li>
</ul>
<p>大多数web应用对DOM的操作都是比较频繁，这意味着经常需要对DOM进行布局和回流，而如果仅仅是一些小改变，就触发整个渲染树的回流，这显然是不好的，为了避免这种情况，浏览器使用了<code>脏位系统</code>，只有一个渲染对象改变了或者某渲染对象及其子渲染对象脏位值为”dirty”时，说明需要回流。</p>
<blockquote>
<p>表示需要布局的脏位值有两种：</p>
<ul>
<li>“dirty”–自身改变，需要回流</li>
<li>“children are dirty”–子节点改变，需要回流</li>
</ul>
</blockquote>
<p>布局是一个从上到下，从外到内进行的递归过程，从根渲染对象，即对应着HTML文档根元素，然后下一级渲染对象，如对应着元素，如此层层递归，依次计算每一个渲染对象的几何信息（位置和尺寸）。</p>
<p><strong>每一个渲染对象的布局流程基本如：</strong></p>
<ol>
<li><p>计算渲染对象的宽度（width）；</p>
</li>
<li><p>遍历此渲染对象的所有子级，依次：</p>
<p>2.1设置子级渲染对象的坐标</p>
<p>2.2判断是否需要触发子渲染对象的布局或回流方法，计算子渲染对象的高度（height）</p>
</li>
<li><p>设置此渲染对象的高度：根据子渲染对象的累积高，margin和padding的高度设置其高度；</p>
</li>
<li><p>设置此渲染对象脏位值为false。</p>
</li>
</ol>
<h4 id="2-9-绘制（Painting）"><a href="#2-9-绘制（Painting）" class="headerlink" title="2.9 绘制（Painting）"></a>2.9 绘制（Painting）</h4><p>在绘制阶段，系统会遍历呈现树，并调用呈现器的<code>“paint”</code>方法，将呈现器的内容显示在屏幕上。绘制工作是使用用户界面基础组件完成的。</p>
<p>CSS2 规范定义了绘制流程的顺序。绘制的顺序其实就是元素进入堆栈样式上下文的顺序。这些堆栈会从后往前绘制，因此这样的顺序会影响绘制。块呈现器的堆栈顺序如下：</p>
<ol>
<li>背景颜色</li>
<li>背景图片</li>
<li>边框</li>
<li>子代</li>
<li>轮廓</li>
</ol>
<p>这里还要说两个概念，一个是<code>Reflow</code>，另一个是<code>Repaint</code>。这两个不是一回事。<br><strong>Repaint</strong> ——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。<br><strong>Reflow</strong> 元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow）reflow 会从<code>&lt;html&gt;</code>这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。</p>
<blockquote>
<p>Reflow的成本比Repaint的成本高得多的多。DOM Tree里的每个结点都会有reflow方法，一个结点的reflow很有可能导致子结点，甚至父点以及同级结点的reflow。在一些高性能的电脑上也许还没什么，但是如果reflow发生在手机上，那么这个过程是非常痛苦和耗电的。</p>
</blockquote>
<p> 所以，下面这些动作有很大可能会是成本比较高的。</p>
<ul>
<li>当你增加、删除、修改DOM结点时，会导致Reflow或Repaint</li>
<li>当你移动DOM的位置，或是搞个动画的时候。</li>
<li>当你修改CSS样式的时候。</li>
<li>当你Resize窗口的时候（移动端没有这个问题），或是滚动的时候。</li>
<li>当你修改网页的默认字体时。</li>
<li>注：display:none会触发reflow，而visibility:hidden只会触发repaint，因为没有发现位置变化。</li>
</ul>
<p>基本上来说，reflow有如下的几个原因：</p>
<ul>
<li>Initial。网页初始化的时候。</li>
<li>Incremental。一些Javascript在操作DOM Tree时。</li>
<li>Resize。其些元件的尺寸变了。</li>
<li>StyleChange。如果CSS的属性发生变化了。</li>
<li>Dirty。几个Incremental的reflow发生在同一个frame的子树上。</li>
</ul>
<p>看几个例子：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>); <span class="regexp">//</span> repaint</span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(<span class="string">&#x27;margin&#x27;</span>, <span class="string">&#x27;2px&#x27;</span>); <span class="regexp">//</span> reflow, repaint</span><br><span class="line"></span><br><span class="line">var bstyle = document.body.style; <span class="regexp">//</span> cache</span><br><span class="line"></span><br><span class="line">bstyle.padding = <span class="string">&quot;20px&quot;</span>; <span class="regexp">//</span> reflow, repaint</span><br><span class="line">bstyle.border = <span class="string">&quot;10px solid red&quot;</span>; <span class="regexp">//</span>  再一次的 reflow 和 repaint</span><br><span class="line"></span><br><span class="line">bstyle.color = <span class="string">&quot;blue&quot;</span>; <span class="regexp">//</span> repaint</span><br><span class="line">bstyle.backgroundColor = <span class="string">&quot;#fad&quot;</span>; <span class="regexp">//</span> repaint</span><br><span class="line"></span><br><span class="line">bstyle.fontSize = <span class="string">&quot;2em&quot;</span>; <span class="regexp">//</span> reflow, repaint</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> new DOM element - reflow, repaint</span><br><span class="line">document.body.appendChild(document.createTextNode(<span class="string">&#x27;dude!&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>当然，我们的浏览器是聪明的，它不会像上面那样，你每改一次样式，它就reflow或repaint一次。一般来说，浏览器会把这样的操作积攒一批，然后做一次reflow，这又叫异步reflow或增量异步reflow。但是有些情况浏览器是不会这么做的，比如：resize窗口，改变了页面默认的字体，等。对于这些操作，浏览器会马上进行reflow。</p>
<p>但是有些时候，我们的脚本会阻止浏览器这么干，比如：如果我们请求下面的一些DOM值：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">offsetTop, offsetLeft, offsetWidth, offsetHeight</span><br><span class="line">scrollTop<span class="regexp">/Left/</span>Width/Height</span><br><span class="line">clientTop<span class="regexp">/Left/</span>Width/Height</span><br><span class="line">IE中的 getComputedStyle(), 或 currentStyle</span><br></pre></td></tr></table></figure>

<p>因为，如果我们的程序需要这些值，那么浏览器需要返回最新的值，而这样一样会flush出去一些样式的改变，从而造成频繁的reflow/repaint。</p>
<h4 id="2-10-Chrome调试工具查看页面渲染顺序"><a href="#2-10-Chrome调试工具查看页面渲染顺序" class="headerlink" title="2.10 Chrome调试工具查看页面渲染顺序"></a>2.10 Chrome调试工具查看页面渲染顺序</h4><p>页面的渲染详细过程可以通过chrome开发者工具中的timeline查看</p>
<p><img data-src="pic9.png"></p>
<ol>
<li>发起请求；</li>
<li>解析HTML；</li>
<li>解析样式；</li>
<li>执行JavaScript；</li>
<li>布局；</li>
<li>绘制</li>
</ol>
<h2 id="二、页面渲染优化"><a href="#二、页面渲染优化" class="headerlink" title="二、页面渲染优化"></a>二、页面渲染优化</h2><p>浏览器对上文介绍的关键渲染路径进行了很多优化，针对每一次变化产生尽量少的操作，还有优化判断重新绘制或布局的方式等等。<br>在改变文档根元素的字体颜色等视觉性信息时，会触发整个文档的重绘，而改变某元素的字体颜色则只触发特定元素的重绘；改变元素的位置信息会同时触发此元素（可能还包括其兄弟元素或子级元素）的布局和重绘。某些重大改变，如更改文档根元素的字体尺寸，则会触发整个文档的重新布局和重绘，据此及上文所述，推荐以下优化和实践：</p>
<ol>
<li>HTML文档结构层次尽量少，最好不深于六层；</li>
<li>脚本尽量后放，放最后即可；</li>
<li>少量首屏样式内联放在标签内；</li>
<li>样式结构层次尽量简单；</li>
<li>在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发<code>回流</code>；</li>
<li>减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画；</li>
<li>动画尽量使用在绝对定位或固定定位的元素上；</li>
<li>隐藏在屏幕外，或在页面滚动时，尽量停止动画；</li>
<li>尽量缓存DOM查找，查找器尽量简洁；</li>
<li>涉及多域名的网站，可以开启域名预解析</li>
</ol>
<p><strong>补充</strong></p>
<p>HTML整个解析过程看起来很简单，但是我们要知道解析过程中css、Js和DOM的加载顺序。我们都知道HTML是自上往下解析的，在解析过程中：</p>
<p>1、如果遇到link和style，那就就会去下载这些外部的css资源，但是css跟DOM的构建是并行的，就是说不会阻塞DOM树的构建。</p>
<p>2、如果遇到script，那么页面就会把控制权交给JavaScript，直到脚本加载完毕或者是执行完毕。</p>
<p>3、页面的渲染是依靠render树，也就是说如果css没有加载完成，页面也不会渲染显示。</p>
<p>4、JavaScript执行过程中有可能需要改变样式，所以css加载也会阻塞JavaScript的加载。</p>
<p>5、JavaScript执行过程中如果操作DOM，但是DOM树又是在JavaScript之后才能构建，就会报错，找不到节点。</p>
<p>这就是HTML的渲染过程，因为DOM和css并行构建，我们会把css用外部引入，可以更快的构建DOM，因为JavaScript会阻塞DOM和css构建，且操作DOM一定要在DOM构建完成，我们选择把script放在最下面。如果我们过多的在render渲染完成后改变render，那么重排和重绘就会一直被动重发执行，这也会造成渲染速度变慢。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器渲染问题每一步都涉及到很多底层知识，每一步都有对应的算法。<br>文章中间很多语句都是直接复制的原文，自己的语言概况还是不及原文精彩。</p>
<p><strong>可参考原文链接</strong></p>
<p><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">《How Browser Work》</a></p>
<p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">浏览器的工作原理：新式网络浏览器幕后揭秘</a></p>
<p><a href="http://imweb.io/topic/56841c864c44bcc56092e3fa">浏览器渲染原理</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25279069">浏览器 渲染,绘制流程及性能优化</a></p>
<p><a href="http://caibaojian.com/css-reflow-repaint.html">优化CSS重排重绘与浏览器性能</a></p>
<p><a href="http://web.jobbole.com/90961/">浅析前端页面渲染机制</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-Supplement</title>
    <url>/2020/08/20/Hexo-Next-Supplement/</url>
    <content><![CDATA[<h1 id="Hexo后续补充"><a href="#Hexo后续补充" class="headerlink" title="Hexo后续补充"></a>Hexo后续补充</h1><blockquote>
<p>本篇对 <a href="https://hammerzer.github.io/2020/08/18/The%20Starting%20Point%20of%20Blogs/">The-Starting-Point-of-Blogs</a> 进行一些补充</p>
</blockquote>
<a id="more"></a>

<h2 id="一、推送处理"><a href="#一、推送处理" class="headerlink" title="一、推送处理"></a>一、推送处理</h2><h3 id="1-静态资源压缩"><a href="#1-静态资源压缩" class="headerlink" title="1. 静态资源压缩"></a>1. 静态资源压缩</h3><blockquote>
<p>存在问题未解决</p>
</blockquote>
<p>在站点目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure>

<p>安装gulp插件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure>

<p>在 <code>Hexo</code> 站点下添加 <code>gulpfile.js</code>文件，文件内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">var minifycss = require(&#x27;gulp-minify-css&#x27;);</span><br><span class="line">var uglify = require(&#x27;gulp-uglify&#x27;);</span><br><span class="line">var htmlmin = require(&#x27;gulp-htmlmin&#x27;);</span><br><span class="line">var htmlclean = require(&#x27;gulp-htmlclean&#x27;);</span><br><span class="line">var imagemin = require(&#x27;gulp-imagemin&#x27;);</span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&#x27;minify-css&#x27;, function() &#123;</span><br><span class="line">  return gulp.src(&#x27;./public/**/*.css&#x27;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&#x27;minify-html&#x27;, function() &#123;</span><br><span class="line">  return gulp.src(&#x27;./public/**/*.html&#x27;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,</span><br><span class="line">    minifyJS: true,</span><br><span class="line">    minifyCSS: true,</span><br><span class="line">    minifyURLs: true,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&#x27;minify-js&#x27;, function() &#123;</span><br><span class="line">    return gulp.src([&#x27;./public/**/.js&#x27;,&#x27;!./public/js/**/*min.js&#x27;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/demo 目录内图片</span><br><span class="line">gulp.task(&#x27;minify-images&#x27;, function() &#123;</span><br><span class="line">    gulp.src(&#x27;./public/demo/**/*.*&#x27;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public/uploads&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&#x27;default&#x27;, [</span><br><span class="line">  &#x27;minify-html&#x27;,&#x27;minify-css&#x27;,&#x27;minify-js&#x27;,&#x27;minify-images&#x27;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">gulp</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Tip</code>   可以把上面的三条命令编写进package.json的script，就可一键三连啦！</p>
</blockquote>
<h3 id="2-本地站点推送到GitHub上"><a href="#2-本地站点推送到GitHub上" class="headerlink" title="2. 本地站点推送到GitHub上"></a>2. 本地站点推送到GitHub上</h3><p>在站点更目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在 <code>Hexo</code> 站点的 <code>_config.yml</code> 中配置 <code>deploy</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #your github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo d --g</span><br></pre></td></tr></table></figure>

<p>hexo g # 生成本地 public 静态文件, hexo d # 部署到 Github 上, 也可以缩写成：hexo g –d 。</p>
<h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="二、站点功能"><a href="#二、站点功能" class="headerlink" title="二、站点功能"></a>二、站点功能</h2><h3 id="1-文章加密访问"><a href="#1-文章加密访问" class="headerlink" title="1. 文章加密访问"></a>1. 文章加密访问</h3><p>打开 <code>themes/next/layout/_partials/head.swig</code>文件,在 <code>&#123;% if theme.pace %&#125;` 标签下的 `&#123;% endif %&#125;</code> 之前插入代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">            if (prompt(&#x27;请输入文章密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">                alert(&#x27;密码错误&#x27;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在文章上应用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2017观看影视</span><br><span class="line">date: 2017-09-25 16:10:03</span><br><span class="line">type:</span><br><span class="line">top:</span><br><span class="line">comments:</span><br><span class="line">categories: [影音, 影视]</span><br><span class="line">tags: [影音, 电影, 电视剧, 动画]</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="2-添加热度"><a href="#2-添加热度" class="headerlink" title="2. 添加热度"></a>2. 添加热度</h3><ul>
<li><p>进入<a href="https://links.jianshu.com/go?to=https://leancloud.cn/">LeanCloud官网</a>，进行账号注册。登录后，进入控制台，创建应用，应用名为<code>Hexo</code></p>
</li>
<li><p>创建应用后，点击存储，创建<strong>Class</strong>，<strong>Class</strong>命名为<strong>Counter</strong>，并限制写入</p>
</li>
<li><p>查看<strong>AppID</strong>和<strong>AppKey</strong></p>
</li>
<li><p>打开<code>Blog/themes/next/layout/_macro/post.swig</code>，<code>command+F</code>搜索<code>leancloud-visitors-count</code>，在图片位置加入<code>&lt;span&gt;℃&lt;/span&gt;</code></p>
<p><img data-src="pic1.png"></p>
</li>
<li><p>编辑主题配置文件，<code>command+f</code>搜索<code>leancloud_visitors</code>，将其值设为：<code>ture</code>，将<strong>AppID</strong>和<strong>AppKey</strong>粘贴到相应位置：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  <span class="built_in">enable</span>: ture</span><br><span class="line">  app_id: app_id</span><br><span class="line">  app_key: app_key</span><br></pre></td></tr></table></figure>

<h3 id="3-添加免登陆评论系统"><a href="#3-添加免登陆评论系统" class="headerlink" title="3. 添加免登陆评论系统"></a>3. 添加免登陆评论系统</h3><blockquote>
<p>参考自该<a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">博文</a></p>
</blockquote>
<h4 id="3-1-为什么选择Valine"><a href="#3-1-为什么选择Valine" class="headerlink" title="3.1 为什么选择Valine"></a>3.1 为什么选择Valine</h4><p>在笔者进行评论系统选择时，我觉得我的需求就是方便，简洁，最重要一点是要支持<code>Markdown</code> ，对比之下，最终选定了这款Valine，当然，如果你不喜欢这样简洁的，可以参考 <a href="https://www.zhihu.com/question/267598518">Hexo（NexT 主题）评论系统哪个好？</a></p>
<h4 id="3-2-第一步，注册LeanClound-获取APP-ID-和-APP-Key"><a href="#3-2-第一步，注册LeanClound-获取APP-ID-和-APP-Key" class="headerlink" title="3.2  第一步，注册LeanClound,获取APP ID 和 APP Key"></a>3.2  第一步，注册LeanClound,获取APP ID 和 APP Key</h4><ul>
<li><p>Valine 是基于 <a href="https://leancloud.cn/">LeanCloud</a> 作为数据存储的，所以需要注册一个账号</p>
</li>
<li><p>注册完成后，我们找到<code>创建``应用</code></p>
<p><img data-src="pic2.png"></p>
</li>
<li><p>在这里填写你的应用名称,名称可以自己定义，然后下面选择<code>开发版</code> 点击<code>创建</code></p>
</li>
<li><p>然后点击应用进入设置，在设置页，我们首先点击存储，查看是否有<code>Comment</code>和 <code>Counter</code>，没有则创建，权限设为无限制。</p>
<p><img data-src="pic3.png"></p>
<p><img data-src="pic4.png"></p>
</li>
<li><p>然后点击设置 &gt; 安全中心 ,将除了数据存储的服务全部关闭</p>
</li>
<li><p>最后点击应用 Key 取得我们 <code>AppKey</code> 和 <code>App id</code></p>
</li>
</ul>
<h4 id="3-3-在Hexo-Next主题中配置"><a href="#3-3-在Hexo-Next主题中配置" class="headerlink" title="3.3. 在Hexo Next主题中配置"></a>3.3. 在Hexo Next主题中配置</h4><ul>
<li><p>首先打开 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 获取最新的 valine.min.js 的cdn地址</p>
</li>
<li><p>然后我们修改主题配置文件，配置CDN：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># valine  </span></span><br><span class="line"><span class="meta"># See: https://github.com/xCss/Valine  </span></span><br><span class="line"><span class="meta"># Example:  </span></span><br><span class="line"><span class="meta"># valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js  </span></span><br><span class="line"><span class="meta"># valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.4/Valine.min.js  valine: https://cdn.jsdelivr.net/npm/valine@1.3.9/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再打开配置Valine功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine </span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn </span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org </span></span><br><span class="line"><span class="attr">valine:</span> <span class="comment"># 功能开关  </span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version  </span></span><br><span class="line">    <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid #LeanClound获得的appid  </span></span><br><span class="line">    <span class="attr">appkey:</span>  <span class="comment"># Your leancloud application appkey #LeanClound获得的appkey </span></span><br><span class="line">    <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki # 邮件提醒  </span></span><br><span class="line">    <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code   </span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">欢迎畅所欲言</span> <span class="comment"># Comment box placeholder  </span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style #默认头像设置  </span></span><br><span class="line">    <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header  </span></span><br><span class="line">    <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size  </span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn # 语言，设为zh-cn  # 是否开启当前文章阅读量统计  </span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html  </span></span><br><span class="line">    <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page </span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="3-4-指定文章（页面）评论功能是否开启"><a href="#3-4-指定文章（页面）评论功能是否开启" class="headerlink" title="3.4 指定文章（页面）评论功能是否开启"></a>3.4 指定文章（页面）评论功能是否开启</h4><p>  在 Hexo 博客中，评论的功能是在所有页面都默认开启的，但是有的时候我们在页面上不需要显示评论功能，例如分类，标记页面我们并不需要评论功能。</p>
<p>  我们可以在 Front-matter 中通过<code>comments</code>属性设置true或false控制该页面或者是文章的评论功能是否打开，如我设置标签页面的评论功能关闭：</p>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">16</span>:<span class="number">50</span></span><br><span class="line">type: <span class="string">&quot;tags&quot;</span></span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-自定义头像"><a href="#3-5-自定义头像" class="headerlink" title="3.5 自定义头像"></a>3.5 自定义头像</h4><blockquote>
<p><a href="https://valine.js.org/avatar.html">valine官方文档</a></p>
</blockquote>
<blockquote>
<p>Valine 目前使用的是<a href="http://cn.gravatar.com/">Gravatar</a> 作为评论列表头像。</p>
<p>请自行登录或注册<a href="http://cn.gravatar.com/">Gravatar</a>，然后修改自己的头像。</p>
<p>评论的时候，留下在<a href="http://cn.gravatar.com/">Gravatar</a>注册时所使用的邮箱即可。</p>
</blockquote>
<p>默认值为:</p>
<p><img data-src="pic5.png"></p>
<h3 id="4-给博客添加网站地图sitemap"><a href="#4-给博客添加网站地图sitemap" class="headerlink" title="4. 给博客添加网站地图sitemap"></a>4. 给博客添加网站地图<code>sitemap</code></h3><blockquote>
<p>未实现</p>
</blockquote>
<blockquote>
<p>搜索引擎每天让蜘蛛在网站爬行来抓取页面，网站地图的作用就是给主动给蜘蛛喂数据</p>
</blockquote>
<p>网站地图位于网站根目录下，有<code>sitemap.html</code>和<code>sitemap.xml</code>两种格式。百度搜索引擎及多数搜索引擎使用html格式，谷歌使用xml格式。两步完成网站地图自动生成功能。</p>
<p>**安装<code>网站地图生成插件**</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure>

<p>重新启动hexo，系统会在<code>public</code>根目录下生成<code>sitemap.xml</code>文件。</p>
<p>具体收录参考<a href="https://www.cnblogs.com/brady-wang/p/8493346.html">此处</a></p>
<h2 id="三、常见问题"><a href="#三、常见问题" class="headerlink" title="三、常见问题"></a>三、常见问题</h2><h3 id="1-hexo开发环境迁移"><a href="#1-hexo开发环境迁移" class="headerlink" title="1. hexo开发环境迁移"></a>1. hexo开发环境迁移</h3><blockquote>
<p>参考自 <a href="https://www.cnblogs.com/study-everyday/p/8902136.html">该博主</a></p>
</blockquote>
<h4 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h4><p>安装 Git 客户端</p>
<p>安装 node JS</p>
<h4 id="1-2-在-github-官网添加新电脑产生的密钥"><a href="#1-2-在-github-官网添加新电脑产生的密钥" class="headerlink" title="1.2 在 github 官网添加新电脑产生的密钥"></a>1.2 在 github 官网添加新电脑产生的密钥</h4><h4 id="1-3-源文件拷贝"><a href="#1-3-源文件拷贝" class="headerlink" title="1.3 源文件拷贝"></a>1.3 源文件拷贝</h4><p>将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如F:/Blog目录下），注意无需拷全部，只拷如下几个目录：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"><span class="keyword">package</span>.json </span><br><span class="line">scaffolds/ </span><br><span class="line"><span class="keyword">source</span>/ </span><br><span class="line">themes/</span><br></pre></td></tr></table></figure>

<h4 id="1-4-安装-hexo"><a href="#1-4-安装-hexo" class="headerlink" title="1.4 安装 hexo"></a>1.4 安装 hexo</h4><p>在 cmd 下输入下面指令安装 hexo：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>

<h4 id="1-5-进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"><a href="#1-5-进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块" class="headerlink" title="1.5 进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"></a>1.5 进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save  // 文章部署到 git 的模块</span></span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save  // 建立 RSS 订阅</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save // 建立站点地图</span></span><br></pre></td></tr></table></figure>

<h4 id="1-6-测试"><a href="#1-6-测试" class="headerlink" title="1.6 测试"></a>1.6 测试</h4><p>这时候使用 <code>hexo s</code> 基本可以看到你新添加的文章了。</p>
<h4 id="1-7-部署发布文章"><a href="#1-7-部署发布文章" class="headerlink" title="1.7 部署发布文章"></a>1.7 部署发布文章</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="regexp">//</span> 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       <span class="regexp">//</span> 生成静态网页</span><br><span class="line">hexo d       <span class="regexp">//</span> 开始部署</span><br></pre></td></tr></table></figure>

<h4 id="1-8-Github-添加-SSH-Keys"><a href="#1-8-Github-添加-SSH-Keys" class="headerlink" title="1.8 Github 添加 SSH Keys"></a><a name="mark-one">1.8 Github 添加 SSH Keys</a></h4><blockquote>
<p>推荐该博主 <a href="https://www.himmy.cn/2019/07/06/github%E6%B7%BB%E5%8A%A0ssh-key/">GitHub添加SSH key</a></p>
</blockquote>
<h5 id="1-8-1-打开Git-Bash命令行窗口"><a href="#1-8-1-打开Git-Bash命令行窗口" class="headerlink" title="1.8.1 打开Git Bash命令行窗口"></a>1.8.1 打开Git Bash命令行窗口</h5><h5 id="1-8-2-检查是否已有SSH"><a href="#1-8-2-检查是否已有SSH" class="headerlink" title="1.8.2 检查是否已有SSH"></a>1.8.2 检查是否已有SSH</h5><p>如果没有，会返回如下信息，继续第三步创建SSH</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">bash: cd: <span class="regexp">/c/U</span>sers<span class="regexp">/Him/</span>.ssh: No such <span class="keyword">file</span> or directory</span><br></pre></td></tr></table></figure>

<p>如果本地已经有创建SSH，会返回如下信息，表示本地已经有创建过SSH了，跳过第三步，直接看第四步</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure>

<h5 id="1-8-3-创建SSH-key"><a href="#1-8-3-创建SSH-key" class="headerlink" title="1.8.3 创建SSH key"></a>1.8.3 创建SSH key</h5><p>最后一个参数替换成你自己的GitHub注册邮箱</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key <span class="built_in">pair</span>.</span><br></pre></td></tr></table></figure>

<p>接下来会提示你输入生成的key存放的路径，不设置直接回车的话会默认创建在C:/Users/你的用户账号/.ssh文件夹下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Enter <span class="keyword">file</span> in which to save the key (<span class="regexp">/c/U</span>sers<span class="regexp">/Him/</span>.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/c/Users/userpath/.ssh&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>再接下来会提示你输入密码，这个密码是用来每次提交的时候输入确认，可以不设置，直接回车两次</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Enter</span> <span class="string">passphrase</span> <span class="string">(empty</span> <span class="string">for</span> <span class="literal">no</span> <span class="string">passphrase):</span></span><br><span class="line"><span class="attr">Enter same passphrase again:</span></span><br></pre></td></tr></table></figure>

<p>最后成功后会看到类似如下的输出，表示成功生成SSH key了，可以到C:/Users/你的用户账号/.ssh文件夹下看下</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/Him/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Him/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RwvBINgH8CEt2KniltmykeyDsOseUYcwMzehFeyT86s 1225723686<span class="meta">@qq.com</span></span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string"> o+%OO+o.        </span>|</span><br><span class="line">|<span class="string">..=+%*+ ..       </span>|</span><br><span class="line">|<span class="string"> ..+o+o.. .      </span>|</span><br><span class="line">|<span class="string">o.  o=.  o .     </span>|</span><br><span class="line">|<span class="string">o oolalala S o      </span>|</span><br><span class="line">|<span class="string"> +.+.. . .       </span>|</span><br><span class="line">|<span class="string">. .o    .        </span>|</span><br><span class="line">|<span class="string">  . .  .         </span>|</span><br><span class="line">|<span class="string">   . E.          </span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>

<h5 id="1-8-4-添加SSH-key到GitHub"><a href="#1-8-4-添加SSH-key到GitHub" class="headerlink" title="1.8.4 添加SSH key到GitHub"></a>1.8.4 添加SSH key到GitHub</h5><p>首先复制.ssh文件夹下id_rsa.pub文件的内容，可以直接用文本编辑器打开复制，也可以用如下命令行复制</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>

<p>然后进入<a href="https://github.com/settings/keys%E8%AE%BE%E7%BD%AE%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E7%99%BB%E5%BD%95%E8%A6%81%E5%85%88%E7%99%BB%E5%BD%95">https://github.com/settings/keys设置，如果没有登录要先登录</a></p>
<p>或者登录后依次点击右上角Settings，然后再点击SSH and GPG keys</p>
<p>输入<code>title</code> 和 <code>key</code></p>
<p>最后点击Add SSH key按钮保存</p>
<h5 id="1-8-5-测试SSH连接"><a href="#1-8-5-测试SSH连接" class="headerlink" title="1.8.5 测试SSH连接"></a>1.8.5 测试SSH连接</h5><p>输入如下命令</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>

<p>会得到如下输出，询问是否确认连接，输入yes回车确认</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">The</span> authenticity of host &#x27;github.com (<span class="number">13.229.188.59</span>)&#x27; can&#x27;t be established.</span><br><span class="line"><span class="attribute">RSA</span> key fingerprint is SHA<span class="number">256</span>:nThbg<span class="number">6</span>kXUpJWGl<span class="number">7</span>mykeyCspRomTxdCARLviKw<span class="number">6</span>E<span class="number">5</span>SY<span class="number">8</span>.</span><br><span class="line"><span class="attribute">Are</span> you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>

<p>最后连接成功会看到如下输出</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="literal">Warning</span>: Permanently added <span class="symbol">&#x27;github</span>.com,<span class="number">13.229</span>.<span class="number">188.59</span>&#x27; (RSA) <span class="keyword">to</span> the list <span class="keyword">of</span> known hosts.</span><br><span class="line">Hi ghxiaoxiao! You<span class="symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure>

<p>迁移完毕over</p>
<h3 id="2-gitee双线部署提高访问速度"><a href="#2-gitee双线部署提高访问速度" class="headerlink" title="2. gitee双线部署提高访问速度"></a>2. gitee双线部署提高访问速度</h3><h4 id="2-1-注册账号"><a href="#2-1-注册账号" class="headerlink" title="2.1 注册账号"></a>2.1 注册账号</h4><h4 id="2-2-创建仓库"><a href="#2-2-创建仓库" class="headerlink" title="2.2 创建仓库"></a>2.2 创建仓库</h4><p>创建一个与你的Gitee控件地址同名的空项目</p>
<blockquote>
<p>比如我的Gitee空间地址为<a href="https://gitee.com/Hammerzer%EF%BC%8C%E9%82%A3%E4%B9%88%E5%88%9B%E5%BB%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E4%B8%BAHammerzer%EF%BC%8C">https://gitee.com/Hammerzer，那么创建的项目名为Hammerzer，</a></p>
<p>可能需要强制修改仓库名</p>
</blockquote>
<p>最终博客部署后的访问地址为<a href="https://hammerzer.gitee.io/">https://hammerzer.gitee.io</a></p>
<blockquote>
<p><strong>注意</strong>：如果创建仓库名称与空间地址不同，则需要访问 如<a href="https://hammerzer.gitee.io/hammer,%E5%90%8C%E6%97%B6%E4%B9%9F%E4%BC%9A%E5%AF%BC%E8%87%B4%60gitee">https://hammerzer.gitee.io/hammer,同时也会导致`gitee</a> page`无法显示css、js</p>
</blockquote>
<h4 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h4><p>复制上一步创建的项目的地址，也就是仓库的<code>SSH地址</code>，类似于<code>git@gitee.com:hhhh/hhhh.git</code></p>
<p>然后在Hexo配置文件_config.yml中找到deploy配置项，添加如下配置</p>
<blockquote>
<p>可多线部署，如下书写（单线部署可不写 <code>github</code>/<code>gitee</code>/<code>coding</code>）</p>
<p>记得冒号后有空格</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">      <span class="attribute">gitee</span>: git<span class="variable">@gitee</span>.<span class="attribute">hhhcom</span>:/hhh.git</span><br><span class="line">      <span class="attribute">github</span>: </span><br><span class="line">      <span class="attribute">coding</span>:</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<h4 id="2-4-添加SSH"><a href="#2-4-添加SSH" class="headerlink" title="2.4 添加SSH"></a>2.4 添加SSH</h4><p>在Gitee添加自己电脑的ssh key，这样每次更新代码到Gitee就不用再输入密码了</p>
<p>获取电脑的SSH可以参考   <a href="#mark-one">常见问题-1-1.8</a></p>
<p>然后在Gitee的设置页面找到安全设置–&gt;SSH公钥，用上一步获取的SSH创建一个新的公钥</p>
<blockquote>
<p>此处插播一条 little tip</p>
<p>上面的实现 <code>markdown</code>  自身链接跳转，下面给出所用代码：</p>
<p><code>&lt;a name=&quot;title&quot;&gt; &lt;/a&gt;</code></p>
<p><code>&lt;a href=&quot;#title&quot;&gt;&lt;/a&gt;</code></p>
</blockquote>
<h4 id="2-5-部署hexo"><a href="#2-5-部署hexo" class="headerlink" title="2.5 部署hexo"></a>2.5 部署hexo</h4><h4 id="2-6-开启Gitee-Pages服务"><a href="#2-6-开启Gitee-Pages服务" class="headerlink" title="2.6 开启Gitee Pages服务"></a>2.6 开启Gitee Pages服务</h4><ul>
<li>在项目主页找到服务，点击后可以看到Gitee Pages</li>
<li>点击跳转Gitee Pages服务页面，点击启动按钮开启服务</li>
<li>gitee pages会提示访问地址，然后就可以在浏览器输入<a href="https://hammerzer.gitee.io访问/">https://hammerzer.gitee.io访问</a></li>
</ul>
<h3 id="3-hexo双线部署在Gitee上出现的问题"><a href="#3-hexo双线部署在Gitee上出现的问题" class="headerlink" title="3. hexo双线部署在Gitee上出现的问题"></a>3. hexo双线部署在Gitee上出现的问题</h3><h4 id="3-1-在移动端出现点击事件失去默认行为"><a href="#3-1-在移动端出现点击事件失去默认行为" class="headerlink" title="3.1 在移动端出现点击事件失去默认行为"></a>3.1 在移动端出现点击事件失去默认行为</h4><blockquote>
<p>移动端区别于web端，有可能会默认阻止a标签默认行为，且在Web浏览器中调试时不会报错。</p>
<p>因此，只要换一种导航方式，即可。代码如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> href=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;href.length;i++)&#123;</span><br><span class="line">    href[i].ontouchend=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href=<span class="built_in">this</span>.getAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-解决-gitee-page-无法自动更新"><a href="#3-2-解决-gitee-page-无法自动更新" class="headerlink" title="3.2 解决 gitee page 无法自动更新"></a>3.2 解决 gitee page 无法自动更新</h4><blockquote>
<p>参考简书<a href="https://www.jianshu.com/p/6460df84a099">该博文</a></p>
</blockquote>
<blockquote>
<p>gitee page 只有付费版才能自动更新，免费版只能手动点击 “设置” 中的更新按钮</p>
</blockquote>
<p><strong>自动化解决方案</strong>：使用 puppeteer 操作浏览器进行更新按钮点击</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处安装版本为 1.8.0</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">giteeUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">        <span class="comment">// 此处可以使用 false 有头模式进行调试, 调试完注释即可</span></span><br><span class="line">          headless: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://gitee.com/login&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1. 选中账号控件</span></span><br><span class="line">    <span class="keyword">let</span> accountElements = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>) <span class="comment">// 此处使用 xpath 寻找控件，下同</span></span><br><span class="line">    <span class="comment">// 2. 填入账号</span></span><br><span class="line">    <span class="keyword">await</span> accountElements[<span class="number">0</span>].type(<span class="string">&#x27;你的 gitee 账户&#x27;</span>)</span><br><span class="line">    <span class="comment">// 3. 选中密码控件</span></span><br><span class="line">    <span class="keyword">let</span> pwdElements = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;user_password&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment">// 4. 填入密码</span></span><br><span class="line">    <span class="keyword">await</span> pwdElements[<span class="number">0</span>].type(<span class="string">&#x27;你的 gitee 密码&#x27;</span>)</span><br><span class="line">    <span class="comment">// 5. 点击登录</span></span><br><span class="line">    <span class="keyword">let</span> loginButtons = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;new_user&quot;]/div[2]/div/div/div[4]/input&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> loginButtons[<span class="number">0</span>].click()</span><br><span class="line">    <span class="comment">// 6. 等待登录成功</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;你的 gitee page 更新按钮页面&#x27;</span>); <span class="comment">// 比如： https://gitee.com/yang0033/hexo-blog/pages</span></span><br><span class="line">    <span class="comment">// 7.1. 监听步骤 7 中触发的确认弹框，并点击确认</span></span><br><span class="line">    <span class="keyword">await</span> page.on(<span class="string">&#x27;dialog&#x27;</span>, <span class="keyword">async</span> dialog =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;确认更新&#x27;</span>)</span><br><span class="line">        dialog.accept();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 7. 点击更新按钮，并弹出确认弹窗</span></span><br><span class="line">    <span class="keyword">let</span> updateButtons = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> updateButtons[<span class="number">0</span>].click()</span><br><span class="line">    <span class="comment">// 8. 轮询并确认是否更新完毕</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 8.1 获取更新状态标签</span></span><br><span class="line">            deploying = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;pages_deploying&quot;]&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (deploying.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;更新中...&#x27;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;更新完毕&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">500</span>);</span><br><span class="line">    <span class="comment">// 10.更新完毕，关闭浏览器</span></span><br><span class="line">    browser.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">giteeUpdate();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>尝试未成功，待更新</p>
</blockquote>
<h4 id="3-3-出现跨域请求失败503"><a href="#3-3-出现跨域请求失败503" class="headerlink" title="3.3 出现跨域请求失败503"></a>3.3 出现跨域请求失败503</h4><p>这种情况如果出现，修改网址为https，即可解决</p>
<h3 id="4-继静态压缩glup无果之后的替代"><a href="#4-继静态压缩glup无果之后的替代" class="headerlink" title="4. 继静态压缩glup无果之后的替代"></a>4. 继静态压缩glup无果之后的替代</h3><blockquote>
<p>参考该博主  <a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo瞎折腾系列</a></p>
</blockquote>
<h4 id="4-1-静态压缩的目的和手段"><a href="#4-1-静态压缩的目的和手段" class="headerlink" title="4.1 静态压缩的目的和手段"></a>4.1 静态压缩的目的和手段</h4><p>那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手： </p>
<ul>
<li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li>
<li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li>
<li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li>
</ul>
<h4 id="4-2-hexo的压缩静态资源插件"><a href="#4-2-hexo的压缩静态资源插件" class="headerlink" title="4.2 hexo的压缩静态资源插件"></a>4.2 hexo的压缩静态资源插件</h4><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p>
<p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href="https://segmentfault.com/a/1190000009544924#articleHeader8">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p>
<p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p>
<h4 id="4-3-如何使用hexo-neat"><a href="#4-3-如何使用hexo-neat" class="headerlink" title="4.3 如何使用hexo-neat"></a>4.3 如何使用hexo-neat</h4><blockquote>
<p><strong>在站点根目录下安装</strong>hexo-neat</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save1</span><br></pre></td></tr></table></figure>

<h4 id="4-4-为站点配置文件添加相关配置"><a href="#4-4-为站点配置文件添加相关配置" class="headerlink" title="4.4 为站点配置文件添加相关配置"></a>4.4 为站点配置文件添加相关配置</h4><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.js&#x27;</span><br><span class="line">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class="line">    - &#x27;**/index.js&#x27;  </span><br></pre></td></tr></table></figure>

<h4 id="4-5-hexo-neat插件踩坑记录"><a href="#4-5-hexo-neat插件踩坑记录" class="headerlink" title="4.5 hexo-neat插件踩坑记录"></a>4.5 hexo-neat插件踩坑记录</h4><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p>
<h5 id="4-5-1-跳过压缩文件的正确配置方式"><a href="#4-5-1-跳过压缩文件的正确配置方式" class="headerlink" title="4.5.1 跳过压缩文件的正确配置方式"></a>4.5.1 跳过压缩文件的正确配置方式</h5><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;1234</span><br></pre></td></tr></table></figure>

<h5 id="4-5-2-压缩html时不要跳过-md文件"><a href="#4-5-2-压缩html时不要跳过-md文件" class="headerlink" title="4.5.2 压缩html时不要跳过.md文件"></a>4.5.2 压缩html时不要跳过<code>.md</code>文件</h5><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>
<p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p>
<h5 id="4-5-3-压缩html时不要跳过-swig文件"><a href="#4-5-3-压缩html时不要跳过-swig文件" class="headerlink" title="4.5.3 压缩html时不要跳过.swig文件"></a>4.5.3 压缩html时不要跳过<code>.swig</code>文件</h5><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>
<h3 id="5-使用自定义的CSS样式"><a href="#5-使用自定义的CSS样式" class="headerlink" title="5. 使用自定义的CSS样式"></a>5. 使用自定义的CSS样式</h3><blockquote>
<p>参考 博主 <a href="https://segmentfault.com/a/1190000003846777">该文章</a></p>
</blockquote>
<p>想自定义About页面，需要使用自定义的css样式因为markdown支持html标签，使用自定义的CSS样式还是不错的。</p>
<p>下面总结一下具体的使用过程：</p>
<h4 id="5-1-添加样式支持"><a href="#5-1-添加样式支持" class="headerlink" title="5.1 添加样式支持"></a>5.1 添加样式支持</h4><p>为规范化开发，这里需要添加子集的样式文件。<br>首先，在样式文件的<code>source</code>文件夹下找到<code>css</code>文件夹，打开<code>main.styl</code>文件，在最后添加：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>My Layer</span><br><span class="line"><span class="regexp">//</span>--------------------------------------------------</span><br><span class="line">@import <span class="string">&quot;_my/mycss&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-新建自定义样式"><a href="#5-2-新建自定义样式" class="headerlink" title="5.2 新建自定义样式"></a>5.2 新建自定义样式</h4><p>找到样式文件夹<code>css</code> 新建<code>_my</code>文件夹，在其中新建<code>mycss.styl</code>文件，之后就可以按照stylus的格式自定义样式了。</p>
<h4 id="5-3-解决-gitee-page-更新后css仍然不变"><a href="#5-3-解决-gitee-page-更新后css仍然不变" class="headerlink" title="5.3 解决 gitee page 更新后css仍然不变"></a>5.3 解决 gitee page 更新后css仍然不变</h4><p>强制刷新浏览器 <code>Shift+F5</code>，这么傻的错误我居然还犯</p>
<h3 id="6-插入思维导图"><a href="#6-插入思维导图" class="headerlink" title="6. 插入思维导图"></a>6. 插入思维导图</h3><blockquote>
<p>参考 <a href="https://www.jianshu.com/p/1c4657f33899">简书</a></p>
</blockquote>
<h4 id="6-1-在hexo根目录下安装"><a href="#6-1-在hexo根目录下安装" class="headerlink" title="6.1 在hexo根目录下安装"></a>6.1 在hexo根目录下安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-simple-mindmap</span><br></pre></td></tr></table></figure>

<h4 id="6-2-在Markdown中使用思维导图"><a href="#6-2-在Markdown中使用思维导图" class="headerlink" title="6.2 在Markdown中使用思维导图"></a>6.2 在<code>Markdown</code>中使用思维导图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line">- Front End</span><br><span class="line">    - 任何方向</span><br><span class="line">        - 编程语言</span><br><span class="line">            - Java</span><br><span class="line">        - SQL</span><br><span class="line">        - Linux</span><br><span class="line">        - Git</span><br><span class="line">    - 技术</span><br><span class="line">        - Java Web</span><br><span class="line">        - 数据库</span><br><span class="line">        - Docker</span><br><span class="line">        - svn</span><br><span class="line">        - 消息队列(MQ)</span><br><span class="line">        - mycat</span><br><span class="line">        - 大数据</span><br><span class="line">            - Hadoop</span><br><span class="line">            - HBase</span><br><span class="line">    - 内功</span><br><span class="line">        - 计算机基础</span><br><span class="line">            - 计算机网络</span><br><span class="line">            - 计算机操作系统</span><br><span class="line">            - 编译原理</span><br><span class="line">            - 计算机组成原理</span><br><span class="line">        - 数据结构与算法</span><br><span class="line">        - 设计模式</span><br><span class="line">        - 性能优化</span><br><span class="line">        - 架构设计</span><br><span class="line">        - 软件工程</span><br><span class="line">    - 其他</span><br><span class="line">        - 英语</span><br><span class="line">        - 博客</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-4-存在的问题"><a href="#6-4-存在的问题" class="headerlink" title="6.4 存在的问题"></a>6.4 存在的问题</h4><p>搜集资料发现应该就这么操作就可以正确插入思维导图，然而我却遇到了很多问题。</p>
<h5 id="6-4-1-思维导图节点未被渲染"><a href="#6-4-1-思维导图节点未被渲染" class="headerlink" title="6.4.1 思维导图节点未被渲染"></a>6.4.1 思维导图节点未被渲染</h5><p>更新<code>gitee pages</code>服务之后，出现思维导图限制框，但思维导图的节点没有被渲染，仍然是以无序列表形式展现</p>
<p><code>console</code>报错未找到 <code>‘$’</code>，这么说应该是这个插件直接使用了<code>JQuery</code>但未引用</p>
<p><strong>解决办法一</strong>：直接把<code>jquery</code>下载到本地，放在<code>theme/source/js</code>下</p>
<p>然后再Markdown中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>解决办法二</strong>：使用cdn，使用时应注意应该使用 <code>https</code>传输，否则像<code>chrome</code>会默认阻止连接 <code>jquery cdn</code></p>
<p>例如我是把下面的代码在 <code>themes/next/layout/_partials/head/head.swig</code>中全局引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/2.0.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-插入流程图"><a href="#7-插入流程图" class="headerlink" title="7. 插入流程图"></a>7. 插入流程图</h3><p>安装hexo-filter-flowchart<br><code>npm install --save hexo-filter-flowchart</code></p>
<p>具体的流程图<code>Markdown</code>语法，见<a href="https://hammerzer.gitee.io/2020/08/26/markdown/">另一篇</a></p>
<h3 id="8-插入时序图"><a href="#8-插入时序图" class="headerlink" title="8. 插入时序图"></a>8. 插入时序图</h3><blockquote>
<p><a href="https://www.dazhuanlan.com/2019/12/24/5e0209fc19074/">参考源</a></p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://github.com/bubkoo/hexo-filter-sequence">hexo-filter-sequence</a> 插件:</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">npm install --<span class="keyword">save</span> hexo-filter-<span class="keyword">sequence</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>站点配置文件 <code>_config.yml</code> 中增加如下配置:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sequence:</span><br><span class="line">  webfon<span class="variable">t:</span> http<span class="variable">s:</span></span><br><span class="line">  raphae<span class="variable">l:</span> http<span class="variable">s:</span>//cdn.bootcss.<span class="keyword">com</span>/raphael/<span class="number">2.2</span>.<span class="number">7</span>/raphael.<span class="built_in">min</span>.js</span><br><span class="line">  underscore: http<span class="variable">s:</span>//cdn.bootcss.<span class="keyword">com</span>/underscore.js/<span class="number">1.8</span>.<span class="number">3</span>/underscore-<span class="built_in">min</span>.js</span><br><span class="line">  sequence: http<span class="variable">s:</span>//cdn.bootcss.<span class="keyword">com</span>/js-sequence-diagrams/<span class="number">1.0</span>.<span class="number">6</span>/sequence-diagram-<span class="built_in">min</span>.js</span><br><span class="line">  <span class="keyword">cs</span><span class="variable">s:</span> # optional, the url <span class="keyword">for</span> css, such <span class="keyword">as</span> hand drawn theme </span><br><span class="line">  option<span class="variable">s:</span> </span><br><span class="line">    theme: simple</span><br><span class="line">    css_clas<span class="variable">s:</span></span><br></pre></td></tr></table></figure>

<h4 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h4><p>源码修改后才能正常使用，进入插件目录作如下修改：</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">// index.js</span><br><span class="line">var assign = require(&#x27;deep-assign&#x27;);</span><br><span class="line">var renderer = require(&#x27;./lib/renderer&#x27;);</span><br><span class="line"></span><br><span class="line">hexo.config.sequence = assign(&#123;</span><br><span class="line">  <span class="attribute">webfont</span>: &#x27;https://cdn<span class="variable">.bootcss</span><span class="variable">.com</span>/webfont/1.6.28/webfontloader<span class="variable">.js</span>&#x27;,</span><br><span class="line">  raphael: &#x27;https://cdn<span class="variable">.bootcss</span><span class="variable">.com</span>/raphael/2.2.7/raphael<span class="variable">.min</span><span class="variable">.js</span>&#x27;,</span><br><span class="line">  underscore: &#x27;https://cdn<span class="variable">.bootcss</span><span class="variable">.com</span>/underscore<span class="variable">.js</span>/1.8.3/underscore-min<span class="variable">.js</span>&#x27;,</span><br><span class="line">  sequence: &#x27;https://cdn<span class="variable">.bootcss</span><span class="variable">.com</span>/js-sequence-diagrams/1.0.6/sequence-diagram-min<span class="variable">.js</span>&#x27;,</span><br><span class="line">  css: &#x27;&#x27;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    theme: &#x27;simple&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, hexo<span class="variable">.config</span><span class="variable">.sequence</span>);</span><br><span class="line"></span><br><span class="line"><span class="attribute">hexo.extend.filter.register(&#x27;before_post_render&#x27;, renderer.render, 9);</span></span><br><span class="line"><span class="attribute"></span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib/renderer.js, 25 行</span></span><br><span class="line"><span class="keyword">if</span> (sequences.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> config = <span class="keyword">this</span>.config.sequence;</span><br><span class="line">      <span class="comment">// resources</span></span><br><span class="line">      <span class="keyword">data</span>.content += <span class="string">&#x27;&lt;script src=&quot;&#x27;</span> + config.webfont + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">data</span>.content += <span class="string">&#x27;&lt;script src=&quot;&#x27;</span> + config.raphael + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">data</span>.content += <span class="string">&#x27;&lt;script src=&quot;&#x27;</span> + config.underscore + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">data</span>.content += <span class="string">&#x27;&lt;script src=&quot;&#x27;</span> + config.sequence + <span class="string">&#x27;&quot;&gt;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">      ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-插入mermiad-甘特图"><a href="#9-插入mermiad-甘特图" class="headerlink" title="9. 插入mermiad 甘特图"></a>9. 插入mermiad 甘特图</h3><blockquote>
<p><a href="https://blog.csdn.net/qq_36347375/article/details/90478335">Hexo引入Mermaid流程图和MathJax数学公式</a></p>
<p>参考上面的文章，这是我见过的少有的没有坑的文章，点个👍</p>
</blockquote>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>在<code>blog</code>根目录<em>安装mermaid插件</em></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-filter-mermaid-<span class="keyword">diagrams </span>--save  *<span class="comment"># 安装mermaid插件*</span></span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ul>
<li>修改主题theme中的<code>_config.yml</code> 内的 <code>mermaid</code> 模块为 <code>true</code></li>
<li>其实可以deploy一下看看可行否，不行再继续（我在这一步就可以正确显示）：在根目录下的<code>_config.yml</code>中添加</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># mermaid chart</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">mermaid:</span> <span class="meta">## mermaid url https:<span class="comment">//github.com/knsv/mermaid</span></span></span><br><span class="line"><span class="symbol">  enable:</span> true  <span class="meta"># default true</span></span><br><span class="line"><span class="symbol">  version:</span> <span class="string">&quot;7.1.2&quot;</span> <span class="meta"># default v7.1.2</span></span><br><span class="line"><span class="symbol">  options:</span>  <span class="meta"># find more api options from https:<span class="comment">//github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span></span></span><br><span class="line">    <span class="meta">#startOnload: true  <span class="comment">// default true</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>其实可以<code>deploy</code>一下看看可行否，不行再继续：编辑<code>blog/themes/next/layout/_partials/footer.swig</code>，在最后添加如下内容</li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;% if theme.mermaid.enable %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://unpkg.com/mermaid@</span></span></span><span class="template-variable">&#123;&#123; <span class="name">theme.mermaid.version</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/dist/mermaid.min.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    if (window.mermaid) &#123;</span></span><br><span class="line"><span class="xml">      mermaid.initialize(</span><span class="template-variable">&#123;&#123; <span class="name">JSON.stringify</span>(<span class="name">theme.mermaid.options</span>) &#125;&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://www.guide2it.com/post/2019-03-10-1-make-flowcharts-with-mermaid-in-markdown/">多样的Mermaid流程图参考</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tool &amp; Platform</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
        <tag>next使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2020/08/26/markdown/</url>
    <content><![CDATA[<blockquote>
<p>参考资料</p>
<ul>
<li><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md">markdown入门参考</a></li>
<li><a href="https://www.zybuluo.com/mdeditor">mdeditor</a> 一款国内的在线markdown编辑器</li>
<li><a href="http://bh-lay.github.io/mditor/">mditor</a> 一款轻量级的markdown编辑器</li>
<li><a href="https://www.miaoroom.com/?target/aHR0cHM6Ly9naXRodWIuY29tL2xlcHR1cmUvZWRpdG9y">lepture-editor</a></li>
<li><a href="https://www.miaoroom.com/?target/aHR0cHM6Ly9naXRodWIuY29tL2pidC9tYXJrZG93bi1lZGl0b3I=">markdown-editor</a></li>
</ul>
</blockquote>
<h2 id="一、关于Markdown"><a href="#一、关于Markdown" class="headerlink" title="一、关于Markdown"></a>一、关于Markdown</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="http://zh.wikipedia.org/wiki/Markdown">Wiki: Markdown</a></p>
<blockquote>
<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
</blockquote>
<a id="more"></a>

<h3 id="为什么选择-Markdown"><a href="#为什么选择-Markdown" class="headerlink" title="为什么选择 Markdown"></a>为什么选择 Markdown</h3><ul>
<li>它基于纯文本，方便修改和共享；</li>
<li>几乎可以在所有的文本编辑器中编写；</li>
<li>有众多编程语言的实现，以及应用的相关扩展；</li>
<li>在 <a href="https://github.com/">GitHub</a> 等网站中有很好的应用；</li>
<li>很容易转换为 HTML 文档或其他格式，兼容HTML；</li>
<li>适合用来编写文档、记录笔记、撰写文章。</li>
</ul>
<blockquote>
<p>‘.md’ 和 ‘.markdown’ 都是被普遍支持的扩展名，不过 ‘.md’ 更加简单和方便。</p>
</blockquote>
<h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-段落与换行"><a href="#2-1-段落与换行" class="headerlink" title="2.1 段落与换行"></a>2.1 段落与换行</h3><ul>
<li>段落的前后必须是空行：</li>
</ul>
<blockquote>
<p>空行指的是行内什么都没有，或者只有空白符（空格或制表符）</p>
</blockquote>
<blockquote>
<p>相邻两行文本，如果中间没有空行 会显示在一行中（换行符被转换为空格）</p>
</blockquote>
<ul>
<li>如果需要在段落内加入换行（<code>&lt;br&gt;</code>）：</li>
</ul>
<blockquote>
<p>可以在前一行的末尾加入至少两个空格<br>然后换行写其它的文字</p>
</blockquote>
<ul>
<li>Markdown 中的多数区块都需要在两个空行之间。</li>
</ul>
<h3 id="2-2-标题"><a href="#2-2-标题" class="headerlink" title="2.2 标题"></a>2.2 标题</h3><h4 id="Setext-形式"><a href="#Setext-形式" class="headerlink" title="Setext 形式"></a>Setext 形式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H1</span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">H2</span><br><span class="line">----</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>=</code> 和 <code>-</code> 的数量是没有限制的。通常的做法是使其和标题文本的长度相同，这样看起来比较舒服。或者可以像我一样，用四个 <code>-</code> 或 <code>=</code>。<br>Setext 形式只支持 <code>h1</code> 和 <code>h2</code> 两种标题。</p>
<p>使用 === 表示一级标题，使用 — 表示二级标题。(Setext 形式只支持 <code>h1</code> 和 <code>h2</code> 两种标题。)</p>
</blockquote>
<h4 id="atx-形式"><a href="#atx-形式" class="headerlink" title="atx 形式"></a>atx 形式</h4><p>① 可以用对称的 <code>#</code> 包括文本：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">####H4####</span></span><br><span class="line"></span><br><span class="line"><span class="section">#####H5#####</span></span><br></pre></td></tr></table></figure>

<p>② 也可以只在左边使用 <code>#</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">####H4</span></span><br><span class="line"></span><br><span class="line"><span class="section">#####H5</span></span><br></pre></td></tr></table></figure>

<p>③ 成对的 <code>#</code> 左侧和只在左边使用的 <code>#</code> 的情况：左侧都不可以有任何空白，但其内侧可以使用空白。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"> ###左侧使用了空格###</span><br><span class="line"></span><br><span class="line"><span class="section">#### 内侧使用了空格</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-引用"><a href="#2-3-引用" class="headerlink" title="2.3 引用"></a>2.3 引用</h3><h4 id="引用内容"><a href="#引用内容" class="headerlink" title="引用内容"></a>引用内容</h4><p>在段落或其他内容前使用 <code>&gt;</code> 符号，就可以将这段内容标记为 ‘引用’ 的内容（<code>&lt;blockquote&gt;</code>）</p>
<h4 id="多行引用"><a href="#多行引用" class="headerlink" title="多行引用"></a>多行引用</h4><blockquote>
<p>多行引用 可以在每行前加 <code>&gt;</code></p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;如果仅在第一行使用 <span class="code">`&gt;`</span>，</span><br><span class="line">后面相邻的行即使省略 <span class="code">`&gt;`</span>，也会变成引用内容</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果仅在第一行使用 <code>&gt;</code>， 后面相邻的行即使省略 <code>&gt;</code>，也会变成引用内容</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;如果引用内容需要换行，  </span><br><span class="line">&gt;可以在行尾添加两个空格</span><br><span class="line">&gt;</span><br><span class="line">&gt;或者在引用内容中加一个空行</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果引用内容需要换行，<br>可以在行尾添加两个空格</p>
<p>或者在引用内容中加一个空行</p>
</blockquote>
<h4 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以在引用中</p>
<blockquote>
<p>使用嵌套的引用</p>
</blockquote>
</blockquote>
<h3 id="2-4-列表"><a href="#2-4-列表" class="headerlink" title="2.4 列表"></a>2.4 列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用 *，+，- 表示无序列表。</p>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
<li>有序列表以数字和 <code>.</code> 开始；</li>
<li>数字的序列并不会影响生成的列表序列；</li>
<li>但仍然推荐按照自然顺序（1.2.3…）编写。</li>
</ol>
<h4 id="嵌套的列表"><a href="#嵌套的列表" class="headerlink" title="嵌套的列表"></a>嵌套的列表</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一层</span><br><span class="line"><span class="bullet">  +</span> 1-1</span><br><span class="line"><span class="bullet">  +</span> 1-2</span><br><span class="line"><span class="bullet">2.</span> 无序列表和有序列表可以随意相互嵌套</span><br><span class="line"><span class="bullet">  1.</span> 2-1</span><br><span class="line"><span class="bullet">  2.</span> 2-2</span><br></pre></td></tr></table></figure>

<ol>
<li>第一层<ul>
<li>1-1</li>
<li>1-2</li>
</ul>
</li>
<li>无序列表和有序列表可以随意相互嵌套<ol>
<li>2-1</li>
<li>2-2</li>
</ol>
</li>
</ol>
<h4 id="语法和用法"><a href="#语法和用法" class="headerlink" title="语法和用法"></a>语法和用法</h4><ol>
<li>无序列表项的开始是：符号 空格；</li>
<li>有序列表项的开始是：数字 <code>.</code> 空格；</li>
<li>空格至少为一个，多个空格将被解析为一个；</li>
<li>如果仅需要在行前显示数字和 <code>.</code>：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">05\. 可以使用：数字\. 来取消显示为列表</span><br></pre></td></tr></table></figure>

<p>\05. 可以使用：数字. 来取消显示为列表</p>
<h3 id="2-5-代码"><a href="#2-5-代码" class="headerlink" title="2.5 代码"></a>2.5 代码</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>可以使用缩进来插入代码块这里使用``````来包含多行代码：</p>
<p>代码块前后需要有至少一个空行，且每行代码前需要有至少一个 Tab 或四个空格；</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;html&gt;</span> <span class="comment">// Tab开头</span></span><br><span class="line">    <span class="params">&lt;title&gt;</span>Markdown<span class="params">&lt;/title&gt;</span></span><br><span class="line"><span class="params">&lt;/html&gt;</span> <span class="comment">// 四个空格开头</span></span><br></pre></td></tr></table></figure>

<h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p>也可以通过 ``，插入行内代码：</p>
<p>例如 <code>&lt;title&gt;Markdown&lt;/title&gt;</code></p>
<h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p>代码块中的文本（包括 Markdown 语法）都会显示为原始内容，而特殊字符会被转换为 HTML <a href="https://zh.wikipedia.org/wiki/XML%E4%B8%8EHTML%E5%AD%97%E7%AC%A6%E5%AE%9E%E4%BD%93%E5%BC%95%E7%94%A8%E5%88%97%E8%A1%A8">字符实体</a>。</p>
<h3 id="2-6-分隔线"><a href="#2-6-分隔线" class="headerlink" title="2.6 分隔线"></a>2.6 分隔线</h3><ul>
<li>可以在一行中使用三个或更多的 <code>*</code>、<code>-</code> 或 <code>_</code> 来添加分隔线（<code>&lt;hr&gt;</code>）</li>
<li>多个字符之间可以有空格（空白符），但不能有其他字符</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">-- -- --</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">__<span class="emphasis">_</span></span></span></span></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h3 id="2-7-超链接"><a href="#2-7-超链接" class="headerlink" title="2.7 超链接"></a>2.7 超链接</h3><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>格式为 <code>[link text](URL &#39;title text&#39;)</code>。</p>
<p>① 普通链接：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Google</span>](<span class="link">http://www.google.com/</span>)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.google.com/">Google</a></p>
<p>② 指向本地文件的链接：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">icon.png</span>](<span class="link">./images/icon.png</span>)</span><br></pre></td></tr></table></figure>

<p><a href="./images/icon.png">icon.png</a></p>
<p>③ 包含 ‘title’ 的链接:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Google</span>](<span class="link">http://www.google.com/ &quot;Google&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="http://www.google.com/">Google</a></p>
<blockquote>
<p>title 使用 ‘ 或 “ 都是可以的。</p>
</blockquote>
<h4 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h4><p>参考式链接的写法相当于行内式拆分成两部分，并通过一个 <em>识别符</em> 来连接两部分。参考式能尽量保持文章结构的简单，也方便统一管理 URL。</p>
<blockquote>
<p>参考式相对于行内式有一个明显的优点，就是可以在多个不同的位置引用同一个 URL。</p>
</blockquote>
<p>① 首先，定义链接：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol">link</span>]</span><br></pre></td></tr></table></figure>

<p><a href="http://www.google.com/">Google</a></p>
<p>第二个方括号内为链接独有的 <em>识别符</em>，可以是字母、数字、空白或标点符号。识别符是 <em>不区分大小写</em> 的；</p>
<p>② 然后定义链接内容：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">link</span>]: <span class="link">http://www.google.com/ &quot;Google&quot;</span></span><br></pre></td></tr></table></figure>

<p>其格式为：<code>[识别符]: URL &#39;title&#39;</code>。</p>
<blockquote>
<p>其中，URL可以使用 &lt;&gt; 包括起来，title 可以使用 “”、’’、() 包括（考虑到兼容性，建议使用引号），title 部分也可以换行来写；</p>
<p>链接内容的定义可以放在同一个文件的 <em>任意位置</em>；</p>
</blockquote>
<p>③ 也可以省略 <em>识别符</em>，使用链接文本作为 <em>识别符</em>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://www.google.com/ &quot;Google&quot;</span></span><br></pre></td></tr></table></figure>

<p><a href="http://www.google.com/">Google</a></p>
<h4 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h4><p>使用 <code>&lt;&gt;</code> 包括的 URL 或邮箱地址会被自动转换为超链接：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.google.com</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">123@email.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><a href="http://www.google.com/">http://www.google.com/</a></p>
<p><a href="mailto:123@email.com">123@email.com</a></p>
<p>该方式适合行内较短的链接，会使用 URL 作为链接文字。邮箱地址会自动编码，以逃避抓取机器人。</p>
<h3 id="2-8-图像"><a href="#2-8-图像" class="headerlink" title="2.8 图像"></a>2.8 图像</h3><p>插入图片的语法和插入超链接的语法基本一致，只是在最前面多一个 <code>!</code>。也分为行内式和参考式两种。</p>
<h4 id="行内式-1"><a href="#行内式-1" class="headerlink" title="行内式"></a>行内式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">GitHub</span>](<span class="link">https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100 &quot;GitHub,Social Coding&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>方括号中的部分是图片的替代文本，括号中的 ‘title’ 部分和链接一样，是可选的。</p>
<h4 id="参考式-1"><a href="#参考式-1" class="headerlink" title="参考式"></a>参考式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">GitHub</span>][<span class="symbol">github</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">github</span>]: <span class="link">https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100 &quot;GitHub,Social Coding&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="指定图片的显示大小"><a href="#指定图片的显示大小" class="headerlink" title="指定图片的显示大小"></a>指定图片的显示大小</h4><p>Markdown 不支持指定图片的显示大小，不过可以通过直接插入<code>&lt;img /&gt;</code>标签来指定相关属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;GitHub&quot;</span> <span class="attr">title</span>=<span class="string">&quot;GitHub,Social Coding&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-强调"><a href="#2-9-强调" class="headerlink" title="2.9 强调"></a>2.9 强调</h3><ul>
<li>使用 <code>* *</code> 或 <code>_ _</code> 包括的文本会被转换为 <code>&lt;em&gt;&lt;/em&gt;</code> ，通常表现为斜体：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是用来 <span class="emphasis">*演示*</span> 的 <span class="emphasis">_文本_</span></span><br></pre></td></tr></table></figure>

<p>这是用来 <em>演示</em> 的 <em>文本</em></p>
<ul>
<li>使用 <code>** **</code> 或 <code>__ __</code> 包括的文本会被转换为 <code>&lt;strong&gt;&lt;/strong&gt;</code>，通常表现为加粗：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是用来 <span class="strong">**演示**</span> 的 <span class="strong">__文本__</span></span><br></pre></td></tr></table></figure>

<p>这是用来 <strong>演示</strong> 的 <strong>文本</strong></p>
<ul>
<li><p>用来包括文本的 <code>*</code> 或 <code>_</code> 内侧不能有空白，否则 <code>*</code> 和 <code>_</code> 将不会被转换（不同的实现会有不同的表现）</p>
</li>
<li><p>如果需要在文本中显示成对的 <code>*</code> 或 <code>_</code>，可以在符号前加入 <code>\</code> 即可</p>
</li>
<li><p><code>*</code>、<code>**</code>、<code>_</code> 和 <code>__</code> 都必须 <em>成对使用</em> 。</p>
</li>
</ul>
<h3 id="2-9-字符转义"><a href="#2-9-字符转义" class="headerlink" title="2.9 字符转义"></a>2.9 字符转义</h3><p>  反斜线（<code>\</code>）用于插入在 Markdown 语法中有特殊作用的字符</p>
<p>  这些字符包括：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">\ `* _ &#123;&#125;<span class="selector-attr">[]</span>()#+. !</span><br></pre></td></tr></table></figure>



<h2 id="三、扩展语法"><a href="#三、扩展语法" class="headerlink" title="三、扩展语法"></a>三、扩展语法</h2><h3 id="3-1-内容目录"><a href="#3-1-内容目录" class="headerlink" title="3.1 内容目录"></a>3.1 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="3-2-标签分类"><a href="#3-2-标签分类" class="headerlink" title="3.2 标签分类"></a>3.2 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签： 数学 英语 Markdown</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">Tags： 数学 英语 Markdown</span><br></pre></td></tr></table></figure>

<h3 id="3-3-删除线"><a href="#3-3-删除线" class="headerlink" title="3.3 删除线"></a>3.3 删除线</h3><p>成对使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="3-4-注脚"><a href="#3-4-注脚" class="headerlink" title="3.4 注脚"></a>3.4 注脚</h3><p>使用 <code>[^keyword]</code> 表示注脚。</p>
<p>这是一个注脚<a href="1">^footnote</a>的样例。</p>
<p>这是第二个注脚<a href="2">^footnote2</a>的样例。</p>
<h3 id="3-5-LaTeX-公式"><a href="#3-5-LaTeX-公式" class="headerlink" title="3.5 LaTeX 公式"></a>3.5 LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="3-6-加强的代码块"><a href="#3-6-加强的代码块" class="headerlink" title="3.6 加强的代码块"></a>3.6 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<blockquote>
<p>格式如下：</p>
</blockquote>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`python</span></span><br><span class="line"><span class="string">@requires_authorization</span></span><br><span class="line"><span class="string">def somef</span></span><br><span class="line"><span class="string">.......................</span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span></span><br></pre></td></tr></table></figure>

<p>非代码示例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install vim-gnome</span><br></pre></td></tr></table></figure>

<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h3 id="3-7-表格支持"><a href="#3-7-表格支持" class="headerlink" title="3.7 表格支持"></a>3.7 表格支持</h3><h4 id="单元格和表头"><a href="#单元格和表头" class="headerlink" title="单元格和表头"></a>单元格和表头</h4><p>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">name | age</span><br><span class="line">---- | ---</span><br><span class="line">LearnShare | 12</span><br><span class="line">Mike |  32</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>LearnShare</td>
<td>12</td>
</tr>
<tr>
<td>Mike</td>
<td>32</td>
</tr>
</tbody></table>
<p>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 <code>|</code> 来标记单元格边界：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|    name    | age |</span><br><span class="line">| ---------- | --- |</span><br><span class="line">| LearnShare |  12 |</span><br><span class="line">| Mike       |  32 |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody><tr>
<td>LearnShare</td>
<td>12</td>
</tr>
<tr>
<td>Mike</td>
<td>32</td>
</tr>
</tbody></table>
<blockquote>
<p>为了使 Markdown 更清晰，<code>|</code> 和 <code>-</code> 两侧需要至少有一个空格（最左侧和最右侧的 <code>|</code> 外就不需要了）。</p>
</blockquote>
<h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>在表头下方的分隔线标记中加入 <code>:</code>，即可标记下方单元格内容的对齐方式：</p>
<ul>
<li><code>:---</code> 代表左对齐</li>
<li><code>:--:</code> 代表居中对齐</li>
<li><code>---:</code> 代表右对齐</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| left | center | right |</span><br><span class="line">| :--- | :----: | ----: |</span><br><span class="line">| aaaa | bbbbbb | ccccc |</span><br><span class="line">| a    | b      | c     |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">left</th>
<th align="center">center</th>
<th align="right">right</th>
</tr>
</thead>
<tbody><tr>
<td align="left">aaaa</td>
<td align="center">bbbbbb</td>
<td align="right">ccccc</td>
</tr>
<tr>
<td align="left">a</td>
<td align="center">b</td>
<td align="right">c</td>
</tr>
</tbody></table>
<blockquote>
<p>如果不使用对齐标记，单元格中的内容默认左对齐；表头单元格中的内容会一直居中对齐（不同的实现可能会有不同表现）。</p>
</blockquote>
<h4 id="插入其他内容"><a href="#插入其他内容" class="headerlink" title="插入其他内容"></a>插入其他内容</h4><p>表格中可以插入其他 Markdown 中的行内标记：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|     name     | age |             blog                |</span><br><span class="line">| ------------ | --- | ------------------------------- |</span><br><span class="line">| <span class="emphasis">_LearnShare_</span> |  12 | [<span class="string">LearnShare</span>](<span class="link">http://xianbai.me</span>) |</span><br><span class="line">| <span class="strong">__Mike__</span>     |  32 | [<span class="string">Mike</span>](<span class="link">http://mike.me</span>)          |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>name</th>
<th>age</th>
<th>blog</th>
</tr>
</thead>
<tbody><tr>
<td><em>LearnShare</em></td>
<td>12</td>
<td><a href="http://xianbai.me/">LearnShare</a></td>
</tr>
<tr>
<td><strong>Mike</strong></td>
<td>32</td>
<td><a href="http://mike.me/">Mike</a></td>
</tr>
</tbody></table>
<h3 id="3-8-Html-标签"><a href="#3-8-Html-标签" class="headerlink" title="3.8 Html 标签"></a>3.8 Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<table>
    <tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</table>


<h3 id="3-9-内嵌图标"><a href="#3-9-内嵌图标" class="headerlink" title="3.9 内嵌图标"></a>3.9 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="3-10-待办事宜-Todo-列表"><a href="#3-10-待办事宜-Todo-列表" class="headerlink" title="3.10 待办事宜 Todo 列表"></a>3.10 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input checked disabled type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input checked disabled type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input disabled type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input disabled type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked disabled type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked disabled type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked disabled type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<h3 id="3-11-流程图"><a href="#3-11-流程图" class="headerlink" title="3.11 流程图"></a>3.11 流程图</h3><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">​&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;flowchart-0&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;flow-chart&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<div id="flowchart-1" class="flow-chart"></div>


<h3 id="3-12-序列图"><a href="#3-12-序列图" class="headerlink" title="3.12 序列图"></a>3.12 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">​```squence</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<div id="sequence-0"></div>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">​```squence</span><br><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<div id="sequence-1"></div>
#### 示例 3
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">​```squence</span><br><span class="line">Title: <span class="keyword">Here</span> is a title</span><br><span class="line">A-&gt;B: <span class="keyword">Normal</span> line</span><br><span class="line">B--&gt;<span class="keyword">C</span>: <span class="keyword">Dashed</span> line</span><br><span class="line"><span class="keyword">C</span>-&gt;&gt;<span class="keyword">D</span>: <span class="keyword">Open</span> arrow</span><br><span class="line"><span class="keyword">D</span>--&gt;&gt;A: <span class="keyword">Dashed</span> open arrow</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>


<div id="sequence-2"></div>

<h3 id="3-13-甘特图"><a href="#3-13-甘特图" class="headerlink" title="3.13 甘特图"></a>3.13 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&lt;pre class&#x3D;&quot;mermaid&quot;&gt;    gantt</span><br><span class="line">    title 项目开发流程</span><br><span class="line">    section 项目确定</span><br><span class="line">        需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">        可行性报告     :after a1, 5d</span><br><span class="line">        概念验证       : 5d</span><br><span class="line">    section 项目实施</span><br><span class="line">        概要设计      :2016-07-05  , 5d</span><br><span class="line">        详细设计      :2016-07-08, 10d</span><br><span class="line">        编码          :2016-07-15, 10d</span><br><span class="line">        测试          :2016-07-22, 5d</span><br><span class="line">    section 发布验收</span><br><span class="line">        发布: 2d</span><br><span class="line">        验收: 3d</span><br><span class="line">​&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">gantt
 title 项目开发流程
    section 项目确定
        需求分析       :a1, 2016-06-22, 3d
        可行性报告     :after a1, 5d
        概念验证       : 5d
    section 项目实施
        概要设计      :2016-07-05  , 5d
        详细设计      :2016-07-08, 10d
        编码          :2016-07-15, 10d
        测试          :2016-07-22, 5d
    section 发布验收
        发布: 2d
        验收: 3d</pre>


<h3 id="3-14-Mermaid-流程图"><a href="#3-14-Mermaid-流程图" class="headerlink" title="3.14 Mermaid 流程图"></a>3.14 Mermaid 流程图</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">​&lt;pre <span class="built_in">class</span>=<span class="string">&quot;mermaid&quot;</span>&gt;graph LR</span><br><span class="line">A[方形] <span class="comment">--&gt;B(圆角)</span></span><br><span class="line">  B <span class="comment">--&gt; C&#123;条件a&#125;</span></span><br><span class="line">  C <span class="comment">--&gt;|a=1| D[结果1]</span></span><br><span class="line">  C <span class="comment">--&gt;|a=2| E[结果2]</span></span><br><span class="line">  F[横向流程图]</span><br><span class="line">​&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<pre class="mermaid">graph LR
A[方形] -->B(圆角)
  B --> C{条件a}
  C -->|a=1| D[结果1]
  C -->|a=2| E[结果2]
  F[横向流程图]</pre>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start:>https://www.zybuluo.com
io=>inputoutput: verification
op=>operation: Your Operation
cond=>condition: Yes or No?
sub=>subroutine: Your Subroutine
e=>end

st->io->op->cond
cond(yes)->e
cond(no)->sub->io
​</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: Start:>https://www.zybuluo.com
io=>inputoutput: verification
op=>operation: Your Operation
cond=>condition: Yes or No?
sub=>subroutine: Your Subroutine
e=>end

st->io->op->cond
cond(yes)->e
cond(no)->sub->io</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><script src="https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js"></script><script src="https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js"></script><script src="https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">对象A->对象B: 对象B你好吗?（请求）
Note right of 对象B: 对象B的描述
Note left of 对象A: 对象A的描述(提示)
对象B-->对象A: 我很好(响应)
对象A->对象B: 你真的好吗？</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">Alice->Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob-->Alice: I am good thanks!</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script><textarea id="sequence-2-code" style="display: none">Title: Here is a title
A->B: Normal line
B-->C: Dashed line
C->>D: Open arrow
D-->>A: Dashed open arrow</textarea><textarea id="sequence-2-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-2-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-2", options);</script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tool &amp; Platform</category>
      </categories>
      <tags>
        <tag>开发与调试</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>The Starting Point of Blogs</title>
    <url>/2020/08/18/The-Starting-Point-of-Blogs/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Moustache’s First Blog 介绍 <code>Hexo</code>+<code>Github Page</code>的步骤和遇到的问题，并在此列出参考的文章，衷心感谢。</p>
<ul>
<li><a href="https://blog.csdn.net/jiunian_2761/article/details/97388534">Hexo博客搭建记录（一）：本地搭建以及部署到Github</a></li>
<li><a href="https://blog.csdn.net/jiunian_2761/article/details/97388745Hexo">博客搭建记录（二）：基本主题设置以及美化</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30836436">Hexo+Next主题优化</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo官方文档</a></li>
</ul>
<a id="more"></a>

<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ul>
<li>Node.js</li>
<li>Npm</li>
<li>Git</li>
</ul>
<h2 id="二、配置本地Hexo"><a href="#二、配置本地Hexo" class="headerlink" title="二、配置本地Hexo"></a>二、配置本地Hexo</h2><h3 id="1-配置hexo全局控制命令"><a href="#1-配置hexo全局控制命令" class="headerlink" title="1.配置hexo全局控制命令"></a>1.配置hexo全局控制命令</h3><p>​    在cmd或者其他命令行工具下输入如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<h3 id="2-下载Hexo-工具"><a href="#2-下载Hexo-工具" class="headerlink" title="2.下载Hexo 工具"></a>2.下载Hexo 工具</h3><h4 id="2-1初始化博客目录"><a href="#2-1初始化博客目录" class="headerlink" title="2.1初始化博客目录"></a>2.1初始化博客目录</h4><p>在准备好的一个目录下存放自己的博客网站文件，例如我的是 <strong>/e/blog</strong>，也就是在E盘根目录新建了一个<strong>blog</strong>文件夹</p>
<p>然后我们进入该目录，点击鼠标右键，然后点击 <code>git bash</code> 出现一个命令窗口，接下来我们的大多数操作都用它来完成。</p>
<blockquote>
<p><code>Git Bash</code>在这里并不是唯一的选择，如您熟悉其他命令工具，也可以使用其他工具，这里使用<code>Git Bash</code>是为了减少更多不必要的麻烦</p>
</blockquote>
<p>在 <code>Git Bash</code>窗口下输入如下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>按下回车Enter，<code>Git bash</code> 会自动下载相关文件</p>
<h4 id="2-2-本地生成运行"><a href="#2-2-本地生成运行" class="headerlink" title="2.2 本地生成运行"></a>2.2 本地生成运行</h4><p>在<code>Git Bash</code>窗口下，依次执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这样，Hexo会默认运行在你本机的4000端口上，然后我们在浏览器中输入<code>http://localhost:4000</code>即可显示主题为<code>landscaped</code> 的页面</p>
<h2 id="三、部署到GitPage"><a href="#三、部署到GitPage" class="headerlink" title="三、部署到GitPage"></a>三、部署到GitPage</h2><blockquote>
<p>这个步骤开始前，请确保你已经注册了Github账号，且已经配置好了相关信息，配置方法请向上翻阅 <strong>二、安装Git</strong> 环节下。</p>
</blockquote>
<h3 id="1-在Github创建仓库。"><a href="#1-在Github创建仓库。" class="headerlink" title="1.在Github创建仓库。"></a>1.在Github创建仓库。</h3><p>打开 <a href="https://github.com/">Github官网</a> 登陆你的Github账号，点击页面右上角的 <code>+</code> 、<code>New repository</code>新建一个<code>repository</code>仓库</p>
<blockquote>
<p>为避免麻烦，这里仓库名必须按照<code>yourusername.github.io</code>规范填写，填写完仓库名后，我们点击<code>Create repository</code>按钮，然后等待其创建完成。复制该项目的HTTP链接<code>https://github.com/yourusername/yourusername.github.io.git</code></p>
</blockquote>
<blockquote>
<p><code>yourusername</code>指的就是你的github用户名，本文中出现的该字段都表示这个意思。</p>
</blockquote>
<h3 id="2-Hexo-配置"><a href="#2-Hexo-配置" class="headerlink" title="2.Hexo 配置"></a>2.Hexo 配置</h3><p>打开 <code>Git Bash</code> 切换到博客的根目录，输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-depolyer-git --save    </span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>

<p>进入站点配置文件编辑模式，我们向下翻到底部，可以看到 <code>depoly</code> 字段</p>
<p>在英文输入模式下，按键盘上的 <code>i</code>键进入编辑模式，将<code>depoly</code>字段编辑如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">          github: https:<span class="comment">//github.com/yourusername/yourusername.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意这里<code>:</code>后面一定要加空格，不然会出错。</p>
<p>然后我们按<code>Esc</code> 键，输入<code>:wq</code> 保存退出</p>
<h3 id="3-完成部署"><a href="#3-完成部署" class="headerlink" title="3.完成部署"></a>3.完成部署</h3><p>在命令行输入并执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其中，<code>hexo d</code> 则是将本地文件推送到远程。</p>
<p>在第一次推送时，需要输入github  <code>userNam</code>e和<code>password</code></p>
<h2 id="四、使用Next主题"><a href="#四、使用Next主题" class="headerlink" title="四、使用Next主题"></a>四、使用Next主题</h2><h3 id="1-更改主题"><a href="#1-更改主题" class="headerlink" title="1. 更改主题"></a>1. 更改主题</h3><p><a href="https://hexo.io/themes/">Hexo主题库</a>可以找到更多主题，以下以Next为例</p>
<blockquote>
<p>在Hexo目录下有两份重要的配置文件，其名称都是<code>_config.yml</code> 。其中，一份位于站点根目录下，主要包含<code>Hexo</code>的自身配置，另一份位于主题目录下，主要用于配置主题相关的选项。<br>在接下来的描述中，我将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong> 。</p>
</blockquote>
<h4 id="1-1-安装Next"><a href="#1-1-安装Next" class="headerlink" title="1.1 安装Next"></a>1.1 安装Next</h4><p>安装Next主题的方式很简单，利用Git bash 在博客主目录下执行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>然后我们打开站点配置文件，将theme属性从默认值landscape改为next</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>记住，所有的配置属性<code>:</code> 后面都要加一个空格,这样我们设定的值才会生效。</p>
</blockquote>
<h4 id="1-2-选择不同的Next主题样式"><a href="#1-2-选择不同的Next主题样式" class="headerlink" title="1.2 选择不同的Next主题样式"></a>1.2 选择不同的Next主题样式</h4><p>Next提供了四种主题风格scheme,可以在主题配置文件中配置：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># Scheme Settings</span></span><br><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>这里个人选择 <code>Gemini</code></p>
<h3 id="2-更改站点属性"><a href="#2-更改站点属性" class="headerlink" title="2. 更改站点属性"></a>2. 更改站点属性</h3><h4 id="2-1-更改网站名、语言、作者"><a href="#2-1-更改网站名、语言、作者" class="headerlink" title="2.1 更改网站名、语言、作者"></a>2.1 更改网站名、语言、作者</h4><p>打开站点配置文件，找到<code>site</code>字段，具体修改如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 设置网站属性信息</span></span><br><span class="line"><span class="meta"># Site:</span></span><br><span class="line"><span class="symbol">title:</span> 小白的博客 <span class="meta">#网站标题（博客站点名字）。</span></span><br><span class="line"><span class="symbol">subtitle:</span> 小小白 <span class="meta">#网站副标题，显示在标题下方</span></span><br><span class="line"><span class="symbol">description:</span> 我是小白 <span class="meta">#个人描述，类似签名，用于搜索引擎对站点的描述，建议在里面加上你的站点的关键词</span></span><br><span class="line"><span class="symbol">keywords:</span> </span><br><span class="line"><span class="symbol">author:</span> 小白 <span class="meta">#博客文章作者</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN  <span class="meta">#设置博客站点语言为中文</span></span><br><span class="line"><span class="symbol">timezone:</span>  <span class="meta">#设置时区，默认当前电脑时区 一般设置为 Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-更改blog-favicon"><a href="#2-2-更改blog-favicon" class="headerlink" title="2.2 更改blog favicon"></a>2.2 更改blog favicon</h4><p>博客网站的图标可以在<a href="https://www.easyicon.net/">easyicon</a>、<a href="http://www.bitbug.net/">bitbug</a>、<a href="https://www.iconfont.cn/plus/user/detail?uid=41718">iconfont</a>等网站选择和制作，然后选择或者创建相应大小的图标文件，放置在blog/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span>  </span><br><span class="line"><span class="symbol">    small:</span> <span class="meta-keyword">/images/</span><span class="number">16</span>x16.png  </span><br><span class="line"><span class="symbol">    medium:</span> <span class="meta-keyword">/images/</span><span class="number">32</span>x32.png  </span><br><span class="line"><span class="symbol">    apple_touch_icon:</span> <span class="meta-keyword">/images/</span><span class="number">128</span>x128.png  </span><br><span class="line"><span class="symbol">    safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo2.svg</span><br></pre></td></tr></table></figure>

<h3 id="3-菜单栏"><a href="#3-菜单栏" class="headerlink" title="3. 菜单栏"></a>3. 菜单栏</h3><h4 id="3-1-显示更多栏目"><a href="#3-1-显示更多栏目" class="headerlink" title="3.1 显示更多栏目"></a>3.1 显示更多栏目</h4><p>在主题配置文件中修改如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home <span class="meta"># 首页</span></span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user <span class="meta"># 关于</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags <span class="meta"># 标签</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th <span class="meta"># 分类</span></span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive  <span class="meta"># 归档</span></span><br><span class="line">  <span class="meta"># schedule: /schedule/ || calendar # 日历</span></span><br><span class="line">  <span class="meta"># sitemap: /sitemap.xml || sitemap # 站点地图</span></span><br><span class="line">  <span class="meta"># commonweal: /404/ || heartbeat # 腾讯公益404</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-图标和内容量"><a href="#3-2-图标和内容量" class="headerlink" title="3.2 图标和内容量"></a>3.2 图标和内容量</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span> <span class="comment"># 是否显示各个页面的图标</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span> <span class="comment"># 是否显示分类/标签/归档页的内容量</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-添加分类、标签、关于菜单项"><a href="#3-3-添加分类、标签、关于菜单项" class="headerlink" title="3.3 添加分类、标签、关于菜单项"></a>3.3 添加分类、标签、关于菜单项</h4><p>首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br></pre></td></tr></table></figure>


<p>需运行如下命令新建相关页面</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;about&quot;</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开各页面对应的index.md文件，编辑如下内容</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">title</span>: about  # 在页面中显示的title</span><br><span class="line"><span class="attribute">date</span>: <span class="number">2019</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">19</span>:<span class="number">16</span>:<span class="number">17</span></span><br><span class="line"><span class="attribute">type</span>: <span class="string">&quot;about&quot;</span>  # 为固定内容，其他对应  <span class="string">&quot;tags&quot;</span>  <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后在发布的博文开头添加<code>tag</code>s和<code>categories</code>,如：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: The Starting Point of Blogs</span><br><span class="line">urlname: The Starting Point of Blogs</span><br><span class="line">date: 2020<span class="string">-08</span><span class="string">-18</span> 13:56:39</span><br><span class="line"><span class="keyword">tags:</span> [hexo部署,next使用]   #new</span><br><span class="line">categories: Tool&amp;Platform   #new</span><br></pre></td></tr></table></figure>

<h4 id="3-4-本地搜索"><a href="#3-4-本地搜索" class="headerlink" title="3.4 本地搜索"></a>3.4 本地搜索</h4><p>在你站点的根目录下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>打开 <code>Hexo</code> 站点的 <code>_config.yml</code>,添加配置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>local_search</code> ,设置为 <code>true</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<h3 id="4-侧边栏"><a href="#4-侧边栏" class="headerlink" title="4. 侧边栏"></a>4. 侧边栏</h3><p>以下设置都是在 <strong>主题配置</strong> 文件中</p>
<h4 id="4-1-显示可跳转-日志-分类-标签页-的链接"><a href="#4-1-显示可跳转-日志-分类-标签页-的链接" class="headerlink" title="4.1 显示可跳转 日志 / 分类 / 标签页 的链接"></a>4.1 显示可跳转 日志 / 分类 / 标签页 的链接</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-社交信息设置"><a href="#4-2-社交信息设置" class="headerlink" title="4.2 社交信息设置"></a>4.2 社交信息设置</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">social</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/yourname || github</span></span><br><span class="line">  <span class="number">#E</span><span class="attribute">-Mail</span>: <span class="attribute">mailto</span>:yourname<span class="variable">@gmail</span>.com || envelope</span><br><span class="line">  <span class="attribute">Weibo</span>: <span class="attribute">https</span>:<span class="comment">//weibo.com/yourname || weibo</span></span><br><span class="line">  #<span class="attribute">Google</span>: <span class="attribute">https</span>:<span class="comment">//plus.google.com/yourname || google</span></span><br><span class="line">  #<span class="attribute">Twitter</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="number">#FB</span> <span class="attribute">Page</span>: <span class="attribute">https</span>:<span class="comment">//www.facebook.com/yourname || facebook</span></span><br><span class="line">  #VK <span class="attribute">Group</span>: <span class="attribute">https</span>:<span class="comment">//vk.com/yourname || vk</span></span><br><span class="line">  #<span class="attribute">StackOverflow</span>: <span class="attribute">https</span>:<span class="comment">//stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  #<span class="attribute">YouTube</span>: <span class="attribute">https</span>:<span class="comment">//youtube.com/yourname || youtube</span></span><br><span class="line">  #<span class="attribute">Instagram</span>: <span class="attribute">https</span>:<span class="comment">//instagram.com/yourname || instagram</span></span><br><span class="line">  #<span class="attribute">Skype</span>: <span class="attribute">skype</span>:yourname?call|chat || skype</span><br></pre></td></tr></table></figure>

<p>Next 默认给出了一些模板，我们只要将其中的链接改为自己的链接就可以了，当然你也可以自己定义，格式为</p>
<p>名字: 链接 || 图标名，图标必须是<a href="http://fontawesome.dashgame.com/">FontAwesome</a>网站中能找到的图标名。</p>
<p>例如我添加我的博客地址：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">qianfanguojin:</span> <span class="attr">https:</span><span class="comment">//qianfanguojin.github.io/ || codepen </span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-圆形头像设置"><a href="#4-3-圆形头像设置" class="headerlink" title="4.3 圆形头像设置"></a>4.3 圆形头像设置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span> <span class="comment">#头像文件目录</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment">#设置鼠标放在头像上面是否旋转</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment">#头像是否设为圆形</span></span><br></pre></td></tr></table></figure>

<p>将自己喜欢的头像头像按照需求自己更换自己喜欢的就可以了，不过这里要注意一下头像可能会变成椭圆，如果头像是椭圆的，是因为图片不是一个正方形的图片，找到一个宽高像素一样的的图片即可。</p>
<h5 id="设置头像边框为圆形框"><a href="#设置头像边框为圆形框" class="headerlink" title="设置头像边框为圆形框"></a>设置头像边框为圆形框</h5><p>打开位于 <code>themes/next/source/css/_common/components/sidebar/sidebar-author.syl</code> 文件,修改如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-设置侧边栏社交图标"><a href="#4-4-设置侧边栏社交图标" class="headerlink" title="4.4 设置侧边栏社交图标"></a>4.4 设置侧边栏社交图标</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href="https://link.zhihu.com/?target=http://fontawesome.dashgame.com/">Font Awesome</a>图标</p>
<h4 id="4-5-RSS"><a href="#4-5-RSS" class="headerlink" title="4.5 RSS"></a>4.5 RSS</h4><p>在你 <code>Hexo</code> 站点目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>打开 <code>Hexo</code> 站点下的 <code>_config.yml</code> ,添加如下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># feed</span><br><span class="line"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br></pre></td></tr></table></figure>

<h4 id="4-6-友情链接"><a href="#4-6-友情链接" class="headerlink" title="4.6 友情链接"></a>4.6 友情链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>Blog rolls</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_title: 友情链接 #标题</span><br><span class="line">links_layout: block #布局，一行一个连接</span><br><span class="line">#links_layout: inline</span><br><span class="line">links: #连接</span><br><span class="line">  baidu: http://example.com/</span><br><span class="line">  google: http://example.com/</span><br></pre></td></tr></table></figure>

<h4 id="4-7-配置解读"><a href="#4-7-配置解读" class="headerlink" title="4.7 配置解读"></a>4.7 配置解读</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#自动生成目录</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span> <span class="comment">#自动产生目录编号</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span> <span class="comment">#标题过长是否换行</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span> <span class="comment"># 是否显示所有等级的目录项。</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span> <span class="comment">#最大标题嵌套个数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.#侧边栏的位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span> <span class="comment"># 侧边栏相对主菜单的像素距离</span></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span> <span class="comment">#在手机上侧边栏是否显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回顶部</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span>  <span class="comment">#侧边栏显示返回顶部信息,默认显示在页面右下方</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="comment">#显示百分比</span></span><br></pre></td></tr></table></figure>

<h3 id="5-页面设置"><a href="#5-页面设置" class="headerlink" title="5. 页面设置"></a>5. 页面设置</h3><h4 id="5-1-鼠标点击红心"><a href="#5-1-鼠标点击红心" class="headerlink" title="5.1 鼠标点击红心"></a>5.1 鼠标点击红心</h4><p>目前网上大多数文章都是在<code>themes/next/source/js/src</code> 下新建文件，但笔者写这篇文章时最新版Next已经没有<code>src</code>文件夹了 ，于是，我们可以在<code>themes/next/source/js/</code>下新建<code>clicklove.js</code>内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>然后在修改<code>themes/next/layout/_layout.swig</code> 文件末尾添加</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.clicklove %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意</p>
<blockquote>
<p>很多人配置正确但不显示的原因主要出在这里，也就是<code>src</code> 后面的文件链接错误，hexo中使用的是相对路径，也就是说,只要你不指定为绝对路径,设置的链接都将是<code>root+url</code>的形式，一般来说，大多数用户默认的<code>root</code> 都为<code>/</code> ，但是有些情况，例如设置了Git Page ,要修改<code>root</code>的路径，<code>root</code>路径我们可以在 <strong>站点配置文件</strong> 中找到：</p>
</blockquote>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">\## <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">&#x27;http://yoursite.com/child&#x27;</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">&#x27;/child/&#x27;</span></span><br><span class="line">url: http:<span class="comment">//yoursite.com</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line"> trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;index.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br><span class="line"> trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></table></figure>

<p><img data-src="problem1.jpg"></p>
<p>上图就是在我设置了Git Page后 <code>root</code>路径的值，在这种情况下，我们在修改<code>themes/next/layout/_layout.swig</code> 文件时，<code>src</code> 的路径都应该加上<code>root</code> 的路径值，因此，在这种情况下代码应修改为：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.clicklove %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/fa/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>确定无误后最后在主题配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示页面红心</span></span><br><span class="line"><span class="attr">clicklove:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外还有一个效果，跟那个红心是差不多的（只能选一个），首先在<code>themes/next/source/js/src</code>里面建一个叫<code>fireworks.js</code>的文件，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.fireworks %&#125;</span><span class="xml">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>打开主题配置文件，在里面最后写下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-添加动态背景"><a href="#5-2-添加动态背景" class="headerlink" title="5.2 添加动态背景"></a>5.2 添加动态背景</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置动态背景</span></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">170</span> <span class="comment"># the number of lines</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">false</span> <span class="comment"># Set true to further delay loading</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<p>新版Next已经支持了上面三种动态背景方式，大家想用哪种就将该项的<code>enable</code> 设为 <code>true</code>,具体效果大家自己尝试，一般用的是第一种。</p>
<p>当然，指明要用那种，但是Next没有自带该动画的包，我们要自己下载，链接就在注释中<code># Dependencies</code> 项后面 ，例如我下载第一种：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-canvas-nest themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span></span></span><br></pre></td></tr></table></figure>

<p>链接后的是指定下载后放到的文件夹名，大家要注意是放在<code>lib</code> 下且文件夹名字应该和上面的设置项名字一样。</p>
<h5 id="个人使用了canvas-ribbon的背景，且优先使用cdn引入"><a href="#个人使用了canvas-ribbon的背景，且优先使用cdn引入" class="headerlink" title="个人使用了canvas-ribbon的背景，且优先使用cdn引入"></a>个人使用了<code>canvas-ribbon</code>的背景，且优先使用cdn引入</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line"> <span class="attr">alpha:</span> <span class="number">0.4</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line"> <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">\<span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">canvas_ribbon: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>theme-<span class="keyword">next</span><span class="regexp">/theme-next-canvas-    ribbon@1/</span>canvas-ribbon.js</span><br><span class="line">\<span class="comment"># canvas_ribbon:</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-博客底部基本布局"><a href="#5-3-博客底部基本布局" class="headerlink" title="5.3 博客底部基本布局"></a>5.3 博客底部基本布局</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博客底部布局</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2015 #设置建站时间，不设置则默认为当前年份</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">heart</span>  <span class="comment"># 作者图标，默认为author，自定义的图标需来自fontawesome中</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span>  <span class="comment"># 图标是否闪动</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span> <span class="comment"># 图标颜色</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">小白</span> <span class="comment">#设置底部显示的名字，默认为站点配置文件的author名字</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Powered By Hexo</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Hexo 版本</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示主题信息</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span> <span class="comment"># 是否显示主题版本</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP information for Chinese users. See: http://www.beian.miit.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示网站备案信息</span></span><br><span class="line">    <span class="attr">icp:</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4-底部显示busuanzi博客访客-访问次数统计"><a href="#5-4-底部显示busuanzi博客访客-访问次数统计" class="headerlink" title="5.4 底部显示busuanzi博客访客/访问次数统计"></a>5.4 底部显示busuanzi博客访客/访问次数统计</h4><p>修改主题配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不蒜子统计功能</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启busuanzi统计功能</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span> <span class="comment"># 是否统计总访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span> <span class="comment"># 访客数图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span> <span class="comment"># 是否显示同级总访问次数</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span> <span class="comment"># 总访问次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span> <span class="comment"># 是否显示单个文章查看次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span> <span class="comment"># 文章被查看次数的图标</span></span><br></pre></td></tr></table></figure>

<h4 id="5-5-右上角显示Github标识"><a href="#5-5-右上角显示Github标识" class="headerlink" title="5.5 右上角显示Github标识"></a>5.5 右上角显示Github标识</h4><p>修改主题配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="comment"># Github 跳转图标</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span> <span class="comment"># Github主页地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span> <span class="comment"># 鼠标悬停显示的文字</span></span><br></pre></td></tr></table></figure>

<h4 id="5-6-接入网易云播放器"><a href="#5-6-接入网易云播放器" class="headerlink" title="5.6 接入网易云播放器"></a>5.6 接入网易云播放器</h4><p>首先在网易云音乐网页端搜索你想播放的音乐（有版权保护的不行）</p>
<p>在网易云客户端点击生成外链播放器，得到外链的html代码：</p>
<p>后我们将代码粘贴到一个合适的位置，建议在侧边栏，对应的文件是<code>themes/next/layout/_macro/sidebar.swig</code> ，不同的位置效果呈现的效果不同，例如我的：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-overview-wrap sidebar-panel&#123;% if not display_toc or toc(page.content).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;&quot;</span>&gt;</span>         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-overview&quot;</span>&gt;</span>            </span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name"><span class="builtin-name">partial</span></span>(<span class="name">&#x27;_partials/sidebar/site-overview.swig&#x27;</span>, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><span class="xml">                      </span></span><br><span class="line"><span class="xml">    &#123;% for inject_item in theme.injects.sidebar %&#125;             </span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name"><span class="builtin-name">partial</span></span>(<span class="name">inject_item.layout</span>, inject_item.locals, inject_item.options) &#125;&#125;</span><span class="xml">           &#123;% endfor %&#125;         </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>         </span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--网易云链接--&gt;</span>         </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="5-7-浏览页面的时候显示当前浏览进度"><a href="#5-7-浏览页面的时候显示当前浏览进度" class="headerlink" title="5.7 浏览页面的时候显示当前浏览进度"></a>5.7 浏览页面的时候显示当前浏览进度</h4><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h4 id="5-8-添加顶部加载条"><a href="#5-8-添加顶部加载条" class="headerlink" title="5.8 添加顶部加载条"></a>5.8 添加顶部加载条</h4><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code> ,设置为 <code>true</code> ,可以更换加载样式：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Dependencies: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-pace</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-flash #替换更换样式</span><br></pre></td></tr></table></figure>

<h4 id="5-9-自定义鼠标样式"><a href="#5-9-自定义鼠标样式" class="headerlink" title="5.9 自定义鼠标样式"></a>5.9 自定义鼠标样式</h4><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p>
<h3 id="6-文章内容相关"><a href="#6-文章内容相关" class="headerlink" title="6 文章内容相关"></a>6 文章内容相关</h3><h4 id="6-1-文章摘要显示（显示阅读全文按钮）"><a href="#6-1-文章摘要显示（显示阅读全文按钮）" class="headerlink" title="6.1 文章摘要显示（显示阅读全文按钮）"></a>6.1 文章摘要显示（显示阅读全文按钮）</h4><ul>
<li><p>自动形成摘要模式</p>
<p>打开主题配置文件，修改内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span> <span class="comment"># 截取的内容长度</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button would be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span> <span class="comment"># 是否显示阅读全文按钮  </span></span><br></pre></td></tr></table></figure>

<p>但是这样的方式不够自由，我们可以使用如下方式：</p>
</li>
</ul>
<h4 id="6-2-代码块设置"><a href="#6-2-代码块设置" class="headerlink" title="6.2 代码块设置"></a>6.2 代码块设置</h4><p>使用参照如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码块设置</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="comment"># 代码块主题, 可选的值为 normal; night; night eighties; night blue; night bright</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy_button on codeblock</span></span><br><span class="line">  <span class="comment"># 显示复制按钮</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span>  <span class="comment"># 按钮显示格式</span></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>

<p>代码块样式的具体内容可以查看<a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme">官方文档</a></p>
<h4 id="6-3-添加打赏"><a href="#6-3-添加打赏" class="headerlink" title="6.3 添加打赏"></a>6.3 添加打赏</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># 打赏设置</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward would be displayed in every article by default.</span></span><br><span class="line">  <span class="comment"># You can show or hide reward in a specific article throuth `reward: true | false` in Front-matter.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span> <span class="comment"># 动画</span></span><br><span class="line">  <span class="comment">#comment: Donate comment here.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png # 微信捐赠二维码图片</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png # 支付宝捐赠二维码图片</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png # 比特币</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-添加版权信息"><a href="#6-4-添加版权信息" class="headerlink" title="6.4 添加版权信息"></a>6.4 添加版权信息</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span> <span class="comment"># 许可协议</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏显示</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 文章底部显示</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<p>注意</p>
<blockquote>
<p>版权信息中的本文链接 由主题配置中的   <code>url</code>   控制</p>
</blockquote>
<h4 id="6-5-自定义文章底部版权声明"><a href="#6-5-自定义文章底部版权声明" class="headerlink" title="6.5 自定义文章底部版权声明"></a>6.5 自定义文章底部版权声明</h4><p>效果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">作者：Dragonstyle</span><br><span class="line">链接：http://www.dragonstyle.win/2017/09/06/Android-Studio个人设置/</span><br><span class="line">來源：简书</span><br><span class="line">版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure>

<p>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ,内容如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&#x27;.fa-clipboard&#x27;);</span><br><span class="line">    clipboard.on(&#x27;success&#x27;, $(function()&#123;</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#x27;复制成功&#x27;,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: 500,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在目录 <code>themes/next/source/css/_common/components/post/</code> 下添加 <code>my-post-copyright.styl</code>,内容如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #333333; // title color</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #0593d3; // link color</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>themes/next/layout/_macro/post.swig</code> ,在代码如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;% include &#x27;wechat-subscriber.swig&#x27; %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>之前添加增加如下代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &#x27;my-copyright.swig&#x27; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>修改 <code>themes/next/source/css/_common/components/post/post.styl</code> 文件，在最后一行增加代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>

<p>设置新建文章自动开启</p>
<p><code>copyright</code>,即新建文章自动显示自定义的版权声明,设置 <code>your site/scaffolds/post.md</code>文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">categories:</span><br><span class="line">copyright: true #新增,开启</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="6-6-添加图片"><a href="#6-6-添加图片" class="headerlink" title="6.6 添加图片"></a>6.6 添加图片</h4><ol>
<li><p><strong>设置站点配置<code>_config.yml</code></strong>:将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p>
</li>
<li><p><strong>安装插件</strong>：在hexo根目录打开Git Bash,执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行<code>hexo n &quot;XXXXXX&quot;</code></strong>,生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p>
</li>
<li><p><strong>添加图片</strong>:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code></p>
</li>
</ol>
<h4 id="6-7-添加文章结束提示语"><a href="#6-7-添加文章结束提示语" class="headerlink" title="6.7 添加文章结束提示语"></a>6.7 添加文章结束提示语</h4><blockquote>
<p>提示：原文章中此处出现问题</p>
</blockquote>
<p><img data-src="problem2.png"></p>
<p><strong>核心代码</strong>：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;display:flex;justify-content:center;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span>------ 今天只会更爱哈尼 <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#f17c67;margin:0 5px;display:inline-block;animation: iconAnimate 1.33s ease-in-out infinite;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>The End of This Article------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果你想简单一点实现，直接复制这段代码，然后将其插入到 <code>themes/next/layout/_macro/post.swig</code> 文件的如下位置：</li>
</ul>
<p><img data-src="problem2-1.png"></p>
<p>当然，我们大多时候对功能都需要一个灵活性，也就是可以开关。为了实现这样的效果，我们先在<code>themes/next/layout/_macro/</code> 新建 <code>passage-end-tag.swig</code> 文件，将上面的 <strong>核心代码</strong> 添加进去。<br>然后我们修改<code>themes/next/layout/_macro/post.swig</code> 文件 ，将上面简单实现的代码替换成：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 文章结束表示语--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;passage-end-tag.swig&#x27; %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后，我们在主题配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章结束提示语</span></span><br><span class="line"><span class="attr">passage_end_tag:</span> </span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>我们就可以在这里将其设为<code>true</code> 或 <code>false</code> 来控制其显示。</p>
<blockquote>
<p>个人在配置的时候，使用<code>&lt;i class=&quot;fa fa-heart-o&quot; aria-hidden=&quot;true&quot;&gt;</code>一直不被解析，没找到原因，换了一个图标就显示了</p>
</blockquote>
<blockquote>
<p>另外一个问题，如果出现乱码的情况<br><strong>解决办法</strong>：首先是把乱码部分对应的文件用写字板打开，转换其编码格式为<code>UTF-8</code></p>
</blockquote>
<blockquote>
<p>最后一个应该注意的是，结束语是居中显示，需要注意左右两面内容的实际长度一致，否则很丑</p>
</blockquote>
<h4 id="6-8-添加博客字数和阅读时间统计功能"><a href="#6-8-添加博客字数和阅读时间统计功能" class="headerlink" title="6.8 添加博客字数和阅读时间统计功能"></a>6.8 添加博客字数和阅读时间统计功能</h4><p>首先在站点根目录下配置依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>然后再站点配置文件中加入以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment">#是否统计字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment">#是否统计阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment">#是否统计总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment">#是否统计总阅读时长</span></span><br></pre></td></tr></table></figure>

<p>最后在主题配置文件中修改为以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字数及访问时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  <span class="comment">#分隔线</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment">#文章中的显示是否显示文本</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span>       <span class="comment">#网页底部的显示是否显示文本</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span> <span class="comment">#平均每个字符的长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># 设定每分钟可阅读的字符数</span></span><br></pre></td></tr></table></figure>

<h4 id="6-9-修改-tag-图标"><a href="#6-9-修改-tag-图标" class="headerlink" title="6.9 修改 tag 图标"></a>6.9 修改 tag 图标</h4><p>默认的 <code>tag</code> 样式为 <code>#</code> 不带图标，我们可以改成使用图标</p>
<p>新版Next 已经帮我们集成了这个功能，我们只要在主题配置文件中修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post </span></span><br><span class="line"><span class="comment"># 使用标签图标 </span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="6-10-设置博客摘要显示"><a href="#6-10-设置博客摘要显示" class="headerlink" title="6.10 设置博客摘要显示"></a>6.10 设置博客摘要显示</h4><p>首先我们需要开启摘要功能，修改主题配置文件：参考该<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">方法</a></p>
<h5 id="solution-1-在文章中使用进行手动截断-推荐"><a href="#solution-1-在文章中使用进行手动截断-推荐" class="headerlink" title="solution 1     在文章中使用进行手动截断(推荐)"></a>solution 1     在文章中使用进行手动截断(<strong>推荐</strong>)</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="solution-2-在文章中的front-matter中添加description，并提供文章摘要"><a href="#solution-2-在文章中的front-matter中添加description，并提供文章摘要" class="headerlink" title="solution 2     在文章中的front-matter中添加description，并提供文章摘要"></a>solution 2     在文章中的<code>front-matter</code>中添加<code>description</code>，并提供文章摘要</h5><p>这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。使用这种方法也可以实现首页文章部分显示的效果</p>
<p>方法如下图所示：</p>
<p><img data-src="problem3.png"></p>
<h5 id="solution-3-自动生成摘要"><a href="#solution-3-自动生成摘要" class="headerlink" title="solution 3     自动生成摘要"></a>solution 3     自动生成摘要</h5><p>想要自动生成文章摘要，需在<code>主题配置</code>文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p>其中的<code>length</code>值为摘要所截取的字符长度。</p>
<h4 id="6-11-设置文章英文链接"><a href="#6-11-设置文章英文链接" class="headerlink" title="6.11 设置文章英文链接"></a>6.11 设置文章英文链接</h4><p>hexo生成的默认文章链接格式为<code>： :year/:month/:day/:title/</code>，这种默认的配置缺点很明显，当文件名是中文的时候url链接里就有中文出现。<br> 可以通过添加<code>urlname</code>字段实现文章的链接为英文，在md文件的Front-matter区域新增<code>urlname</code>属性，值为文章的英文title，参考如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">title</span>: 基于<span class="selector-tag">Hexo</span>+<span class="selector-tag">Next</span>的主题优化总结</span><br><span class="line"><span class="selector-tag">urlname</span>: <span class="selector-tag">summary-of-theme-optimization-based-on-hexo</span>&amp;<span class="selector-tag">next</span></span><br><span class="line"><span class="selector-tag">date</span>: 2019<span class="selector-tag">-07-12</span> 20<span class="selector-pseudo">:01</span><span class="selector-pseudo">:26</span></span><br><span class="line"><span class="selector-tag">categories</span>:</span><br><span class="line">  <span class="selector-tag">-</span> 工具</span><br><span class="line"><span class="selector-tag">tags</span>: </span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Hexo</span></span><br><span class="line"><span class="selector-tag">---</span></span><br></pre></td></tr></table></figure>

<p>再将博客配置文件下的<code>permalink</code>值改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:urlname/</span></span><br></pre></td></tr></table></figure>

<h4 id="6-12-Markdown首行缩进"><a href="#6-12-Markdown首行缩进" class="headerlink" title="6.12 Markdown首行缩进"></a>6.12 Markdown首行缩进</h4><p>在段落开头，输入以下字符，然后紧跟着输入文本即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>;</span><br></pre></td></tr></table></figure>

<h4 id="6-13-Markdown转义字符"><a href="#6-13-Markdown转义字符" class="headerlink" title="6.13 Markdown转义字符"></a>6.13 Markdown转义字符</h4><p>md中用到的主要可能有语法意义的非空白符号有：\ ` * _ { } [ ] ( ) # + - . !<br> 在正常段落中要原样输出以上符号，一般需要加反斜杠\在前（连续两个反斜杠输出一个反斜杠。</p>
<h4 id="6-14-修改文章间分割线"><a href="#6-14-修改文章间分割线" class="headerlink" title="6.14 修改文章间分割线"></a>6.14 修改文章间分割线</h4><p>打开 <code>themes/next/source/css/_common/components/post/post-eof.styl</code> ,修改：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.posts-expand &#123;</span><br><span class="line">  .post-eof &#123;</span><br><span class="line">    display: block;</span><br><span class="line">  //  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  </span><br><span class="line">    width: 0%; //分割线长度</span><br><span class="line">    height: 0px; // 分割线高度</span><br><span class="line">    background: $grey-light;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-15-博文置顶"><a href="#6-15-博文置顶" class="headerlink" title="6.15 博文置顶"></a>6.15 博文置顶</h4><p>打开 <code>Hexo</code> 站点下 <code>node_modules/hexo-generator-index/lib/generator.js</code> 文件。代码全部替换为：(next 5.1以后主题已自带此功能)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var pagination = require(&#x27;hexo-pagination&#x27;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &#x27;page&#x27;;</span><br><span class="line">  return pagination(&#x27;&#x27;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">    format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>打开文章添加top字段,设置数值，数值越大文章越靠前：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: layout</span><br><span class="line">title: 标签1</span><br><span class="line">date: 2017-08-18 15:41:18</span><br><span class="line">tags: 标签1</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="6-16-文章顶部显示更新时间"><a href="#6-16-文章顶部显示更新时间" class="headerlink" title="6.16 文章顶部显示更新时间"></a>6.16 文章顶部显示更新时间</h4><p>打开主题配置文件 <code>_config.yml</code> ,搜索关键字 <code>updated_at</code> 设置为 <code>true</code> ：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: ture</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>

<p>编辑文章,增加关键字<code>updated</code>（next可以根据文章改变时间自动更改）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: layout</span><br><span class="line">title: 关于</span><br><span class="line">date: 2017-08-18 15:41:18</span><br><span class="line">updated: 2017-09-05 20:18:54 #手动添加更新时间</span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tool &amp; Platform</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
        <tag>next使用</tag>
      </tags>
  </entry>
</search>
