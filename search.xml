<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Part of Html</title>
    <url>/2020/08/25/Part-of-Html/</url>
    <content><![CDATA[<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>重拾Vue响应式原理</title>
    <url>/2020/08/25/Retrieve-the-Vue-response-principle/</url>
    <content><![CDATA[<h2 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h2><p>今天接手了一个Bug，大概描述一下：</p>
<blockquote>
<p>存在一个列表和一个分页器，用的是Element-UI。</p>
<p>使用中，每次修改每页显示数据总数、换页等操作都会使用ajax异步请求新的数据。</p>
<p>问题：每次操作后，列表的渲染数据均是上一次操作的正确预期效果</p>
</blockquote>
<a id="more"></a>

<p>主要代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-int-pager</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">size-change</span>=<span class="string">&quot;onPagerSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">current-change</span>=<span class="string">&quot;onPagerCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:current-page</span>=<span class="string">&quot;pager.currentPage&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-sizes</span>=<span class="string">&quot;pager.chose&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:page-size</span>=<span class="string">&quot;pager.size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:total</span>=<span class="string">&quot;pager.total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- /分页器 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 列表渲染数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:border</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:stripe</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">onPagerSizeChange(size) &#123;</span><br><span class="line">   <span class="keyword">this</span>.pager.size = size;</span><br><span class="line">   <span class="keyword">this</span>.pager.currentPage = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">this</span>._getGoodsList();</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 切换页面</span></span><br><span class="line">onPagerCurrentChange(currentPage) &#123;</span><br><span class="line">   <span class="keyword">this</span>.pager.currentPage = currentPage;</span><br><span class="line">   <span class="keyword">this</span>._getGoodsList();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>其中，<code>this._getGoodsList()</code>为获取相应数据的异步请求，经验证后台数据均获取正确</p>
<p>所以，结论只有一个，就是异步获取数据之后，Vue 未更新 <code>Virtual DOM</code> </p>
<p>最后，发现需要渲染的数据没有加入到 <code>vm.data()</code>中，修改后问题解决。</p>
<blockquote>
<h5 id="也因此，在这里在此回顾Vue响应式原理"><a href="#也因此，在这里在此回顾Vue响应式原理" class="headerlink" title="也因此，在这里在此回顾Vue响应式原理"></a>也因此，在这里在此回顾<code>Vue</code>响应式原理</h5></blockquote>
<h2 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h2><blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/reactivity.html">官方文档</a></p>
</blockquote>
<p>Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，<strong>视图会进行更新</strong>。</p>
<h3 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h3><p>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a> 把这些 property 全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters">getter/setter</a>。<code>Object.defineProperty</code> 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
<p>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter/setter 的格式化并不同，所以建议安装 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a> 来获取对检查数据更加友好的用户界面。</p>
<p>每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</p>
<p><img data-src="rendering-way.png"></p>
<h3 id="检测变化的注意事项"><a href="#检测变化的注意事项" class="headerlink" title="检测变化的注意事项"></a>检测变化的注意事项</h3><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p>
<h4 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h4><p>Vue 无法检测 property 的添加或移除。由于 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 <code>data</code> 对象上存在才能让 Vue 将它转换为响应式的。例如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  dat<span class="variable">a:</span>&#123;</span><br><span class="line">    <span class="variable">a:1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// `<span class="keyword">vm</span>.<span class="keyword">a</span>` 是响应式的</span><br><span class="line"></span><br><span class="line"><span class="keyword">vm</span>.<span class="keyword">b</span> = <span class="number">2</span></span><br><span class="line">// `<span class="keyword">vm</span>.<span class="keyword">b</span>` 是非响应式的</span><br></pre></td></tr></table></figure>

<p>对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是，可以使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 property。例如，对于：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Vue.<span class="builtin-name">set</span>(vm.someObject, <span class="string">&#x27;b&#x27;</span>, 2)</span><br></pre></td></tr></table></figure>

<p>您还可以使用 <code>vm.$set</code> 实例方法，这也是全局 <code>Vue.set</code> 方法的别名：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.someObject,<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>有时你可能需要为已有对象赋值多个新 property，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。但是，这样添加到对象上的新 property 不会触发更新。在这种情况下，你应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">代替</span> <span class="string">`Object.assign(this.someObject,</span> &#123; <span class="attr">a:</span> <span class="number">1</span>, <span class="attr">b:</span> <span class="number">2</span> &#125;<span class="string">)`</span></span><br><span class="line"><span class="string">this.someObject</span> <span class="string">=</span> <span class="string">Object.assign(&#123;&#125;,</span> <span class="string">this.someObject,</span> &#123; <span class="attr">a:</span> <span class="number">1</span>, <span class="attr">b:</span> <span class="number">2</span> &#125;<span class="string">)</span></span><br></pre></td></tr></table></figure>

<h4 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h4><p>Vue 不能检测以下数组的变动：</p>
<ol>
<li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li>
<li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li>
</ol>
<p>举个例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    item<span class="variable">s:</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">vm</span>.<span class="built_in">items</span>[<span class="number">1</span>] = <span class="string">&#x27;x&#x27;</span> // 不是响应性的</span><br><span class="line"><span class="keyword">vm</span>.<span class="built_in">items</span>.length = <span class="number">2</span> // 不是响应性的</span><br></pre></td></tr></table></figure>

<p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将在响应式系统内触发状态更新：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.<span class="keyword">set</span>(vm.items, indexOfItem, <span class="keyword">new</span><span class="type">Value</span>)</span><br><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, <span class="keyword">new</span><span class="type">Value</span>)</span><br></pre></td></tr></table></figure>

<p>你也可以使用 <a href="https://cn.vuejs.org/v2/api/#vm-set"><code>vm.$set</code></a> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">vm.<span class="constructor">$set(<span class="params">vm</span>.<span class="params">items</span>, <span class="params">indexOfItem</span>, <span class="params">newValue</span>)</span></span><br></pre></td></tr></table></figure>

<p>为了解决第二类问题，你可以使用 <code>splice</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vm</span><span class="selector-class">.items</span><span class="selector-class">.splice</span>(<span class="selector-tag">newLength</span>)</span><br></pre></td></tr></table></figure>

<h3 id="声明响应式-property"><a href="#声明响应式-property" class="headerlink" title="声明响应式 property"></a>声明响应式 property</h3><p>由于 Vue 不允许动态添加根级响应式 property，所以你必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> vm = <span class="literal">new</span> Vue(&#123;</span><br><span class="line">  <span class="built_in">data</span>: &#123;</span><br><span class="line">    <span class="comment">// 声明 message 为一个空值字符串</span></span><br><span class="line">    message: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 之后设置 `message`</span></span><br><span class="line">vm.message = <span class="string">&#x27;Hello!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果你未在 <code>data</code> 选项中声明 <code>message</code>，Vue 将警告你渲染函数正在试图访问不存在的 property。</p>
<p>这样的限制在背后是有其技术原因的，它消除了在依赖项跟踪系统中的一类边界情况，也使 Vue 实例能更好地配合类型检查系统工作。但与此同时在代码可维护性方面也有一点重要的考虑：<code>data</code>对象就像组件状态的结构 (schema)。提前声明所有的响应式 property，可以让组件代码在未来修改或给其他开发人员阅读时更易于理解。</p>
<h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>可能你还没有注意到，Vue 在更新 DOM 时是<strong>异步</strong>执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p>
<p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用。例如：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;example&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">var <span class="keyword">vm</span> = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="keyword">e</span><span class="variable">l:</span> <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  dat<span class="variable">a:</span> &#123;</span><br><span class="line">    message: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">vm</span>.message = <span class="string">&#x27;new message&#x27;</span> // 更改数据</span><br><span class="line"><span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">&#x27;new message&#x27;</span> // false</span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">  <span class="keyword">vm</span>.$<span class="keyword">el</span>.textContent === <span class="string">&#x27;new message&#x27;</span> // true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在组件内使用 <code>vm.$nextTick()</code> 实例方法特别方便，因为它不需要全局 <code>Vue</code>，并且回调函数中的 <code>this</code> 将自动绑定到当前的 Vue 实例上：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;example&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">&#x27;未更新&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message = <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el.textContent) <span class="comment">// =&gt; &#x27;未更新&#x27;</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$el.textContent) <span class="comment">// =&gt; &#x27;已更新&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>因为 <code>$nextTick()</code> 返回一个 <code>Promise</code> 对象，所以你可以使用新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">ES2017 async/await</a> 语法完成相同的事情：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">methods</span>: &#123;</span><br><span class="line">  <span class="attribute">updateMessage</span>: async function () &#123;</span><br><span class="line">    this.message = <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">    console.<span class="built_in">log</span>(this.$el.textContent) // =&gt; <span class="string">&#x27;未更新&#x27;</span></span><br><span class="line">    await this.$<span class="built_in">nextTick</span>()</span><br><span class="line">    console.<span class="built_in">log</span>(this.$el.textContent) // =&gt; <span class="string">&#x27;已更新&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Problems-To-Collect"><a href="#Problems-To-Collect" class="headerlink" title="Problems To Collect"></a>Problems To Collect</h2><h3 id="1-Vue异步获取数据后初始化数据不能及时更新"><a href="#1-Vue异步获取数据后初始化数据不能及时更新" class="headerlink" title="1. Vue异步获取数据后初始化数据不能及时更新"></a>1. Vue异步获取数据后初始化数据不能及时更新</h3><ul>
<li>钩子函数尽量使用mounted来完成初始化函数，根据vue的生命周期尽量不要用mounted之前的</li>
<li>对于可能要改变的值，最好直接写到data{}中，比如这样写：</li>
<li>如果还不能实时更新，通过vue的官方$set方法可以实现手动设置</li>
<li>一些特殊set方法，比如其他js框架的set方法，会和vue的方法冲突造成数据不能同步</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>框架与工具</tag>
        <tag>Vue</tag>
        <tag>Vue Problems</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Function</title>
    <url>/2020/08/25/JavaScript-commonly-used-functions/</url>
    <content><![CDATA[<blockquote>
<h5 id="以下记录经常忘记又常用的JS内置函数"><a href="#以下记录经常忘记又常用的JS内置函数" class="headerlink" title="以下记录经常忘记又常用的JS内置函数"></a>以下记录经常忘记又常用的<code>JS</code>内置函数</h5><p>推荐查阅相关 <code>资料</code>  ：</p>
<p><a href="https://es6.ruanyifeng.com/">ECMAScript 6 入门</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰的JavaScript教程</a></p>
</blockquote>
<a id="more"></a>

<h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="1-Array-shift"><a href="#1-Array-shift" class="headerlink" title="1. Array.shift()"></a>1. Array.shift()</h3><p>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>Object.shift()</span><br></pre></td></tr></table></figure>

<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>数组原来的第一个元素的值。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul>
<li>如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。</li>
<li>请注意，该方法不创建新数组，而是直接修改原有的 arrayObject。</li>
<li>该方法会改变数组的长度。</li>
</ul>
<h3 id="2-every-some"><a href="#2-every-some" class="headerlink" title="2. every()   some()"></a>2. every()   some()</h3><blockquote>
<p>every()是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。</p>
<p>some()是对数组中每一项运行给定函数，如果该函数对任一项返回true，则返回true。</p>
<p>some一直在找符合条件的值，一旦找到，则不会继续迭代下去。<br>every从迭代开始，一旦有一个不符合条件，则不会继续迭代下去。</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> ];  </span><br><span class="line">console.log( arr.<span class="keyword">some</span>( <span class="keyword">function</span>( item, <span class="keyword">index</span>, <span class="keyword">array</span> )&#123;     </span><br><span class="line">    console.log( <span class="string">&#x27;item=&#x27;</span> + item + <span class="string">&#x27;,index=&#x27;</span>+<span class="keyword">index</span>+<span class="string">&#x27;,array=&#x27;</span>+<span class="keyword">array</span> );     </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;  </span><br><span class="line">&#125;));  </span><br><span class="line">console.log( arr.every( <span class="keyword">function</span>( item, <span class="keyword">index</span>, <span class="keyword">array</span> )&#123;     </span><br><span class="line">    console.log( <span class="string">&#x27;item=&#x27;</span> + item + <span class="string">&#x27;,index=&#x27;</span>+<span class="keyword">index</span>+<span class="string">&#x27;,array=&#x27;</span>+<span class="keyword">array</span> );     </span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;  </span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>



<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="1-JS中判断某个字符串是否包含另一个字符串的五种方法"><a href="#1-JS中判断某个字符串是否包含另一个字符串的五种方法" class="headerlink" title="1. JS中判断某个字符串是否包含另一个字符串的五种方法"></a>1. JS中判断某个字符串是否包含另一个字符串的五种方法</h3><h4 id="String对象的方法"><a href="#String对象的方法" class="headerlink" title="String对象的方法"></a>String对象的方法</h4><p><strong>方法一: indexOf()  (推荐)</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indexOf(<span class="string">&quot;2&quot;</span>) != -<span class="number">1</span>);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。如果要检索的字符串值没有出现，则该方法返回 -1。</p>
<p><strong>方法二:match()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span> (str.match(reg))&#123;<span class="string">``</span> <span class="string">``</span><span class="comment">//包含；``&#125;</span></span><br></pre></td></tr></table></figure>

<p>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</p>
<p><strong>方法三: search()</strong></p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">str</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">search</span>( <span class="string">&quot;2&quot;</span> ) != -<span class="number">1</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</p>
<h4 id="RegExp对象的方法"><a href="#RegExp对象的方法" class="headerlink" title="RegExp对象的方法"></a>RegExp对象的方法</h4><p><strong>方法四: test()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  str = <span class="string">&quot;123&quot;</span> </span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str) != <span class="number">-1</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>test() 方法用于检索字符串中指定的值。返回 true 或 false。</p>
<p><strong>方法五:exec()</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="built_in">RegExp</span>(<span class="regexp">/3/</span>);</span><br><span class="line"><span class="keyword">if</span>(reg.exec(str))&#123;<span class="string">``</span> <span class="string">``</span><span class="comment">//包含；``&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>exec() 方法</strong>用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Front End</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES3-ES5</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next-Supplement</title>
    <url>/2020/08/20/Hexo-Next-Supplement/</url>
    <content><![CDATA[<h1 id="Hexo后续补充"><a href="#Hexo后续补充" class="headerlink" title="Hexo后续补充"></a>Hexo后续补充</h1><blockquote>
<p>本篇对 <a href="https://hammerzer.github.io/2020/08/18/The%20Starting%20Point%20of%20Blogs/">The-Starting-Point-of-Blogs</a> 进行一些补充</p>
</blockquote>
<a id="more"></a>

<h2 id="一、推送处理"><a href="#一、推送处理" class="headerlink" title="一、推送处理"></a>一、推送处理</h2><h3 id="1-静态资源压缩"><a href="#1-静态资源压缩" class="headerlink" title="1. 静态资源压缩"></a>1. 静态资源压缩</h3><blockquote>
<p>存在问题未解决</p>
</blockquote>
<p>在站点目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install gulp -g</span><br></pre></td></tr></table></figure>

<p>安装gulp插件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure>

<p>在 <code>Hexo</code> 站点下添加 <code>gulpfile.js</code>文件，文件内容如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var gulp = require(&#x27;gulp&#x27;);</span><br><span class="line">var minifycss = require(&#x27;gulp-minify-css&#x27;);</span><br><span class="line">var uglify = require(&#x27;gulp-uglify&#x27;);</span><br><span class="line">var htmlmin = require(&#x27;gulp-htmlmin&#x27;);</span><br><span class="line">var htmlclean = require(&#x27;gulp-htmlclean&#x27;);</span><br><span class="line">var imagemin = require(&#x27;gulp-imagemin&#x27;);</span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&#x27;minify-css&#x27;, function() &#123;</span><br><span class="line">  return gulp.src(&#x27;./public/**/*.css&#x27;)</span><br><span class="line">  .pipe(minifycss())</span><br><span class="line">  .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&#x27;minify-html&#x27;, function() &#123;</span><br><span class="line">  return gulp.src(&#x27;./public/**/*.html&#x27;)</span><br><span class="line">  .pipe(htmlclean())</span><br><span class="line">  .pipe(htmlmin(&#123;</span><br><span class="line">    removeComments: true,</span><br><span class="line">    minifyJS: true,</span><br><span class="line">    minifyCSS: true,</span><br><span class="line">    minifyURLs: true,</span><br><span class="line">  &#125;))</span><br><span class="line">  .pipe(gulp.dest(&#x27;./public&#x27;))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&#x27;minify-js&#x27;, function() &#123;</span><br><span class="line">    return gulp.src([&#x27;./public/**/.js&#x27;,&#x27;!./public/js/**/*min.js&#x27;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/demo 目录内图片</span><br><span class="line">gulp.task(&#x27;minify-images&#x27;, function() &#123;</span><br><span class="line">    gulp.src(&#x27;./public/demo/**/*.*&#x27;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#x27;./public/uploads&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(&#x27;default&#x27;, [</span><br><span class="line">  &#x27;minify-html&#x27;,&#x27;minify-css&#x27;,&#x27;minify-js&#x27;,&#x27;minify-images&#x27;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">gulp</span></span><br><span class="line"><span class="attr">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Tip</code>   可以把上面的三条命令编写进package.json的script，就可一键三连啦！</p>
</blockquote>
<h3 id="2-本地站点推送到GitHub上"><a href="#2-本地站点推送到GitHub上" class="headerlink" title="2. 本地站点推送到GitHub上"></a>2. 本地站点推送到GitHub上</h3><p>在站点更目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在 <code>Hexo</code> 站点的 <code>_config.yml</code> 中配置 <code>deploy</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #your github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo d --g</span><br></pre></td></tr></table></figure>

<p>hexo g # 生成本地 public 静态文件, hexo d # 部署到 Github 上, 也可以缩写成：hexo g –d 。</p>
<h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="二、站点功能"><a href="#二、站点功能" class="headerlink" title="二、站点功能"></a>二、站点功能</h2><h3 id="1-文章加密访问"><a href="#1-文章加密访问" class="headerlink" title="1. 文章加密访问"></a>1. 文章加密访问</h3><p>打开 <code>themes/next/layout/_partials/head.swig</code>文件,在 <code>&#123;% if theme.pace %&#125;` 标签下的 `&#123;% endif %&#125;</code> 之前插入代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        if(&#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">            if (prompt(&#x27;请输入文章密码&#x27;) !== &#x27;&#123;&#123; page.password &#125;&#125;&#x27;)&#123;</span><br><span class="line">                alert(&#x27;密码错误&#x27;);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在文章上应用：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2017观看影视</span><br><span class="line">date: 2017-09-25 16:10:03</span><br><span class="line">type:</span><br><span class="line">top:</span><br><span class="line">comments:</span><br><span class="line">categories: [影音, 影视]</span><br><span class="line">tags: [影音, 电影, 电视剧, 动画]</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="2-添加热度"><a href="#2-添加热度" class="headerlink" title="2. 添加热度"></a>2. 添加热度</h3><ul>
<li><p>进入<a href="https://links.jianshu.com/go?to=https://leancloud.cn/">LeanCloud官网</a>，进行账号注册。登录后，进入控制台，创建应用，应用名为<code>Hexo</code></p>
</li>
<li><p>创建应用后，点击存储，创建<strong>Class</strong>，<strong>Class</strong>命名为<strong>Counter</strong>，并限制写入</p>
</li>
<li><p>查看<strong>AppID</strong>和<strong>AppKey</strong></p>
</li>
<li><p>打开<code>Blog/themes/next/layout/_macro/post.swig</code>，<code>command+F</code>搜索<code>leancloud-visitors-count</code>，在图片位置加入<code>&lt;span&gt;℃&lt;/span&gt;</code></p>
<p><img data-src="pic1.png"></p>
</li>
<li><p>编辑主题配置文件，<code>command+f</code>搜索<code>leancloud_visitors</code>，将其值设为：<code>ture</code>，将<strong>AppID</strong>和<strong>AppKey</strong>粘贴到相应位置：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  <span class="built_in">enable</span>: ture</span><br><span class="line">  app_id: app_id</span><br><span class="line">  app_key: app_key</span><br></pre></td></tr></table></figure>

<h3 id="3-添加免登陆评论系统"><a href="#3-添加免登陆评论系统" class="headerlink" title="3. 添加免登陆评论系统"></a>3. 添加免登陆评论系统</h3><blockquote>
<p>参考自该<a href="https://blog.csdn.net/jiunian_2761/article/details/97388997">博文</a></p>
</blockquote>
<h4 id="3-1-为什么选择Valine"><a href="#3-1-为什么选择Valine" class="headerlink" title="3.1 为什么选择Valine"></a>3.1 为什么选择Valine</h4><p>在笔者进行评论系统选择时，我觉得我的需求就是方便，简洁，最重要一点是要支持<code>Markdown</code> ，对比之下，最终选定了这款Valine，当然，如果你不喜欢这样简洁的，可以参考 <a href="https://www.zhihu.com/question/267598518">Hexo（NexT 主题）评论系统哪个好？</a></p>
<h4 id="3-2-第一步，注册LeanClound-获取APP-ID-和-APP-Key"><a href="#3-2-第一步，注册LeanClound-获取APP-ID-和-APP-Key" class="headerlink" title="3.2  第一步，注册LeanClound,获取APP ID 和 APP Key"></a>3.2  第一步，注册LeanClound,获取APP ID 和 APP Key</h4><ul>
<li><p>Valine 是基于 <a href="https://leancloud.cn/">LeanCloud</a> 作为数据存储的，所以需要注册一个账号</p>
</li>
<li><p>注册完成后，我们找到<code>创建``应用</code></p>
<p><img data-src="pic2.png"></p>
</li>
<li><p>在这里填写你的应用名称,名称可以自己定义，然后下面选择<code>开发版</code> 点击<code>创建</code></p>
</li>
<li><p>然后点击应用进入设置，在设置页，我们首先点击存储，查看是否有<code>Comment</code>和 <code>Counter</code>，没有则创建，权限设为无限制。</p>
<p><img data-src="pic3.png"></p>
<p><img data-src="pic4.png"></p>
</li>
<li><p>然后点击设置 &gt; 安全中心 ,将除了数据存储的服务全部关闭</p>
</li>
<li><p>最后点击应用 Key 取得我们 <code>AppKey</code> 和 <code>App id</code></p>
</li>
</ul>
<h4 id="3-3-在Hexo-Next主题中配置"><a href="#3-3-在Hexo-Next主题中配置" class="headerlink" title="3.3. 在Hexo Next主题中配置"></a>3.3. 在Hexo Next主题中配置</h4><ul>
<li><p>首先打开 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 获取最新的 valine.min.js 的cdn地址</p>
</li>
<li><p>然后我们修改主题配置文件，配置CDN：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># valine  </span></span><br><span class="line"><span class="meta"># See: https://github.com/xCss/Valine  </span></span><br><span class="line"><span class="meta"># Example:  </span></span><br><span class="line"><span class="meta"># valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js  </span></span><br><span class="line"><span class="meta"># valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.4/Valine.min.js  valine: https://cdn.jsdelivr.net/npm/valine@1.3.9/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再打开配置Valine功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine </span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn </span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org </span></span><br><span class="line"><span class="attr">valine:</span> <span class="comment"># 功能开关  </span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version  </span></span><br><span class="line">    <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid #LeanClound获得的appid  </span></span><br><span class="line">    <span class="attr">appkey:</span>  <span class="comment"># Your leancloud application appkey #LeanClound获得的appkey </span></span><br><span class="line">    <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki # 邮件提醒  </span></span><br><span class="line">    <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code   </span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">欢迎畅所欲言</span> <span class="comment"># Comment box placeholder  </span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style #默认头像设置  </span></span><br><span class="line">    <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header  </span></span><br><span class="line">    <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size  </span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn # 语言，设为zh-cn  # 是否开启当前文章阅读量统计  </span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html  </span></span><br><span class="line">    <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page </span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="3-4-指定文章（页面）评论功能是否开启"><a href="#3-4-指定文章（页面）评论功能是否开启" class="headerlink" title="3.4 指定文章（页面）评论功能是否开启"></a>3.4 指定文章（页面）评论功能是否开启</h4><p>  在 Hexo 博客中，评论的功能是在所有页面都默认开启的，但是有的时候我们在页面上不需要显示评论功能，例如分类，标记页面我们并不需要评论功能。</p>
<p>  我们可以在 Front-matter 中通过<code>comments</code>属性设置true或false控制该页面或者是文章的评论功能是否打开，如我设置标签页面的评论功能关闭：</p>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2019</span><span class="number">-07</span><span class="number">-18</span> <span class="number">15</span>:<span class="number">16</span>:<span class="number">50</span></span><br><span class="line">type: <span class="string">&quot;tags&quot;</span></span><br><span class="line">comments: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-自定义头像"><a href="#3-5-自定义头像" class="headerlink" title="3.5 自定义头像"></a>3.5 自定义头像</h4><blockquote>
<p><a href="https://valine.js.org/avatar.html">valine官方文档</a></p>
</blockquote>
<blockquote>
<p>Valine 目前使用的是<a href="http://cn.gravatar.com/">Gravatar</a> 作为评论列表头像。</p>
<p>请自行登录或注册<a href="http://cn.gravatar.com/">Gravatar</a>，然后修改自己的头像。</p>
<p>评论的时候，留下在<a href="http://cn.gravatar.com/">Gravatar</a>注册时所使用的邮箱即可。</p>
</blockquote>
<p>默认值为:</p>
<p><img data-src="pic5.png"></p>
<h3 id="4-给博客添加网站地图sitemap"><a href="#4-给博客添加网站地图sitemap" class="headerlink" title="4. 给博客添加网站地图sitemap"></a>4. 给博客添加网站地图<code>sitemap</code></h3><blockquote>
<p>未实现</p>
</blockquote>
<blockquote>
<p>搜索引擎每天让蜘蛛在网站爬行来抓取页面，网站地图的作用就是给主动给蜘蛛喂数据</p>
</blockquote>
<p>网站地图位于网站根目录下，有<code>sitemap.html</code>和<code>sitemap.xml</code>两种格式。百度搜索引擎及多数搜索引擎使用html格式，谷歌使用xml格式。两步完成网站地图自动生成功能。</p>
<p>**安装<code>网站地图生成插件**</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure>

<p>重新启动hexo，系统会在<code>public</code>根目录下生成<code>sitemap.xml</code>文件。</p>
<p>具体收录参考<a href="https://www.cnblogs.com/brady-wang/p/8493346.html">此处</a></p>
<h2 id="三、常见问题"><a href="#三、常见问题" class="headerlink" title="三、常见问题"></a>三、常见问题</h2><h3 id="1-hexo开发环境迁移"><a href="#1-hexo开发环境迁移" class="headerlink" title="1. hexo开发环境迁移"></a>1. hexo开发环境迁移</h3><blockquote>
<p>参考自 <a href="https://www.cnblogs.com/study-everyday/p/8902136.html">该博主</a></p>
</blockquote>
<h4 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h4><p>安装 Git 客户端</p>
<p>安装 node JS</p>
<h4 id="1-2-在-github-官网添加新电脑产生的密钥"><a href="#1-2-在-github-官网添加新电脑产生的密钥" class="headerlink" title="1.2 在 github 官网添加新电脑产生的密钥"></a>1.2 在 github 官网添加新电脑产生的密钥</h4><h4 id="1-3-源文件拷贝"><a href="#1-3-源文件拷贝" class="headerlink" title="1.3 源文件拷贝"></a>1.3 源文件拷贝</h4><p>将你原来电脑上个人博客目录下必要文件拷到你的新电脑上（比如F:/Blog目录下），注意无需拷全部，只拷如下几个目录：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">_config.yml</span><br><span class="line"><span class="keyword">package</span>.json </span><br><span class="line">scaffolds/ </span><br><span class="line"><span class="keyword">source</span>/ </span><br><span class="line">themes/</span><br></pre></td></tr></table></figure>

<h4 id="1-4-安装-hexo"><a href="#1-4-安装-hexo" class="headerlink" title="1.4 安装 hexo"></a>1.4 安装 hexo</h4><p>在 cmd 下输入下面指令安装 hexo：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>

<h4 id="1-5-进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"><a href="#1-5-进入-F-Blog-目录（你拷贝到新电脑的目录），输入下面指令安装相关模块" class="headerlink" title="1.5 进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块"></a>1.5 进入 F:/Blog 目录（你拷贝到新电脑的目录），输入下面指令安装相关模块</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save  // 文章部署到 git 的模块</span></span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save  // 建立 RSS 订阅</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save // 建立站点地图</span></span><br></pre></td></tr></table></figure>

<h4 id="1-6-测试"><a href="#1-6-测试" class="headerlink" title="1.6 测试"></a>1.6 测试</h4><p>这时候使用 <code>hexo s</code> 基本可以看到你新添加的文章了。</p>
<h4 id="1-7-部署发布文章"><a href="#1-7-部署发布文章" class="headerlink" title="1.7 部署发布文章"></a>1.7 部署发布文章</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="regexp">//</span> 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       <span class="regexp">//</span> 生成静态网页</span><br><span class="line">hexo d       <span class="regexp">//</span> 开始部署</span><br></pre></td></tr></table></figure>

<h4 id="1-8-Github-添加-SSH-Keys"><a href="#1-8-Github-添加-SSH-Keys" class="headerlink" title="1.8 Github 添加 SSH Keys"></a><a name="mark-one">1.8 Github 添加 SSH Keys</a></h4><blockquote>
<p>推荐该博主 <a href="https://www.himmy.cn/2019/07/06/github%E6%B7%BB%E5%8A%A0ssh-key/">GitHub添加SSH key</a></p>
</blockquote>
<h5 id="1-8-1-打开Git-Bash命令行窗口"><a href="#1-8-1-打开Git-Bash命令行窗口" class="headerlink" title="1.8.1 打开Git Bash命令行窗口"></a>1.8.1 打开Git Bash命令行窗口</h5><h5 id="1-8-2-检查是否已有SSH"><a href="#1-8-2-检查是否已有SSH" class="headerlink" title="1.8.2 检查是否已有SSH"></a>1.8.2 检查是否已有SSH</h5><p>如果没有，会返回如下信息，继续第三步创建SSH</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">bash: cd: <span class="regexp">/c/U</span>sers<span class="regexp">/Him/</span>.ssh: No such <span class="keyword">file</span> or directory</span><br></pre></td></tr></table></figure>

<p>如果本地已经有创建SSH，会返回如下信息，表示本地已经有创建过SSH了，跳过第三步，直接看第四步</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure>

<h5 id="1-8-3-创建SSH-key"><a href="#1-8-3-创建SSH-key" class="headerlink" title="1.8.3 创建SSH key"></a>1.8.3 创建SSH key</h5><p>最后一个参数替换成你自己的GitHub注册邮箱</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key <span class="built_in">pair</span>.</span><br></pre></td></tr></table></figure>

<p>接下来会提示你输入生成的key存放的路径，不设置直接回车的话会默认创建在C:/Users/你的用户账号/.ssh文件夹下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Enter <span class="keyword">file</span> in which to save the key (<span class="regexp">/c/U</span>sers<span class="regexp">/Him/</span>.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/c/Users/userpath/.ssh&#x27;</span>.</span><br></pre></td></tr></table></figure>

<p>再接下来会提示你输入密码，这个密码是用来每次提交的时候输入确认，可以不设置，直接回车两次</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Enter</span> <span class="string">passphrase</span> <span class="string">(empty</span> <span class="string">for</span> <span class="literal">no</span> <span class="string">passphrase):</span></span><br><span class="line"><span class="attr">Enter same passphrase again:</span></span><br></pre></td></tr></table></figure>

<p>最后成功后会看到类似如下的输出，表示成功生成SSH key了，可以到C:/Users/你的用户账号/.ssh文件夹下看下</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/Him/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Him/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RwvBINgH8CEt2KniltmykeyDsOseUYcwMzehFeyT86s 1225723686<span class="meta">@qq.com</span></span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|<span class="string"> o+%OO+o.        </span>|</span><br><span class="line">|<span class="string">..=+%*+ ..       </span>|</span><br><span class="line">|<span class="string"> ..+o+o.. .      </span>|</span><br><span class="line">|<span class="string">o.  o=.  o .     </span>|</span><br><span class="line">|<span class="string">o oolalala S o      </span>|</span><br><span class="line">|<span class="string"> +.+.. . .       </span>|</span><br><span class="line">|<span class="string">. .o    .        </span>|</span><br><span class="line">|<span class="string">  . .  .         </span>|</span><br><span class="line">|<span class="string">   . E.          </span>|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>

<h5 id="1-8-4-添加SSH-key到GitHub"><a href="#1-8-4-添加SSH-key到GitHub" class="headerlink" title="1.8.4 添加SSH key到GitHub"></a>1.8.4 添加SSH key到GitHub</h5><p>首先复制.ssh文件夹下id_rsa.pub文件的内容，可以直接用文本编辑器打开复制，也可以用如下命令行复制</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure>

<p>然后进入<a href="https://github.com/settings/keys%E8%AE%BE%E7%BD%AE%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E7%99%BB%E5%BD%95%E8%A6%81%E5%85%88%E7%99%BB%E5%BD%95">https://github.com/settings/keys设置，如果没有登录要先登录</a></p>
<p>或者登录后依次点击右上角Settings，然后再点击SSH and GPG keys</p>
<p>输入<code>title</code> 和 <code>key</code></p>
<p>最后点击Add SSH key按钮保存</p>
<h5 id="1-8-5-测试SSH连接"><a href="#1-8-5-测试SSH连接" class="headerlink" title="1.8.5 测试SSH连接"></a>1.8.5 测试SSH连接</h5><p>输入如下命令</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>

<p>会得到如下输出，询问是否确认连接，输入yes回车确认</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">The</span> authenticity of host &#x27;github.com (<span class="number">13.229.188.59</span>)&#x27; can&#x27;t be established.</span><br><span class="line"><span class="attribute">RSA</span> key fingerprint is SHA<span class="number">256</span>:nThbg<span class="number">6</span>kXUpJWGl<span class="number">7</span>mykeyCspRomTxdCARLviKw<span class="number">6</span>E<span class="number">5</span>SY<span class="number">8</span>.</span><br><span class="line"><span class="attribute">Are</span> you sure you want to continue connecting (yes/no)? yes</span><br></pre></td></tr></table></figure>

<p>最后连接成功会看到如下输出</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="literal">Warning</span>: Permanently added <span class="symbol">&#x27;github</span>.com,<span class="number">13.229</span>.<span class="number">188.59</span>&#x27; (RSA) <span class="keyword">to</span> the list <span class="keyword">of</span> known hosts.</span><br><span class="line">Hi ghxiaoxiao! You<span class="symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure>

<p>迁移完毕over</p>
<h3 id="2-gitee双线部署提高访问速度"><a href="#2-gitee双线部署提高访问速度" class="headerlink" title="2. gitee双线部署提高访问速度"></a>2. gitee双线部署提高访问速度</h3><h4 id="2-1-注册账号"><a href="#2-1-注册账号" class="headerlink" title="2.1 注册账号"></a>2.1 注册账号</h4><h4 id="2-2-创建仓库"><a href="#2-2-创建仓库" class="headerlink" title="2.2 创建仓库"></a>2.2 创建仓库</h4><p>创建一个与你的Gitee控件地址同名的空项目</p>
<blockquote>
<p>比如我的Gitee空间地址为<a href="https://gitee.com/Hammerzer%EF%BC%8C%E9%82%A3%E4%B9%88%E5%88%9B%E5%BB%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8D%E4%B8%BAHammerzer%EF%BC%8C">https://gitee.com/Hammerzer，那么创建的项目名为Hammerzer，</a></p>
<p>可能需要强制修改仓库名</p>
</blockquote>
<p>最终博客部署后的访问地址为<a href="https://hammerzer.gitee.io/">https://hammerzer.gitee.io</a></p>
<blockquote>
<p><strong>注意</strong>：如果创建仓库名称与空间地址不同，则需要访问 如<a href="https://hammerzer.gitee.io/hammer,%E5%90%8C%E6%97%B6%E4%B9%9F%E4%BC%9A%E5%AF%BC%E8%87%B4%60gitee">https://hammerzer.gitee.io/hammer,同时也会导致`gitee</a> page`无法显示css、js</p>
</blockquote>
<h4 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h4><p>复制上一步创建的项目的地址，也就是仓库的<code>SSH地址</code>，类似于<code>git@gitee.com:hhhh/hhhh.git</code></p>
<p>然后在Hexo配置文件_config.yml中找到deploy配置项，添加如下配置</p>
<blockquote>
<p>可多线部署，如下书写（单线部署可不写 <code>github</code>/<code>gitee</code>/<code>coding</code>）</p>
<p>记得冒号后有空格</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">      <span class="attribute">gitee</span>: git<span class="variable">@gitee</span>.<span class="attribute">hhhcom</span>:/hhh.git</span><br><span class="line">      <span class="attribute">github</span>: </span><br><span class="line">      <span class="attribute">coding</span>:</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<h4 id="2-4-添加SSH"><a href="#2-4-添加SSH" class="headerlink" title="2.4 添加SSH"></a>2.4 添加SSH</h4><p>在Gitee添加自己电脑的ssh key，这样每次更新代码到Gitee就不用再输入密码了</p>
<p>获取电脑的SSH可以参考   <a href="#mark-one">常见问题-1-1.8</a></p>
<p>然后在Gitee的设置页面找到安全设置–&gt;SSH公钥，用上一步获取的SSH创建一个新的公钥</p>
<blockquote>
<p>此处插播一条 little tip</p>
<p>上面的实现 <code>markdown</code>  自身链接跳转，下面给出所用代码：</p>
<p><code>&lt;a name=&quot;title&quot;&gt; &lt;/a&gt;</code></p>
<p><code>&lt;a href=&quot;#title&quot;&gt;&lt;/a&gt;</code></p>
</blockquote>
<h4 id="2-5-部署hexo"><a href="#2-5-部署hexo" class="headerlink" title="2.5 部署hexo"></a>2.5 部署hexo</h4><h4 id="2-6-开启Gitee-Pages服务"><a href="#2-6-开启Gitee-Pages服务" class="headerlink" title="2.6 开启Gitee Pages服务"></a>2.6 开启Gitee Pages服务</h4><ul>
<li>在项目主页找到服务，点击后可以看到Gitee Pages</li>
<li>点击跳转Gitee Pages服务页面，点击启动按钮开启服务</li>
<li>gitee pages会提示访问地址，然后就可以在浏览器输入<a href="https://hammerzer.gitee.io访问/">https://hammerzer.gitee.io访问</a></li>
</ul>
<h3 id="3-hexo双线部署在Gitee上出现的问题"><a href="#3-hexo双线部署在Gitee上出现的问题" class="headerlink" title="3. hexo双线部署在Gitee上出现的问题"></a>3. hexo双线部署在Gitee上出现的问题</h3><h4 id="3-1-在移动端出现点击事件失去默认行为"><a href="#3-1-在移动端出现点击事件失去默认行为" class="headerlink" title="3.1 在移动端出现点击事件失去默认行为"></a>3.1 在移动端出现点击事件失去默认行为</h4><blockquote>
<p>移动端区别于web端，有可能会默认阻止a标签默认行为，且在Web浏览器中调试时不会报错。</p>
<p>因此，只要换一种导航方式，即可。代码如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> href=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;href.length;i++)&#123;</span><br><span class="line">    href[i].ontouchend=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href=<span class="built_in">this</span>.getAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-解决-gitee-page-无法自动更新"><a href="#3-2-解决-gitee-page-无法自动更新" class="headerlink" title="3.2 解决 gitee page 无法自动更新"></a>3.2 解决 gitee page 无法自动更新</h4><blockquote>
<p>参考简书<a href="https://www.jianshu.com/p/6460df84a099">该博文</a></p>
</blockquote>
<blockquote>
<p>gitee page 只有付费版才能自动更新，免费版只能手动点击 “设置” 中的更新按钮</p>
</blockquote>
<p><strong>自动化解决方案</strong>：使用 puppeteer 操作浏览器进行更新按钮点击</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此处安装版本为 1.8.0</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">giteeUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">        <span class="comment">// 此处可以使用 false 有头模式进行调试, 调试完注释即可</span></span><br><span class="line">          headless: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://gitee.com/login&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1. 选中账号控件</span></span><br><span class="line">    <span class="keyword">let</span> accountElements = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>) <span class="comment">// 此处使用 xpath 寻找控件，下同</span></span><br><span class="line">    <span class="comment">// 2. 填入账号</span></span><br><span class="line">    <span class="keyword">await</span> accountElements[<span class="number">0</span>].type(<span class="string">&#x27;你的 gitee 账户&#x27;</span>)</span><br><span class="line">    <span class="comment">// 3. 选中密码控件</span></span><br><span class="line">    <span class="keyword">let</span> pwdElements = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;user_password&quot;]&#x27;</span>)</span><br><span class="line">    <span class="comment">// 4. 填入密码</span></span><br><span class="line">    <span class="keyword">await</span> pwdElements[<span class="number">0</span>].type(<span class="string">&#x27;你的 gitee 密码&#x27;</span>)</span><br><span class="line">    <span class="comment">// 5. 点击登录</span></span><br><span class="line">    <span class="keyword">let</span> loginButtons = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;new_user&quot;]/div[2]/div/div/div[4]/input&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> loginButtons[<span class="number">0</span>].click()</span><br><span class="line">    <span class="comment">// 6. 等待登录成功</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;你的 gitee page 更新按钮页面&#x27;</span>); <span class="comment">// 比如： https://gitee.com/yang0033/hexo-blog/pages</span></span><br><span class="line">    <span class="comment">// 7.1. 监听步骤 7 中触发的确认弹框，并点击确认</span></span><br><span class="line">    <span class="keyword">await</span> page.on(<span class="string">&#x27;dialog&#x27;</span>, <span class="keyword">async</span> dialog =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;确认更新&#x27;</span>)</span><br><span class="line">        dialog.accept();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 7. 点击更新按钮，并弹出确认弹窗</span></span><br><span class="line">    <span class="keyword">let</span> updateButtons = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> updateButtons[<span class="number">0</span>].click()</span><br><span class="line">    <span class="comment">// 8. 轮询并确认是否更新完毕</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 8.1 获取更新状态标签</span></span><br><span class="line">            deploying = <span class="keyword">await</span> page.$x(<span class="string">&#x27;//*[@id=&quot;pages_deploying&quot;]&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (deploying.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;更新中...&#x27;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;更新完毕&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">500</span>);</span><br><span class="line">    <span class="comment">// 10.更新完毕，关闭浏览器</span></span><br><span class="line">    browser.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">giteeUpdate();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>尝试未成功，待更新</p>
</blockquote>
<h4 id="3-3-出现跨域请求失败503"><a href="#3-3-出现跨域请求失败503" class="headerlink" title="3.3 出现跨域请求失败503"></a>3.3 出现跨域请求失败503</h4><p>这种情况如果出现，修改网址为https，即可解决</p>
<h3 id="4-继静态压缩glup无果之后的替代"><a href="#4-继静态压缩glup无果之后的替代" class="headerlink" title="4. 继静态压缩glup无果之后的替代"></a>4. 继静态压缩glup无果之后的替代</h3><blockquote>
<p>参考该博主  <a href="https://blog.csdn.net/lewky_liu/article/details/82432003">Hexo瞎折腾系列</a></p>
</blockquote>
<h4 id="4-1-静态压缩的目的和手段"><a href="#4-1-静态压缩的目的和手段" class="headerlink" title="4.1 静态压缩的目的和手段"></a>4.1 静态压缩的目的和手段</h4><p>那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手： </p>
<ul>
<li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li>
<li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li>
<li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li>
</ul>
<h4 id="4-2-hexo的压缩静态资源插件"><a href="#4-2-hexo的压缩静态资源插件" class="headerlink" title="4.2 hexo的压缩静态资源插件"></a>4.2 hexo的压缩静态资源插件</h4><p>网上有很多相关的博文，常规的做法是使用<code>gulp</code>来进行压缩，<code>gulp</code>是<code>Node.js</code>下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。</p>
<p>使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下<a href="https://segmentfault.com/a/1190000009544924#articleHeader8">相关的东西</a>。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。</p>
<p>这里我选择的是由rozbo大佬开发的<code>hexo-neat</code>压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！</p>
<h4 id="4-3-如何使用hexo-neat"><a href="#4-3-如何使用hexo-neat" class="headerlink" title="4.3 如何使用hexo-neat"></a>4.3 如何使用hexo-neat</h4><blockquote>
<p><strong>在站点根目录下安装</strong>hexo-neat</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save1</span><br></pre></td></tr></table></figure>

<h4 id="4-4-为站点配置文件添加相关配置"><a href="#4-4-为站点配置文件添加相关配置" class="headerlink" title="4.4 为站点配置文件添加相关配置"></a>4.4 为站点配置文件添加相关配置</h4><p>下边是我自己站点的相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.js&#x27;</span><br><span class="line">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class="line">    - &#x27;**/index.js&#x27;  </span><br></pre></td></tr></table></figure>

<h4 id="4-5-hexo-neat插件踩坑记录"><a href="#4-5-hexo-neat插件踩坑记录" class="headerlink" title="4.5 hexo-neat插件踩坑记录"></a>4.5 hexo-neat插件踩坑记录</h4><p>由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。</p>
<h5 id="4-5-1-跳过压缩文件的正确配置方式"><a href="#4-5-1-跳过压缩文件的正确配置方式" class="headerlink" title="4.5.1 跳过压缩文件的正确配置方式"></a>4.5.1 跳过压缩文件的正确配置方式</h5><p>如果按照官方插件的文档说明来配置<code>exclude</code>，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;1234</span><br></pre></td></tr></table></figure>

<h5 id="4-5-2-压缩html时不要跳过-md文件"><a href="#4-5-2-压缩html时不要跳过-md文件" class="headerlink" title="4.5.2 压缩html时不要跳过.md文件"></a>4.5.2 压缩html时不要跳过<code>.md</code>文件</h5><p><code>.md</code>文件就是我们写文章时的markdown文件，如果跳过压缩<code>.md</code>文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p>
<p>当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。</p>
<h5 id="4-5-3-压缩html时不要跳过-swig文件"><a href="#4-5-3-压缩html时不要跳过-swig文件" class="headerlink" title="4.5.3 压缩html时不要跳过.swig文件"></a>4.5.3 压缩html时不要跳过<code>.swig</code>文件</h5><p><code>.swig</code>文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p>
<h3 id="5-使用自定义的CSS样式"><a href="#5-使用自定义的CSS样式" class="headerlink" title="5. 使用自定义的CSS样式"></a>5. 使用自定义的CSS样式</h3><blockquote>
<p>参考 博主 <a href="https://segmentfault.com/a/1190000003846777">该文章</a></p>
</blockquote>
<p>想自定义About页面，需要使用自定义的css样式因为markdown支持html标签，使用自定义的CSS样式还是不错的。</p>
<p>下面总结一下具体的使用过程：</p>
<h4 id="5-1-添加样式支持"><a href="#5-1-添加样式支持" class="headerlink" title="5.1 添加样式支持"></a>5.1 添加样式支持</h4><p>为规范化开发，这里需要添加子集的样式文件。<br>首先，在样式文件的<code>source</code>文件夹下找到<code>css</code>文件夹，打开<code>main.styl</code>文件，在最后添加：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>My Layer</span><br><span class="line"><span class="regexp">//</span>--------------------------------------------------</span><br><span class="line">@import <span class="string">&quot;_my/mycss&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-新建自定义样式"><a href="#5-2-新建自定义样式" class="headerlink" title="5.2 新建自定义样式"></a>5.2 新建自定义样式</h4><p>找到样式文件夹<code>css</code> 新建<code>_my</code>文件夹，在其中新建<code>mycss.styl</code>文件，之后就可以按照stylus的格式自定义样式了。</p>
<h4 id="5-3-解决-gitee-page-更新后css仍然不变"><a href="#5-3-解决-gitee-page-更新后css仍然不变" class="headerlink" title="5.3 解决 gitee page 更新后css仍然不变"></a>5.3 解决 gitee page 更新后css仍然不变</h4><p>强制刷新浏览器 <code>Shift+F5</code>，这么傻的错误我居然还犯</p>
<h3 id="6-插入思维导图"><a href="#6-插入思维导图" class="headerlink" title="6. 插入思维导图"></a>6. 插入思维导图</h3><blockquote>
<p>参考 <a href="https://www.jianshu.com/p/1c4657f33899">简书</a></p>
</blockquote>
<h4 id="6-1-在hexo根目录下安装"><a href="#6-1-在hexo根目录下安装" class="headerlink" title="6.1 在hexo根目录下安装"></a>6.1 在hexo根目录下安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-simple-mindmap</span><br></pre></td></tr></table></figure>

<h4 id="6-2-在Markdown中使用思维导图"><a href="#6-2-在Markdown中使用思维导图" class="headerlink" title="6.2 在Markdown中使用思维导图"></a>6.2 在<code>Markdown</code>中使用思维导图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class="line">- Front End</span><br><span class="line">    - 任何方向</span><br><span class="line">        - 编程语言</span><br><span class="line">            - Java</span><br><span class="line">        - SQL</span><br><span class="line">        - Linux</span><br><span class="line">        - Git</span><br><span class="line">    - 技术</span><br><span class="line">        - Java Web</span><br><span class="line">        - 数据库</span><br><span class="line">        - Docker</span><br><span class="line">        - svn</span><br><span class="line">        - 消息队列(MQ)</span><br><span class="line">        - mycat</span><br><span class="line">        - 大数据</span><br><span class="line">            - Hadoop</span><br><span class="line">            - HBase</span><br><span class="line">    - 内功</span><br><span class="line">        - 计算机基础</span><br><span class="line">            - 计算机网络</span><br><span class="line">            - 计算机操作系统</span><br><span class="line">            - 编译原理</span><br><span class="line">            - 计算机组成原理</span><br><span class="line">        - 数据结构与算法</span><br><span class="line">        - 设计模式</span><br><span class="line">        - 性能优化</span><br><span class="line">        - 架构设计</span><br><span class="line">        - 软件工程</span><br><span class="line">    - 其他</span><br><span class="line">        - 英语</span><br><span class="line">        - 博客</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-4-存在的问题"><a href="#6-4-存在的问题" class="headerlink" title="6.4 存在的问题"></a>6.4 存在的问题</h4><p>搜集资料发现应该就这么操作就可以正确插入思维导图，然而我却遇到了很多问题。</p>
<h5 id="6-4-1-思维导图节点未被渲染"><a href="#6-4-1-思维导图节点未被渲染" class="headerlink" title="6.4.1 思维导图节点未被渲染"></a>6.4.1 思维导图节点未被渲染</h5><p>更新<code>gitee pages</code>服务之后，出现思维导图限制框，但思维导图的节点没有被渲染，仍然是以无序列表形式展现</p>
<p><code>console</code>报错未找到 <code>‘$’</code>，这么说应该是这个插件直接使用了<code>JQuery</code>但未引用</p>
<p><strong>解决办法一</strong>：直接把<code>jquery</code>下载到本地，放在<code>theme/source/js</code>下</p>
<p>然后再Markdown中引入<code>&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>解决办法二</strong>：使用cdn，使用时应注意应该使用 <code>https</code>传输，否则像<code>chrome</code>会默认阻止连接 <code>jquery cdn</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tool &amp; Platform</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
        <tag>next使用</tag>
      </tags>
  </entry>
  <entry>
    <title>The Starting Point of Blogs</title>
    <url>/2020/08/18/The-Starting-Point-of-Blogs/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Moustache’s First Blog 介绍 <code>Hexo</code>+<code>Github Page</code>的步骤和遇到的问题，并在此列出参考的文章，衷心感谢。</p>
<ul>
<li><a href="https://blog.csdn.net/jiunian_2761/article/details/97388534">Hexo博客搭建记录（一）：本地搭建以及部署到Github</a></li>
<li><a href="https://blog.csdn.net/jiunian_2761/article/details/97388745Hexo">博客搭建记录（二）：基本主题设置以及美化</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30836436">Hexo+Next主题优化</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo官方文档</a></li>
</ul>
<a id="more"></a>

<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ul>
<li>Node.js</li>
<li>Npm</li>
<li>Git</li>
</ul>
<h2 id="二、配置本地Hexo"><a href="#二、配置本地Hexo" class="headerlink" title="二、配置本地Hexo"></a>二、配置本地Hexo</h2><h3 id="1-配置hexo全局控制命令"><a href="#1-配置hexo全局控制命令" class="headerlink" title="1.配置hexo全局控制命令"></a>1.配置hexo全局控制命令</h3><p>​    在cmd或者其他命令行工具下输入如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<h3 id="2-下载Hexo-工具"><a href="#2-下载Hexo-工具" class="headerlink" title="2.下载Hexo 工具"></a>2.下载Hexo 工具</h3><h4 id="2-1初始化博客目录"><a href="#2-1初始化博客目录" class="headerlink" title="2.1初始化博客目录"></a>2.1初始化博客目录</h4><p>在准备好的一个目录下存放自己的博客网站文件，例如我的是 <strong>/e/blog</strong>，也就是在E盘根目录新建了一个<strong>blog</strong>文件夹</p>
<p>然后我们进入该目录，点击鼠标右键，然后点击 <code>git bash</code> 出现一个命令窗口，接下来我们的大多数操作都用它来完成。</p>
<blockquote>
<p><code>Git Bash</code>在这里并不是唯一的选择，如您熟悉其他命令工具，也可以使用其他工具，这里使用<code>Git Bash</code>是为了减少更多不必要的麻烦</p>
</blockquote>
<p>在 <code>Git Bash</code>窗口下输入如下命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>按下回车Enter，<code>Git bash</code> 会自动下载相关文件</p>
<h4 id="2-2-本地生成运行"><a href="#2-2-本地生成运行" class="headerlink" title="2.2 本地生成运行"></a>2.2 本地生成运行</h4><p>在<code>Git Bash</code>窗口下，依次执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这样，Hexo会默认运行在你本机的4000端口上，然后我们在浏览器中输入<code>http://localhost:4000</code>即可显示主题为<code>landscaped</code> 的页面</p>
<h2 id="三、部署到GitPage"><a href="#三、部署到GitPage" class="headerlink" title="三、部署到GitPage"></a>三、部署到GitPage</h2><blockquote>
<p>这个步骤开始前，请确保你已经注册了Github账号，且已经配置好了相关信息，配置方法请向上翻阅 <strong>二、安装Git</strong> 环节下。</p>
</blockquote>
<h3 id="1-在Github创建仓库。"><a href="#1-在Github创建仓库。" class="headerlink" title="1.在Github创建仓库。"></a>1.在Github创建仓库。</h3><p>打开 <a href="https://github.com/">Github官网</a> 登陆你的Github账号，点击页面右上角的 <code>+</code> 、<code>New repository</code>新建一个<code>repository</code>仓库</p>
<blockquote>
<p>为避免麻烦，这里仓库名必须按照<code>yourusername.github.io</code>规范填写，填写完仓库名后，我们点击<code>Create repository</code>按钮，然后等待其创建完成。复制该项目的HTTP链接<code>https://github.com/yourusername/yourusername.github.io.git</code></p>
</blockquote>
<blockquote>
<p><code>yourusername</code>指的就是你的github用户名，本文中出现的该字段都表示这个意思。</p>
</blockquote>
<h3 id="2-Hexo-配置"><a href="#2-Hexo-配置" class="headerlink" title="2.Hexo 配置"></a>2.Hexo 配置</h3><p>打开 <code>Git Bash</code> 切换到博客的根目录，输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-depolyer-git --save    </span><br></pre></td></tr></table></figure>

<p>然后输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>

<p>进入站点配置文件编辑模式，我们向下翻到底部，可以看到 <code>depoly</code> 字段</p>
<p>在英文输入模式下，按键盘上的 <code>i</code>键进入编辑模式，将<code>depoly</code>字段编辑如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">          github: https:<span class="comment">//github.com/yourusername/yourusername.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意这里<code>:</code>后面一定要加空格，不然会出错。</p>
<p>然后我们按<code>Esc</code> 键，输入<code>:wq</code> 保存退出</p>
<h3 id="3-完成部署"><a href="#3-完成部署" class="headerlink" title="3.完成部署"></a>3.完成部署</h3><p>在命令行输入并执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其中，<code>hexo d</code> 则是将本地文件推送到远程。</p>
<p>在第一次推送时，需要输入github  <code>userNam</code>e和<code>password</code></p>
<h2 id="四、使用Next主题"><a href="#四、使用Next主题" class="headerlink" title="四、使用Next主题"></a>四、使用Next主题</h2><h3 id="1-更改主题"><a href="#1-更改主题" class="headerlink" title="1. 更改主题"></a>1. 更改主题</h3><p><a href="https://hexo.io/themes/">Hexo主题库</a>可以找到更多主题，以下以Next为例</p>
<blockquote>
<p>在Hexo目录下有两份重要的配置文件，其名称都是<code>_config.yml</code> 。其中，一份位于站点根目录下，主要包含<code>Hexo</code>的自身配置，另一份位于主题目录下，主要用于配置主题相关的选项。<br>在接下来的描述中，我将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong> 。</p>
</blockquote>
<h4 id="1-1-安装Next"><a href="#1-1-安装Next" class="headerlink" title="1.1 安装Next"></a>1.1 安装Next</h4><p>安装Next主题的方式很简单，利用Git bash 在博客主目录下执行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>然后我们打开站点配置文件，将theme属性从默认值landscape改为next</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>记住，所有的配置属性<code>:</code> 后面都要加一个空格,这样我们设定的值才会生效。</p>
</blockquote>
<h4 id="1-2-选择不同的Next主题样式"><a href="#1-2-选择不同的Next主题样式" class="headerlink" title="1.2 选择不同的Next主题样式"></a>1.2 选择不同的Next主题样式</h4><p>Next提供了四种主题风格scheme,可以在主题配置文件中配置：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># Scheme Settings</span></span><br><span class="line"><span class="meta"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>这里个人选择 <code>Gemini</code></p>
<h3 id="2-更改站点属性"><a href="#2-更改站点属性" class="headerlink" title="2. 更改站点属性"></a>2. 更改站点属性</h3><h4 id="2-1-更改网站名、语言、作者"><a href="#2-1-更改网站名、语言、作者" class="headerlink" title="2.1 更改网站名、语言、作者"></a>2.1 更改网站名、语言、作者</h4><p>打开站点配置文件，找到<code>site</code>字段，具体修改如下：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 设置网站属性信息</span></span><br><span class="line"><span class="meta"># Site:</span></span><br><span class="line"><span class="symbol">title:</span> 小白的博客 <span class="meta">#网站标题（博客站点名字）。</span></span><br><span class="line"><span class="symbol">subtitle:</span> 小小白 <span class="meta">#网站副标题，显示在标题下方</span></span><br><span class="line"><span class="symbol">description:</span> 我是小白 <span class="meta">#个人描述，类似签名，用于搜索引擎对站点的描述，建议在里面加上你的站点的关键词</span></span><br><span class="line"><span class="symbol">keywords:</span> </span><br><span class="line"><span class="symbol">author:</span> 小白 <span class="meta">#博客文章作者</span></span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN  <span class="meta">#设置博客站点语言为中文</span></span><br><span class="line"><span class="symbol">timezone:</span>  <span class="meta">#设置时区，默认当前电脑时区 一般设置为 Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-更改blog-favicon"><a href="#2-2-更改blog-favicon" class="headerlink" title="2.2 更改blog favicon"></a>2.2 更改blog favicon</h4><p>博客网站的图标可以在<a href="https://www.easyicon.net/">easyicon</a>、<a href="http://www.bitbug.net/">bitbug</a>、<a href="https://www.iconfont.cn/plus/user/detail?uid=41718">iconfont</a>等网站选择和制作，然后选择或者创建相应大小的图标文件，放置在blog/themes/next/sources/images目录下，并在主题配置文件中进行如下配置，只需要设置small和medium两个就可以：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span>  </span><br><span class="line"><span class="symbol">    small:</span> <span class="meta-keyword">/images/</span><span class="number">16</span>x16.png  </span><br><span class="line"><span class="symbol">    medium:</span> <span class="meta-keyword">/images/</span><span class="number">32</span>x32.png  </span><br><span class="line"><span class="symbol">    apple_touch_icon:</span> <span class="meta-keyword">/images/</span><span class="number">128</span>x128.png  </span><br><span class="line"><span class="symbol">    safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo2.svg</span><br></pre></td></tr></table></figure>

<h3 id="3-菜单栏"><a href="#3-菜单栏" class="headerlink" title="3. 菜单栏"></a>3. 菜单栏</h3><h4 id="3-1-显示更多栏目"><a href="#3-1-显示更多栏目" class="headerlink" title="3.1 显示更多栏目"></a>3.1 显示更多栏目</h4><p>在主题配置文件中修改如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home <span class="meta"># 首页</span></span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user <span class="meta"># 关于</span></span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags <span class="meta"># 标签</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th <span class="meta"># 分类</span></span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive  <span class="meta"># 归档</span></span><br><span class="line">  <span class="meta"># schedule: /schedule/ || calendar # 日历</span></span><br><span class="line">  <span class="meta"># sitemap: /sitemap.xml || sitemap # 站点地图</span></span><br><span class="line">  <span class="meta"># commonweal: /404/ || heartbeat # 腾讯公益404</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-图标和内容量"><a href="#3-2-图标和内容量" class="headerlink" title="3.2 图标和内容量"></a>3.2 图标和内容量</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span> <span class="comment"># 是否显示各个页面的图标</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span> <span class="comment"># 是否显示分类/标签/归档页的内容量</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-添加分类、标签、关于菜单项"><a href="#3-3-添加分类、标签、关于菜单项" class="headerlink" title="3.3 添加分类、标签、关于菜单项"></a>3.3 添加分类、标签、关于菜单项</h4><p>首先打开主题下的配置文件_config.yml，然后搜索menu找到如下配置项，将about、tags、categories前的#号去掉，就开启了关于、标签和分类标签，当然还有其他菜单项也可以开启</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  about:</span> <span class="meta-keyword">/about/</span> || user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="meta-keyword">/tags/</span> || tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br></pre></td></tr></table></figure>


<p>需运行如下命令新建相关页面</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;about&quot;</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>打开各页面对应的index.md文件，编辑如下内容</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">title</span>: about  # 在页面中显示的title</span><br><span class="line"><span class="attribute">date</span>: <span class="number">2019</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">19</span>:<span class="number">16</span>:<span class="number">17</span></span><br><span class="line"><span class="attribute">type</span>: <span class="string">&quot;about&quot;</span>  # 为固定内容，其他对应  <span class="string">&quot;tags&quot;</span>  <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后在发布的博文开头添加<code>tag</code>s和<code>categories</code>,如：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: The Starting Point of Blogs</span><br><span class="line">urlname: The Starting Point of Blogs</span><br><span class="line">date: 2020<span class="string">-08</span><span class="string">-18</span> 13:56:39</span><br><span class="line"><span class="keyword">tags:</span> [hexo部署,next使用]   #new</span><br><span class="line">categories: Tool&amp;Platform   #new</span><br></pre></td></tr></table></figure>

<h4 id="3-4-本地搜索"><a href="#3-4-本地搜索" class="headerlink" title="3.4 本地搜索"></a>3.4 本地搜索</h4><p>在你站点的根目录下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>打开 <code>Hexo</code> 站点的 <code>_config.yml</code>,添加配置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>local_search</code> ,设置为 <code>true</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<h3 id="4-侧边栏"><a href="#4-侧边栏" class="headerlink" title="4. 侧边栏"></a>4. 侧边栏</h3><p>以下设置都是在 <strong>主题配置</strong> 文件中</p>
<h4 id="4-1-显示可跳转-日志-分类-标签页-的链接"><a href="#4-1-显示可跳转-日志-分类-标签页-的链接" class="headerlink" title="4.1 显示可跳转 日志 / 分类 / 标签页 的链接"></a>4.1 显示可跳转 日志 / 分类 / 标签页 的链接</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-社交信息设置"><a href="#4-2-社交信息设置" class="headerlink" title="4.2 社交信息设置"></a>4.2 社交信息设置</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">social</span>:</span><br><span class="line">  <span class="attribute">GitHub</span>: <span class="attribute">https</span>:<span class="comment">//github.com/yourname || github</span></span><br><span class="line">  <span class="number">#E</span><span class="attribute">-Mail</span>: <span class="attribute">mailto</span>:yourname<span class="variable">@gmail</span>.com || envelope</span><br><span class="line">  <span class="attribute">Weibo</span>: <span class="attribute">https</span>:<span class="comment">//weibo.com/yourname || weibo</span></span><br><span class="line">  #<span class="attribute">Google</span>: <span class="attribute">https</span>:<span class="comment">//plus.google.com/yourname || google</span></span><br><span class="line">  #<span class="attribute">Twitter</span>: <span class="attribute">https</span>:<span class="comment">//twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="number">#FB</span> <span class="attribute">Page</span>: <span class="attribute">https</span>:<span class="comment">//www.facebook.com/yourname || facebook</span></span><br><span class="line">  #VK <span class="attribute">Group</span>: <span class="attribute">https</span>:<span class="comment">//vk.com/yourname || vk</span></span><br><span class="line">  #<span class="attribute">StackOverflow</span>: <span class="attribute">https</span>:<span class="comment">//stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  #<span class="attribute">YouTube</span>: <span class="attribute">https</span>:<span class="comment">//youtube.com/yourname || youtube</span></span><br><span class="line">  #<span class="attribute">Instagram</span>: <span class="attribute">https</span>:<span class="comment">//instagram.com/yourname || instagram</span></span><br><span class="line">  #<span class="attribute">Skype</span>: <span class="attribute">skype</span>:yourname?call|chat || skype</span><br></pre></td></tr></table></figure>

<p>Next 默认给出了一些模板，我们只要将其中的链接改为自己的链接就可以了，当然你也可以自己定义，格式为</p>
<p>名字: 链接 || 图标名，图标必须是<a href="http://fontawesome.dashgame.com/">FontAwesome</a>网站中能找到的图标名。</p>
<p>例如我添加我的博客地址：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">qianfanguojin:</span> <span class="attr">https:</span><span class="comment">//qianfanguojin.github.io/ || codepen </span></span><br></pre></td></tr></table></figure>

<h4 id="4-3-圆形头像设置"><a href="#4-3-圆形头像设置" class="headerlink" title="4.3 圆形头像设置"></a>4.3 圆形头像设置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span> <span class="comment">#头像文件目录</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span> <span class="comment">#设置鼠标放在头像上面是否旋转</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span> <span class="comment">#头像是否设为圆形</span></span><br></pre></td></tr></table></figure>

<p>将自己喜欢的头像头像按照需求自己更换自己喜欢的就可以了，不过这里要注意一下头像可能会变成椭圆，如果头像是椭圆的，是因为图片不是一个正方形的图片，找到一个宽高像素一样的的图片即可。</p>
<h5 id="设置头像边框为圆形框"><a href="#设置头像边框为圆形框" class="headerlink" title="设置头像边框为圆形框"></a>设置头像边框为圆形框</h5><p>打开位于 <code>themes/next/source/css/_common/components/sidebar/sidebar-author.syl</code> 文件,修改如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-设置侧边栏社交图标"><a href="#4-4-设置侧边栏社交图标" class="headerlink" title="4.4 设置侧边栏社交图标"></a>4.4 设置侧边栏社交图标</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social_icons</code> ，添加社交站点名称（注意大小写）图标，<a href="https://link.zhihu.com/?target=http://fontawesome.dashgame.com/">Font Awesome</a>图标</p>
<h4 id="4-5-RSS"><a href="#4-5-RSS" class="headerlink" title="4.5 RSS"></a>4.5 RSS</h4><p>在你 <code>Hexo</code> 站点目录下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>打开 <code>Hexo</code> 站点下的 <code>_config.yml</code> ,添加如下配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># feed</span><br><span class="line"># Dependencies: https://github.com/hexojs/hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br></pre></td></tr></table></figure>

<h4 id="4-6-友情链接"><a href="#4-6-友情链接" class="headerlink" title="4.6 友情链接"></a>4.6 友情链接</h4><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>Blog rolls</code>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_title: 友情链接 #标题</span><br><span class="line">links_layout: block #布局，一行一个连接</span><br><span class="line">#links_layout: inline</span><br><span class="line">links: #连接</span><br><span class="line">  baidu: http://example.com/</span><br><span class="line">  google: http://example.com/</span><br></pre></td></tr></table></figure>

<h4 id="4-7-配置解读"><a href="#4-7-配置解读" class="headerlink" title="4.7 配置解读"></a>4.7 配置解读</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#自动生成目录</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span> <span class="comment">#自动产生目录编号</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span> <span class="comment">#标题过长是否换行</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span> <span class="comment"># 是否显示所有等级的目录项。</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span> <span class="comment">#最大标题嵌套个数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.#侧边栏的位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="comment">#width: 300</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span> <span class="comment"># 侧边栏相对主菜单的像素距离</span></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span> <span class="comment">#在手机上侧边栏是否显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回顶部</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span>  <span class="comment">#侧边栏显示返回顶部信息,默认显示在页面右下方</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="comment">#显示百分比</span></span><br></pre></td></tr></table></figure>

<h3 id="5-页面设置"><a href="#5-页面设置" class="headerlink" title="5. 页面设置"></a>5. 页面设置</h3><h4 id="5-1-鼠标点击红心"><a href="#5-1-鼠标点击红心" class="headerlink" title="5.1 鼠标点击红心"></a>5.1 鼠标点击红心</h4><p>目前网上大多数文章都是在<code>themes/next/source/js/src</code> 下新建文件，但笔者写这篇文章时最新版Next已经没有<code>src</code>文件夹了 ，于是，我们可以在<code>themes/next/source/js/</code>下新建<code>clicklove.js</code>内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">&quot;left:&quot;</span>+d[e].x+<span class="string">&quot;px;top:&quot;</span>+d[e].y+<span class="string">&quot;px;opacity:&quot;</span>+d[e].alpha+<span class="string">&quot;;transform:scale(&quot;</span>+d[e].scale+<span class="string">&quot;,&quot;</span>+d[e].scale+<span class="string">&quot;) rotate(45deg);background:&quot;</span>+d[e].color+<span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;div&quot;</span>);a.className=<span class="string">&quot;heart&quot;</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">&quot;style&quot;</span>);a.type=<span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;rgb(&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;,&quot;</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">setTimeout</span>(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>然后在修改<code>themes/next/layout/_layout.swig</code> 文件末尾添加</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.clicklove %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意</p>
<blockquote>
<p>很多人配置正确但不显示的原因主要出在这里，也就是<code>src</code> 后面的文件链接错误，hexo中使用的是相对路径，也就是说,只要你不指定为绝对路径,设置的链接都将是<code>root+url</code>的形式，一般来说，大多数用户默认的<code>root</code> 都为<code>/</code> ，但是有些情况，例如设置了Git Page ,要修改<code>root</code>的路径，<code>root</code>路径我们可以在 <strong>站点配置文件</strong> 中找到：</p>
</blockquote>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">\## <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">&#x27;http://yoursite.com/child&#x27;</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">&#x27;/child/&#x27;</span></span><br><span class="line">url: http:<span class="comment">//yoursite.com</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line"> trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;index.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br><span class="line"> trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></table></figure>

<p><img data-src="problem1.jpg"></p>
<p>上图就是在我设置了Git Page后 <code>root</code>路径的值，在这种情况下，我们在修改<code>themes/next/layout/_layout.swig</code> 文件时，<code>src</code> 的路径都应该加上<code>root</code> 的路径值，因此，在这种情况下代码应修改为：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.clicklove %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/fa/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>确定无误后最后在主题配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示页面红心</span></span><br><span class="line"><span class="attr">clicklove:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>另外还有一个效果，跟那个红心是差不多的（只能选一个），首先在<code>themes/next/source/js/src</code>里面建一个叫<code>fireworks.js</code>的文件，代码如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">&quot;use strict&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">&quot;#F00&quot;</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">&quot;linear&quot;</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">&quot;easeOutExpo&quot;</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="built_in">this</span>,i=<span class="built_in">arguments</span>;<span class="built_in">clearTimeout</span>(a),a=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.fireworks&quot;</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">&quot;2d&quot;</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">&quot;mousedown&quot;</span>,colors=[<span class="string">&quot;#FF1461&quot;</span>,<span class="string">&quot;#18FF92&quot;</span>,<span class="string">&quot;#5A87FF&quot;</span>,<span class="string">&quot;#FBF38C&quot;</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">&quot;px&quot;</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">&quot;px&quot;</span>,canvasEl.getContext(<span class="string">&quot;2d&quot;</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">&quot;sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;toggle-sidebar&quot;</span>!==e.target.id&amp;&amp;<span class="string">&quot;A&quot;</span>!==e.target.nodeName&amp;&amp;<span class="string">&quot;IMG&quot;</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<p>打开<code>themes/next/layout/_layout.swig</code>,在<code>&lt;/body&gt;</code>上面写下如下代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.fireworks %&#125;</span><span class="xml">   <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;fireworks&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/fireworks.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>打开主题配置文件，在里面最后写下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-添加动态背景"><a href="#5-2-添加动态背景" class="headerlink" title="5.2 添加动态背景"></a>5.2 添加动态背景</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置动态背景</span></span><br><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">170</span> <span class="comment"># the number of lines</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">false</span> <span class="comment"># Set true to further delay loading</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Canvas-ribbon</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<p>新版Next已经支持了上面三种动态背景方式，大家想用哪种就将该项的<code>enable</code> 设为 <code>true</code>,具体效果大家自己尝试，一般用的是第一种。</p>
<p>当然，指明要用那种，但是Next没有自带该动画的包，我们要自己下载，链接就在注释中<code># Dependencies</code> 项后面 ，例如我下载第一种：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-canvas-nest themes/<span class="keyword">next</span>/source/<span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span></span></span><br></pre></td></tr></table></figure>

<p>链接后的是指定下载后放到的文件夹名，大家要注意是放在<code>lib</code> 下且文件夹名字应该和上面的设置项名字一样。</p>
<h5 id="个人使用了canvas-ribbon的背景，且优先使用cdn引入"><a href="#个人使用了canvas-ribbon的背景，且优先使用cdn引入" class="headerlink" title="个人使用了canvas-ribbon的背景，且优先使用cdn引入"></a>个人使用了<code>canvas-ribbon</code>的背景，且优先使用cdn引入</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">size:</span> <span class="number">300</span> <span class="comment"># The width of the ribbon</span></span><br><span class="line"> <span class="attr">alpha:</span> <span class="number">0.4</span> <span class="comment"># The transparency of the ribbon</span></span><br><span class="line"> <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># The display level of the ribbon</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">\<span class="comment"># Internal version: 1.0.0</span></span><br><span class="line">canvas_ribbon: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>theme-<span class="keyword">next</span><span class="regexp">/theme-next-canvas-    ribbon@1/</span>canvas-ribbon.js</span><br><span class="line">\<span class="comment"># canvas_ribbon:</span></span><br></pre></td></tr></table></figure>

<h4 id="5-3-博客底部基本布局"><a href="#5-3-博客底部基本布局" class="headerlink" title="5.3 博客底部基本布局"></a>5.3 博客底部基本布局</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 博客底部布局</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2015 #设置建站时间，不设置则默认为当前年份</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">heart</span>  <span class="comment"># 作者图标，默认为author，自定义的图标需来自fontawesome中</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span>  <span class="comment"># 图标是否闪动</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span> <span class="comment"># 图标颜色</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">小白</span> <span class="comment">#设置底部显示的名字，默认为站点配置文件的author名字</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Powered By Hexo</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span> <span class="comment"># 是否显示 Hexo 版本</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示主题信息</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">false</span> <span class="comment"># 是否显示主题版本</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP information for Chinese users. See: http://www.beian.miit.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示网站备案信息</span></span><br><span class="line">    <span class="attr">icp:</span></span><br></pre></td></tr></table></figure>

<h4 id="5-4-底部显示busuanzi博客访客-访问次数统计"><a href="#5-4-底部显示busuanzi博客访客-访问次数统计" class="headerlink" title="5.4 底部显示busuanzi博客访客/访问次数统计"></a>5.4 底部显示busuanzi博客访客/访问次数统计</h4><p>修改主题配置文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不蒜子统计功能</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启busuanzi统计功能</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span> <span class="comment"># 是否统计总访客数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span> <span class="comment"># 访客数图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span> <span class="comment"># 是否显示同级总访问次数</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span> <span class="comment"># 总访问次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span> <span class="comment"># 是否显示单个文章查看次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span> <span class="comment"># 文章被查看次数的图标</span></span><br></pre></td></tr></table></figure>

<h4 id="5-5-右上角显示Github标识"><a href="#5-5-右上角显示Github标识" class="headerlink" title="5.5 右上角显示Github标识"></a>5.5 右上角显示Github标识</h4><p>修改主题配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="comment"># Github 跳转图标</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span> <span class="comment"># Github主页地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span> <span class="comment"># 鼠标悬停显示的文字</span></span><br></pre></td></tr></table></figure>

<h4 id="5-6-接入网易云播放器"><a href="#5-6-接入网易云播放器" class="headerlink" title="5.6 接入网易云播放器"></a>5.6 接入网易云播放器</h4><p>首先在网易云音乐网页端搜索你想播放的音乐（有版权保护的不行）</p>
<p>在网易云客户端点击生成外链播放器，得到外链的html代码：</p>
<p>后我们将代码粘贴到一个合适的位置，建议在侧边栏，对应的文件是<code>themes/next/layout/_macro/sidebar.swig</code> ，不同的位置效果呈现的效果不同，例如我的：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-overview-wrap sidebar-panel&#123;% if not display_toc or toc(page.content).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;&quot;</span>&gt;</span>         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;site-overview&quot;</span>&gt;</span>            </span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name"><span class="builtin-name">partial</span></span>(<span class="name">&#x27;_partials/sidebar/site-overview.swig&#x27;</span>, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><span class="xml">                      </span></span><br><span class="line"><span class="xml">    &#123;% for inject_item in theme.injects.sidebar %&#125;             </span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name"><span class="builtin-name">partial</span></span>(<span class="name">inject_item.layout</span>, inject_item.locals, inject_item.options) &#125;&#125;</span><span class="xml">           &#123;% endfor %&#125;         </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>         </span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--网易云链接--&gt;</span>         </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="5-7-浏览页面的时候显示当前浏览进度"><a href="#5-7-浏览页面的时候显示当前浏览进度" class="headerlink" title="5.7 浏览页面的时候显示当前浏览进度"></a>5.7 浏览页面的时候显示当前浏览进度</h4><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<h4 id="5-8-添加顶部加载条"><a href="#5-8-添加顶部加载条" class="headerlink" title="5.8 添加顶部加载条"></a>5.8 添加顶部加载条</h4><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>pace</code> ,设置为 <code>true</code> ,可以更换加载样式：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">Dependencies: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-pace</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-flash #替换更换样式</span><br></pre></td></tr></table></figure>

<h4 id="5-9-自定义鼠标样式"><a href="#5-9-自定义鼠标样式" class="headerlink" title="5.9 自定义鼠标样式"></a>5.9 自定义鼠标样式</h4><p>打开 <code>themes/next/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p>
<h3 id="6-文章内容相关"><a href="#6-文章内容相关" class="headerlink" title="6 文章内容相关"></a>6 文章内容相关</h3><h4 id="6-1-文章摘要显示（显示阅读全文按钮）"><a href="#6-1-文章摘要显示（显示阅读全文按钮）" class="headerlink" title="6.1 文章摘要显示（显示阅读全文按钮）"></a>6.1 文章摘要显示（显示阅读全文按钮）</h4><ul>
<li><p>自动形成摘要模式</p>
<p>打开主题配置文件，修改内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span> <span class="comment"># 截取的内容长度</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Read more button</span></span><br><span class="line"><span class="comment"># If true, the read more button would be displayed in excerpt section.</span></span><br><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span> <span class="comment"># 是否显示阅读全文按钮  </span></span><br></pre></td></tr></table></figure>

<p>但是这样的方式不够自由，我们可以使用如下方式：</p>
</li>
</ul>
<h4 id="6-2-代码块设置"><a href="#6-2-代码块设置" class="headerlink" title="6.2 代码块设置"></a>6.2 代码块设置</h4><p>使用参照如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码块设置</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="comment"># 代码块主题, 可选的值为 normal; night; night eighties; night blue; night bright</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy_button on codeblock</span></span><br><span class="line">  <span class="comment"># 显示复制按钮</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span>  <span class="comment"># 按钮显示格式</span></span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure>

<p>代码块样式的具体内容可以查看<a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme">官方文档</a></p>
<h4 id="6-3-添加打赏"><a href="#6-3-添加打赏" class="headerlink" title="6.3 添加打赏"></a>6.3 添加打赏</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># 打赏设置</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward would be displayed in every article by default.</span></span><br><span class="line">  <span class="comment"># You can show or hide reward in a specific article throuth `reward: true | false` in Front-matter.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span> <span class="comment"># 动画</span></span><br><span class="line">  <span class="comment">#comment: Donate comment here.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment">#wechatpay: /images/wechatpay.png # 微信捐赠二维码图片</span></span><br><span class="line">  <span class="comment">#alipay: /images/alipay.png # 支付宝捐赠二维码图片</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png # 比特币</span></span><br></pre></td></tr></table></figure>

<h4 id="6-4-添加版权信息"><a href="#6-4-添加版权信息" class="headerlink" title="6.4 添加版权信息"></a>6.4 添加版权信息</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span> <span class="comment"># 许可协议</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># 侧边栏显示</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 文章底部显示</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>

<p>注意</p>
<blockquote>
<p>版权信息中的本文链接 由主题配置中的   <code>url</code>   控制</p>
</blockquote>
<h4 id="6-5-自定义文章底部版权声明"><a href="#6-5-自定义文章底部版权声明" class="headerlink" title="6.5 自定义文章底部版权声明"></a>6.5 自定义文章底部版权声明</h4><p>效果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">作者：Dragonstyle</span><br><span class="line">链接：http://www.dragonstyle.win/2017/09/06/Android-Studio个人设置/</span><br><span class="line">來源：简书</span><br><span class="line">版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明出处！</span><br></pre></td></tr></table></figure>

<p>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ,内容如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm:ss&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&#x27;.fa-clipboard&#x27;);</span><br><span class="line">    clipboard.on(&#x27;success&#x27;, $(function()&#123;</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#x27;复制成功&#x27;,   </span><br><span class="line">          html: false,</span><br><span class="line">          timer: 500,   </span><br><span class="line">          showConfirmButton: false</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>在目录 <code>themes/next/source/css/_common/components/post/</code> 下添加 <code>my-post-copyright.styl</code>,内容如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #333333; // title color</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #0593d3; // link color</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 <code>themes/next/layout/_macro/post.swig</code> ,在代码如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;% include &#x27;wechat-subscriber.swig&#x27; %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>之前添加增加如下代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &#x27;my-copyright.swig&#x27; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>修改 <code>themes/next/source/css/_common/components/post/post.styl</code> 文件，在最后一行增加代码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>

<p>设置新建文章自动开启</p>
<p><code>copyright</code>,即新建文章自动显示自定义的版权声明,设置 <code>your site/scaffolds/post.md</code>文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">categories:</span><br><span class="line">copyright: true #新增,开启</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="6-6-添加图片"><a href="#6-6-添加图片" class="headerlink" title="6.6 添加图片"></a>6.6 添加图片</h4><ol>
<li><p><strong>设置站点配置<code>_config.yml</code></strong>:将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p>
</li>
<li><p><strong>安装插件</strong>：在hexo根目录打开Git Bash,执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行<code>hexo n &quot;XXXXXX&quot;</code></strong>,生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p>
</li>
<li><p><strong>添加图片</strong>:在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code></p>
</li>
</ol>
<h4 id="6-7-添加文章结束提示语"><a href="#6-7-添加文章结束提示语" class="headerlink" title="6.7 添加文章结束提示语"></a>6.7 添加文章结束提示语</h4><blockquote>
<p>提示：原文章中此处出现问题</p>
</blockquote>
<p><img data-src="problem2.png"></p>
<p><strong>核心代码</strong>：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;display:flex;justify-content:center;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span>------ 今天只会更爱哈尼 <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:#f17c67;margin:0 5px;display:inline-block;animation: iconAnimate 1.33s ease-in-out infinite;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-heart&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>The End of This Article------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果你想简单一点实现，直接复制这段代码，然后将其插入到 <code>themes/next/layout/_macro/post.swig</code> 文件的如下位置：</li>
</ul>
<p><img data-src="problem2-1.png"></p>
<p>当然，我们大多时候对功能都需要一个灵活性，也就是可以开关。为了实现这样的效果，我们先在<code>themes/next/layout/_macro/</code> 新建 <code>passage-end-tag.swig</code> 文件，将上面的 <strong>核心代码</strong> 添加进去。<br>然后我们修改<code>themes/next/layout/_macro/post.swig</code> 文件 ，将上面简单实现的代码替换成：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 文章结束表示语--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;passage-end-tag.swig&#x27; %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后，我们在主题配置文件末尾添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章结束提示语</span></span><br><span class="line"><span class="attr">passage_end_tag:</span> </span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>我们就可以在这里将其设为<code>true</code> 或 <code>false</code> 来控制其显示。</p>
<blockquote>
<p>个人在配置的时候，使用<code>&lt;i class=&quot;fa fa-heart-o&quot; aria-hidden=&quot;true&quot;&gt;</code>一直不被解析，没找到原因，换了一个图标就显示了</p>
</blockquote>
<blockquote>
<p>另外一个问题，如果出现乱码的情况<br><strong>解决办法</strong>：首先是把乱码部分对应的文件用写字板打开，转换其编码格式为<code>UTF-8</code></p>
</blockquote>
<blockquote>
<p>最后一个应该注意的是，结束语是居中显示，需要注意左右两面内容的实际长度一致，否则很丑</p>
</blockquote>
<h4 id="6-8-添加博客字数和阅读时间统计功能"><a href="#6-8-添加博客字数和阅读时间统计功能" class="headerlink" title="6.8 添加博客字数和阅读时间统计功能"></a>6.8 添加博客字数和阅读时间统计功能</h4><p>首先在站点根目录下配置依赖：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>然后再站点配置文件中加入以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment">#是否统计字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment">#是否统计阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment">#是否统计总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment">#是否统计总阅读时长</span></span><br></pre></td></tr></table></figure>

<p>最后在主题配置文件中修改为以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字数及访问时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>  <span class="comment">#分隔线</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>  <span class="comment">#文章中的显示是否显示文本</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span>       <span class="comment">#网页底部的显示是否显示文本</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span> <span class="comment">#平均每个字符的长度</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span> <span class="comment"># 设定每分钟可阅读的字符数</span></span><br></pre></td></tr></table></figure>

<h4 id="6-9-修改-tag-图标"><a href="#6-9-修改-tag-图标" class="headerlink" title="6.9 修改 tag 图标"></a>6.9 修改 tag 图标</h4><p>默认的 <code>tag</code> 样式为 <code>#</code> 不带图标，我们可以改成使用图标</p>
<p>新版Next 已经帮我们集成了这个功能，我们只要在主题配置文件中修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post </span></span><br><span class="line"><span class="comment"># 使用标签图标 </span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="6-10-设置博客摘要显示"><a href="#6-10-设置博客摘要显示" class="headerlink" title="6.10 设置博客摘要显示"></a>6.10 设置博客摘要显示</h4><p>首先我们需要开启摘要功能，修改主题配置文件：参考该<a href="https://jiangding1990.github.io/2017/04/25/Hexo%E4%BD%BF%E7%94%A8NexT%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E6%96%B9%E6%B3%95/">方法</a></p>
<h5 id="solution-1-在文章中使用进行手动截断-推荐"><a href="#solution-1-在文章中使用进行手动截断-推荐" class="headerlink" title="solution 1     在文章中使用进行手动截断(推荐)"></a>solution 1     在文章中使用进行手动截断(<strong>推荐</strong>)</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="solution-2-在文章中的front-matter中添加description，并提供文章摘要"><a href="#solution-2-在文章中的front-matter中添加description，并提供文章摘要" class="headerlink" title="solution 2     在文章中的front-matter中添加description，并提供文章摘要"></a>solution 2     在文章中的<code>front-matter</code>中添加<code>description</code>，并提供文章摘要</h5><p>这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。使用这种方法也可以实现首页文章部分显示的效果</p>
<p>方法如下图所示：</p>
<p><img data-src="problem3.png"></p>
<h5 id="solution-3-自动生成摘要"><a href="#solution-3-自动生成摘要" class="headerlink" title="solution 3     自动生成摘要"></a>solution 3     自动生成摘要</h5><p>想要自动生成文章摘要，需在<code>主题配置</code>文件中添加以下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p>其中的<code>length</code>值为摘要所截取的字符长度。</p>
<h4 id="6-11-设置文章英文链接"><a href="#6-11-设置文章英文链接" class="headerlink" title="6.11 设置文章英文链接"></a>6.11 设置文章英文链接</h4><p>hexo生成的默认文章链接格式为<code>： :year/:month/:day/:title/</code>，这种默认的配置缺点很明显，当文件名是中文的时候url链接里就有中文出现。<br> 可以通过添加<code>urlname</code>字段实现文章的链接为英文，在md文件的Front-matter区域新增<code>urlname</code>属性，值为文章的英文title，参考如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">title</span>: 基于<span class="selector-tag">Hexo</span>+<span class="selector-tag">Next</span>的主题优化总结</span><br><span class="line"><span class="selector-tag">urlname</span>: <span class="selector-tag">summary-of-theme-optimization-based-on-hexo</span>&amp;<span class="selector-tag">next</span></span><br><span class="line"><span class="selector-tag">date</span>: 2019<span class="selector-tag">-07-12</span> 20<span class="selector-pseudo">:01</span><span class="selector-pseudo">:26</span></span><br><span class="line"><span class="selector-tag">categories</span>:</span><br><span class="line">  <span class="selector-tag">-</span> 工具</span><br><span class="line"><span class="selector-tag">tags</span>: </span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Hexo</span></span><br><span class="line"><span class="selector-tag">---</span></span><br></pre></td></tr></table></figure>

<p>再将博客配置文件下的<code>permalink</code>值改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:urlname/</span></span><br></pre></td></tr></table></figure>

<h4 id="6-12-Markdown首行缩进"><a href="#6-12-Markdown首行缩进" class="headerlink" title="6.12 Markdown首行缩进"></a>6.12 Markdown首行缩进</h4><p>在段落开头，输入以下字符，然后紧跟着输入文本即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>; &amp;<span class="selector-id">#160</span>;</span><br></pre></td></tr></table></figure>

<h4 id="6-13-Markdown转义字符"><a href="#6-13-Markdown转义字符" class="headerlink" title="6.13 Markdown转义字符"></a>6.13 Markdown转义字符</h4><p>md中用到的主要可能有语法意义的非空白符号有：\ ` * _ { } [ ] ( ) # + - . !<br> 在正常段落中要原样输出以上符号，一般需要加反斜杠\在前（连续两个反斜杠输出一个反斜杠。</p>
<h4 id="6-14-修改文章间分割线"><a href="#6-14-修改文章间分割线" class="headerlink" title="6.14 修改文章间分割线"></a>6.14 修改文章间分割线</h4><p>打开 <code>themes/next/source/css/_common/components/post/post-eof.styl</code> ,修改：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.posts-expand &#123;</span><br><span class="line">  .post-eof &#123;</span><br><span class="line">    display: block;</span><br><span class="line">  //  margin: $post-eof-margin-top auto $post-eof-margin-bottom;  </span><br><span class="line">    width: 0%; //分割线长度</span><br><span class="line">    height: 0px; // 分割线高度</span><br><span class="line">    background: $grey-light;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-15-博文置顶"><a href="#6-15-博文置顶" class="headerlink" title="6.15 博文置顶"></a>6.15 博文置顶</h4><p>打开 <code>Hexo</code> 站点下 <code>node_modules/hexo-generator-index/lib/generator.js</code> 文件。代码全部替换为：(next 5.1以后主题已自带此功能)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var pagination = require(&#x27;hexo-pagination&#x27;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &#x27;page&#x27;;</span><br><span class="line">  return pagination(&#x27;&#x27;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&#x27;index&#x27;, &#x27;archive&#x27;],</span><br><span class="line">    format: paginationDir + &#x27;/%d/&#x27;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>打开文章添加top字段,设置数值，数值越大文章越靠前：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: layout</span><br><span class="line">title: 标签1</span><br><span class="line">date: 2017-08-18 15:41:18</span><br><span class="line">tags: 标签1</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="6-16-文章顶部显示更新时间"><a href="#6-16-文章顶部显示更新时间" class="headerlink" title="6.16 文章顶部显示更新时间"></a>6.16 文章顶部显示更新时间</h4><p>打开主题配置文件 <code>_config.yml</code> ,搜索关键字 <code>updated_at</code> 设置为 <code>true</code> ：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Post meta display settings</span><br><span class="line">post_meta:</span><br><span class="line">  item_text: true</span><br><span class="line">  created_at: true</span><br><span class="line">  updated_at: ture</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure>

<p>编辑文章,增加关键字<code>updated</code>（next可以根据文章改变时间自动更改）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: layout</span><br><span class="line">title: 关于</span><br><span class="line">date: 2017-08-18 15:41:18</span><br><span class="line">updated: 2017-09-05 20:18:54 #手动添加更新时间</span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Tool &amp; Platform</category>
      </categories>
      <tags>
        <tag>hexo部署</tag>
        <tag>next使用</tag>
      </tags>
  </entry>
</search>
